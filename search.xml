<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java——网络编程</title>
      <link href="/2021/07/14/Learn-java-TCP/"/>
      <url>/2021/07/14/Learn-java-TCP/</url>
      
        <content type="html"><![CDATA[<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://www.kuangstudy.com/">狂神说java官网</a></p><p><a href="https://www.bilibili.com/video/BV1LJ411z7vY">B站视频链接</a></p><h1 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h1><ol><li>两个主要的问题：如何准确定位到网络上的一台或多台主机；找到主机之后如何通信。</li><li>网络编程中的要素：IP和端口号；网络通信协议。</li><li>万物皆对象。</li></ol><h1 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h1><ul><li>IP地址：InterAddress，唯一定位一台网络上的计算机。</li><li>127.0.0.1：本机localhost。</li><li>ip地址分类：<ul><li>ipv4 / ipv6</li><li>公网（互联网）-私网（局域网）</li></ul></li><li>域名：记忆IP问题</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIP</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         InetAddress inetAddress1 = InetAddress.getLocalHost();</span><br><span class="line">         System.out.println(inetAddress1);</span><br><span class="line">         InetAddress inetAddress2 = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">         System.out.println(inetAddress2);</span><br><span class="line">         System.out.println(inetAddress2.getCanonicalHostName());<span class="comment">//规范的名字</span></span><br><span class="line">         System.out.println(inetAddress2.getHostAddress());<span class="comment">//ip</span></span><br><span class="line">         System.out.println(inetAddress2.getHostName());<span class="comment">//域名</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-TCP/TestIP.JPG"></p><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>不同的端口有不同的端口号，用来区分软件。</p><p>0-65535被规定。单个协议下，端口号不能冲突。</p><p>端口分类：</p><ul><li>公用端口 0-1023<ul><li>HTTP: 80</li><li>HTTPS: 443</li><li>FTP: 21</li><li>Telent: 23</li></ul></li><li>程序注册端口 1024-49151，分配用户或者程序<ul><li>Tomcat: 8080</li><li>MySQL: 3306</li><li>Oracle: 1521</li></ul></li><li>动态、私有 49152-65535</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano <span class="comment">#查看所有端口</span></span><br><span class="line">netstat -ano|findstr <span class="string">&quot;10000&quot;</span> <span class="comment">#查看指定端口</span></span><br><span class="line">tasklist|findstr <span class="string">&quot;10000&quot;</span> <span class="comment">#查看指定端口的进程</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSocket</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      InetSocketAddress socketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">      InetSocketAddress socketAddress2 = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">      System.out.println(socketAddress);</span><br><span class="line">      System.out.println(socketAddress2);</span><br><span class="line"></span><br><span class="line">      System.out.println(socketAddress.getAddress());</span><br><span class="line">      System.out.println(socketAddress.getHostName()); <span class="comment">//地址</span></span><br><span class="line">      System.out.println(socketAddress.getPort()); <span class="comment">//端口</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-TCP/TestSocket.JPG"></p><h1 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h1><p><strong>网络通信协议</strong>：速率、传输码率、代码结构、传输控制……</p><table><thead><tr><th align="center">TCP用户传输协议</th><th align="center">UDP用户数据报协议</th></tr></thead><tbody><tr><td align="center">连接，稳定</td><td align="center">不连接，不稳定</td></tr><tr><td align="center">客户端、服务端</td><td align="center">没有明确的界限</td></tr><tr><td align="center">三次握手，四次挥手</td><td align="center">不管是否准备好，都可以发</td></tr><tr><td align="center">传输完成，释放连接，效率低</td><td align="center">DDOS攻击、饱和攻击</td></tr></tbody></table><h1 id="TCP实现聊天"><a href="#TCP实现聊天" class="headerlink" title="TCP实现聊天"></a>TCP实现聊天</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServerDemo1</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> (ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">           Socket socket = serverSocket.accept();</span><br><span class="line">           InputStream is = socket.getInputStream();</span><br><span class="line">           ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream()</span><br><span class="line">      ) &#123;</span><br><span class="line">         <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">         <span class="keyword">int</span> len;</span><br><span class="line">         <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(baos);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClientDemo1</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Socket socket = <span class="keyword">null</span>;</span><br><span class="line">      OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         InetAddress serverIP = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">         socket = <span class="keyword">new</span> Socket(serverIP, <span class="number">9999</span>);</span><br><span class="line">         os = socket.getOutputStream();</span><br><span class="line">         os.write(<span class="string">&quot;nb&quot;</span>.getBytes());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (os != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端使用的是比较冗长的写法，将各种资源的<code>close()</code>方法写在<code>finally</code>块中，同时加入各自的<code>catch</code>块。服务端使用的是<a href="https://blog.csdn.net/frgod/article/details/53414813">try-with-resources语句</a>，更简洁。</p><p>如果需要服务端不断监听并收取消息，需使用循环语句改写代码。</p><p><a href="https://www.cnblogs.com/wugongzi/p/12092326.html">Java——IO流超详细总结</a></p><h1 id="TCP实现文件上传"><a href="#TCP实现文件上传" class="headerlink" title="TCP实现文件上传"></a>TCP实现文件上传</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServerDemo2</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> (ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9000</span>);</span><br><span class="line">           Socket socket = serverSocket.accept(); <span class="comment">//阻塞式监听</span></span><br><span class="line">           InputStream is = socket.getInputStream();</span><br><span class="line">           OutputStream os = socket.getOutputStream();</span><br><span class="line">           FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;receive.jpg&quot;</span>)) &#123;</span><br><span class="line">         <span class="comment">//接收文件</span></span><br><span class="line">         <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">         <span class="keyword">int</span> len;</span><br><span class="line">         <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">         &#125;</span><br><span class="line">         os.write(<span class="string">&quot;Received&quot;</span>.getBytes()); <span class="comment">//通知客户端已接收完毕</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClientDemo2</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9000</span>);</span><br><span class="line">           InputStream is = socket.getInputStream();</span><br><span class="line">           OutputStream os = socket.getOutputStream();</span><br><span class="line">           FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;hitpt.jpg&quot;</span>);</span><br><span class="line">           ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream()) &#123;</span><br><span class="line">         <span class="comment">//发送文件</span></span><br><span class="line">         <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">         <span class="keyword">int</span> len;</span><br><span class="line">         <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">         &#125;</span><br><span class="line">         socket.shutdownOutput(); <span class="comment">//表示发送完了</span></span><br><span class="line">         System.out.println(<span class="string">&quot;Sent&quot;</span>);</span><br><span class="line">         <span class="comment">//等待服务端通知接收完毕</span></span><br><span class="line">         <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(<span class="string">&quot;Server: &quot;</span> + baos);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-TCP/TCPFile.JPG"></p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java——多线程</title>
      <link href="/2021/06/24/Learn-java-thread/"/>
      <url>/2021/06/24/Learn-java-thread/</url>
      
        <content type="html"><![CDATA[<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://www.kuangstudy.com/">狂神说java官网</a></p><p><a href="https://www.bilibili.com/video/BV1V4411p7EF">B站视频链接</a></p><h1 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h1><p><strong>程序</strong>Precess是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</p><p>而<strong>进程</strong>Thread则是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位。</p><p>通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。<strong>线程是CPU调度和执行的的单位。</strong></p><p>在程序运行时，即使没有自己创建线程，<strong>后台</strong>也会有多个线程，如主线程，gc线程。</p><p><code>main()</code>称之为主线程，为系统的入口，用于执行整个程序。</p><p>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是<strong>不能人为干预</strong>的。</p><p>对同一份资源操作时，会存在<strong>资源抢夺</strong>的问题，需要加入并发控制。</p><p>线程会带来<strong>额外的开销</strong>，如cpu调度时间，并发控制开销。</p><p>每个线程在自己的<strong>工作内存</strong>交互，内存控制不当会造成数据不一致。</p><h1 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h1><h2 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p>步骤：继承Thread类；重写run()方法；调用start开启线程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;测试线程---------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// main线程，主线程</span></span><br><span class="line">        <span class="comment">// 创建一个线程对象</span></span><br><span class="line">        TestThread testThread1 = <span class="keyword">new</span> TestThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用start方法开启线程</span></span><br><span class="line">        testThread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程-----------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/TestThread.JPG"></p><p>可见两个线程交替运行。注：线程开启并不一定立即执行，由CPU调度执行。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个多线程下载图片的样例，使用了commons io库。</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestThread2</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">        webDownloader.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载文件：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread2 t1 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;https://img.lfalive.top/PT/HUDPT.jpg&quot;</span>, <span class="string">&quot;hudpt.jpg&quot;</span>);</span><br><span class="line">        TestThread2 t2 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;https://img.lfalive.top/PT/hitpt.JPG&quot;</span>, <span class="string">&quot;hitpt.jpg&quot;</span>);</span><br><span class="line">        TestThread2 t3 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;https://img.lfalive.top/PT/byrpt.JPG&quot;</span>, <span class="string">&quot;byrpt.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span> </span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/ExtendsThread.JPG"></p><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>步骤：定义MyRunnable类实现Runnable接口；实现run()方法，编写线程执行体；创建线程对象，调用start()方法启动线程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;测试线程---------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// main线程，主线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个Runnable接口的实现类对象</span></span><br><span class="line">        TestThread3 t1 = <span class="keyword">new</span> TestThread3();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象,通过线程对象来开启线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(t1).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程-----------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多线程下载图片的样例也可用该方法实现。</p><p>不建议继承Thread类，因为需要避免OOP单继承局限性；建议使用Runnable接口，可以避免单继承局限性，灵活方便，方便同一个对象被多个线程使用，即”将任务和线程完全分离“。</p><h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><p>以售卖火车票为例，多个线程操作同一个资源的情况下，线程不安全，数据紊乱。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟龟兔赛跑（并未考虑兔子的休息），多线程操作同一个资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//跑一步</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;跑了&quot;</span> + i + <span class="string">&quot;步&quot;</span>);</span><br><span class="line">            <span class="comment">//比赛是否结束</span></span><br><span class="line">            <span class="keyword">if</span> (gameOver(i)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gameOver</span><span class="params">(<span class="keyword">int</span> steps)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//已有胜者</span></span><br><span class="line">        <span class="keyword">if</span> (winner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//到终点</span></span><br><span class="line">        <span class="keyword">if</span> (steps &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">            winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;Winner is &quot;</span> + winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Race race = <span class="keyword">new</span> Race();</span><br><span class="line">        <span class="keyword">new</span> Thread(race, <span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(race, <span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/Race.JPG"></p><p>winner变量即为公共资源。</p><h3 id="实现Callable接口及线程池"><a href="#实现Callable接口及线程池" class="headerlink" title="实现Callable接口及线程池"></a>实现Callable接口及线程池</h3><p>Callable好处：可以定义返回值，可以抛出异常。线程池参考：</p><ul><li><a href="https://blog.csdn.net/suifeng3051/article/details/49443835">Java线程池 ExecutorService</a></li><li><a href="https://www.cnblogs.com/zhujiabin/p/5404771.html">Java 四种线程池</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用Callable接口实现图片多线程下载</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">        webDownloader.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载文件：&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        TestCallable t1 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://img.lfalive.top/PT/HUDPT.jpg&quot;</span>, <span class="string">&quot;hudpt.jpg&quot;</span>);</span><br><span class="line">        TestCallable t2 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://img.lfalive.top/PT/hitpt.JPG&quot;</span>, <span class="string">&quot;hitpt.jpg&quot;</span>);</span><br><span class="line">        TestCallable t3 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://img.lfalive.top/PT/byrpt.JPG&quot;</span>, <span class="string">&quot;byrpt.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行服务</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取结果</span></span><br><span class="line">        <span class="keyword">boolean</span> rs1 = r1.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs2 = r2.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs3 = r3.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(rs1);</span><br><span class="line">        System.out.println(rs2);</span><br><span class="line">        System.out.println(rs3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        ser.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span> </span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>背景：经常<strong>创建</strong>和<strong>销毁</strong>、<strong>使用</strong>量特别大的资源，比如并发情况下的线程，对性能影响很大。</p><p>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁，实现重复利用。</p><p>好处：</p><ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理：核心池的大小<code>corePoolSize</code>，最大线程数<code>maximumPoolSize</code>，线程没有任务时最多保持多长时间后会终止<code>keepAliveTime</code></li></ul><p>相关API：<code>Executors</code>和<code>ExecutorService</code>。</p><p><code>newFixedThreadPool()</code>方法创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。<code>ExecutorService</code>也可以和<code>Runnable</code>配合使用，如<code>execute(Runnable)</code>，<code>submit(Runnable)</code>，<code>submit(Callable)</code>等。</p><p><code>FutureTask</code>实现了<code>Future</code>接口，可以把<code>FutureTask</code>交给<code>Executor</code>执行；也可以通<code>ExecutorService.submit()</code>方法返回一个<code>FutureTask</code>，然后执行<code>FutureTask.get()</code>方法。通过返回的<code>Future</code>对象，我们可以检查提交的任务是否执行完毕。如果任务执行完成，<code>future.get()</code>方法会返回Callable任务的执行结果。注意，<code>future.get()</code>方法会产生阻塞。</p><p>调用<code>shutdown()</code>方法之后，<code>ExecutorService</code>不会立即关闭，但是它不再接收新的任务，直到当前所有线程执行完成才会关闭，所有在<code>shutdown()</code>执行之前提交的任务都会被执行。如果我们想立即关闭，可以调用<code>ExecutorService.shutdownNow()</code>方法。这个动作将跳过所有正在执行的任务和被提交还没有执行的任务。但是它并不对正在执行的任务做任何保证，有可能它们都会停止，也有可能执行完成。</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>真实对象和代理对象都要实现同一个接口，代理对象要代理真实角色。</p><p>好处：代理对象可以做很多真实对象做不了的事情，真实对象可以专注做自己的事情。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        You you = <span class="keyword">new</span> You(<span class="string">&quot;张三&quot;</span>);<span class="comment">//谁要结婚</span></span><br><span class="line">        <span class="keyword">new</span> WeddingCompany(you).HappyMarry();<span class="comment">//交给婚庆公司安排</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实角色：去结婚</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">You</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">&quot;结婚了，恭喜！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理角色：帮target结婚</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeddingCompany</span><span class="params">(Marry target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="keyword">this</span>.target.HappyMarry();<span class="comment">//这就是真实对象</span></span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事后，结尾款。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事前，布置会场。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/StaticProxy.JPG"></p><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。对于函数式接口，可以通过lambda表达式来创建该接口的对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简化过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I like lambda2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ILike like = <span class="keyword">new</span> Like();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> Like2();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Like3</span> <span class="keyword">implements</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda3&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> Like3();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.匿名内部类</span></span><br><span class="line">        like = <span class="keyword">new</span> ILike() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda4&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.用lambda简化</span></span><br><span class="line">        like = () -&gt; System.out.println(<span class="string">&quot;I like lambda5&quot;</span>);</span><br><span class="line">        like.lambda();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I like lambda&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/lambda.JPG"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//带参数的lambda表达式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ILove love = (a, b) -&gt; System.out.println(a + <span class="string">&quot; love &quot;</span> + b);</span><br><span class="line">        love.love(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILove</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">love</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p><img src="https://img.lfalive.top/Learn-java-thread/state.JPG"></p><h2 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">setPriority(int newPriority)</td><td align="center">更改线程的优先级</td></tr><tr><td align="center">static void sleep(long millis)</td><td align="center">在指定的毫秒数内让当前正在执行的线程休眠</td></tr><tr><td align="center">void join()</td><td align="center">等待该线程终止</td></tr><tr><td align="center">static void yield()</td><td align="center">暂停当前正在执行的线程对象，并执行其他线程</td></tr><tr><td align="center">void interpret()</td><td align="center">中断线程，别用这个方式</td></tr><tr><td align="center">boolean isAlive()</td><td align="center">测试线程是否处于活动状态</td></tr></tbody></table><h2 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h2><p>不推荐使用JDK提供的stop()，destroy()方法，已废弃。推荐让线程自己停下来。简直使用一个标志位进行终止变量，当flag=false，则终止线程运行。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;running&quot;</span> + i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line">        <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">900</span>) &#123;</span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;time to stop&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/TestStop.JPG"></p><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><p>sleep存在异常InterruptException，sleep时间达到后线程进入就绪状态，可以模拟网络延时、倒计时等。</p><p><strong>每个对象都有一个锁，sleep不会释放锁。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//倒计时器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            countDown(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程礼让yield"><a href="#线程礼让yield" class="headerlink" title="线程礼让yield"></a>线程礼让yield</h2><p> 让当前正在执行的线程暂停，但不阻塞。将线程从运行状态转为就绪状态，让CPU重新调度。<strong>礼让不一定成功，取决于CPU。</strong></p><h2 id="合并线程"><a href="#合并线程" class="headerlink" title="合并线程"></a>合并线程</h2><p><code>Join()</code>合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;vip--&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">200</span>) &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main--&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/join1.JPG"></p><p><img src="https://img.lfalive.top/Learn-java-thread/join2.JPG" alt="join2"></p><h2 id="线程状态观测"><a href="#线程状态观测" class="headerlink" title="线程状态观测"></a>线程状态观测</h2><p><img src="https://img.lfalive.top/Learn-java-thread/stateDetail.JPG"></p><p>线程状态处于以下几个状态之一：<strong>NEW、RUNNABLE、BLOCKED、WATTING、TIMED_WAITTING、TERMINATED</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/TestState.JPG"></p><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>线程的优先级用数字表示，通过<code>getPriority()</code>获取优先级，通过<code>setPriority(int)</code>改变优先级。默认最大优先级<code>MAX_PRIORITY</code>为10，最小<code>MIN_PRIORITY</code>为1，可修改。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">        MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line"></span><br><span class="line">        t1.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.setPriority(<span class="number">4</span>);</span><br><span class="line">        t3.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/Priority.JPG"></p><p>优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，<strong>都是看CPU的调度</strong>。</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>线程分为<strong>守护线程</strong>和<strong>用户线程</strong>。虚拟机必须确保用户线程执行完毕，但不必等待守护线程执行完毕。守护线程，和后台记录操作日志、监控内存、垃圾回收等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread.setDaemon(<span class="keyword">true</span>); <span class="comment">//默认是false，表示用户线程，正常线程都是用户线程。</span></span><br></pre></td></tr></table></figure><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>并发：<strong>同一个对象</strong>被<strong>多个线程</strong>同时操作。</p><p>线程同步其实就是一种等待机制，多个线程进入<strong>这个对象的等待池</strong>形成队列。</p><p>==&gt;加入<strong>锁机制synchronized</strong>，一个线程获得对象的排它锁，独占资源，其他线程必须等待其使用完后释放锁。锁机制会引起一定程度的性能问题，以换取安全性。例如，如果一个优先级高的线程等一个优先级低的线程释放锁，会导致优先级倒置。</p><h2 id="不安全的例子"><a href="#不安全的例子" class="headerlink" title="不安全的例子"></a>不安全的例子</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程不安全的例子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; list.add(Thread.currentThread().getName())).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后集合大小小于10000，因为同时可能会有多个线程操作一个对象。</p><h2 id="同步方法和同步块"><a href="#同步方法和同步块" class="headerlink" title="同步方法和同步块"></a>同步方法和同步块</h2><p><code>synchronized</code>关键字有两种用法，<code>synchronized</code>方法和<code>synchronized</code>块。</p><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> args)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>每个对象都有一把锁，<code>synchronized</code>方法都必须获得调用该方法的对象的锁才能运行，线程一旦执行，就独占该锁，直到方法返回释放。缺点：将一个大的方法声明为<code>synchronized</code>会影响效率，锁得太多，浪费资源。</p><h3 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (Obj) &#123;&#125;</span><br></pre></td></tr></table></figure><p>Obj称之为同步监视器，Obj可以是任何对象，推荐使用共享资源作为同步监视器。同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这对象本身。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">                    list.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不安全的例子，加上同步块后就安全了。</p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p><code>CopyOnWriteArrayList</code>，写数组的拷贝，支持高效率并发且是线程安全的，读操作无锁。所有可变操作都是通过对底层数组进行一次复制来实现。底层实现添加的原理是先copy出一个容器（可以简称副本），再在副本里进行修改，最后把副本的引用地址赋值给之前旧容器的地址。在修改数据期间，其他线程如果读取数据，是读取到旧容器里的数据。</p><p>参考：<a href="https://blog.csdn.net/weixin_42146366/article/details/88016527">高并发编程之CopyOnWriteArrayList介绍</a></p><p><code>CopyOnWriteArrayList</code>也是属于<code>java.util.concurrent</code>工具包的，<a href="https://blog.csdn.net/yuhaibao324/article/details/93149186">Java的concurrent用法详解</a>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUC</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">new</span> Thread(() -&gt; list.add((Thread.currentThread().getName()))).start();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(list.size());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>多个线程互相抱着对方需要的资源，形成僵持。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两个人化妆，需要镜子和口红，都是抱着对方需要的资源，形成死锁。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">new</span> Makeup(<span class="number">0</span>, <span class="string">&quot;Nina&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> Makeup(<span class="number">1</span>, <span class="string">&quot;Amelie&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line">   <span class="keyword">int</span> choice;</span><br><span class="line">   String grilName;</span><br><span class="line"></span><br><span class="line">   Makeup(<span class="keyword">int</span> choice, String grilName) &#123;</span><br><span class="line">      <span class="keyword">this</span>.choice = choice;</span><br><span class="line">      <span class="keyword">this</span>.grilName = grilName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         makeup();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.grilName + <span class="string">&quot; gets lipstick&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">this</span>.grilName + <span class="string">&quot; gets mirror&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.grilName + <span class="string">&quot; gets mirror&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">this</span>.grilName + <span class="string">&quot; gets lipstick&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生死锁的四个必要条件：</p><ul><li><strong>互斥条件</strong>：一个资源每次只能被一个进程使用。</li><li><strong>请求与保持条件</strong>：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li><strong>不剥夺条件</strong>：进程已获得的资源，在未使用完之前，不能强行剥夺。</li><li><strong>循环等待条件</strong>：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul><p>想办法打破其中的一个或多个条件就可以避免。</p><h2 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock(锁)"></a>Lock(锁)</h2><p>通过显式定义同步锁对象（Lock对象）来实现同步。<code>java.util.concurrent.locks.Lock</code>接口可以控制多个线程对共享资源进行访问。<code>ReentrantLock </code>是可重入锁，实现了显式加锁、释放锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//保证线程安全的代码</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">        <span class="comment">//如果同步代码有异常，要将unlock()写入finally块。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比：<code>Lock</code>是显式，<code>synchronized</code>是隐式。<code>Lock</code>只有代码块锁，<code>synchronized</code>有代码块锁和方法锁。使用<code>Lock</code>锁，JVM将话费较少时间调度线程，性能更好，且具有更好的扩展性。一般优先使用<strong>Lock&gt;同步代码块&gt;同步方法</strong>。</p><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><p>java提供了几个方法解决线程之间的通信问题。均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常<code>IllegalMonitorStateException</code>。</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>wait()</td><td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td></tr><tr><td>wait(long timeout)</td><td>指定等待的毫秒数</td></tr><tr><td>notify()</td><td>唤醒一个处于等待状态的线程</td></tr><tr><td>notifyAll()</td><td>唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td></tr></tbody></table><p>在<a href="https://blog.csdn.net/liushall/article/details/81569609">生产者消费者</a>问题中，仅有<code>synchronized</code>是不够的，<code>synchronized</code>可阻止并发更新同一个共享资源，但不能用来实现不同线程之间的消息传递。</p><h2 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h2><p>生产者将生产号的数据放入缓冲区，消费者从缓冲区拿出数据。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//管程法——生产者，消费者，产品，缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line">      <span class="keyword">new</span> Producer(container).start();</span><br><span class="line">      <span class="keyword">new</span> Consumer(container).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   SynContainer container;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(SynContainer container)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.container = container;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">         container.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   SynContainer container;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SynContainer container)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.container = container;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">         container.pop();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span> </span>&#123;</span><br><span class="line">   Chicken[] chickens = <span class="keyword">new</span> Chicken[<span class="number">10</span>]; <span class="comment">//容器</span></span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//容器计数器</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (count == chickens.length) &#123; <span class="comment">//等待消费者消费</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//生产并通知消费者消费</span></span><br><span class="line">      chickens[count++] = chicken;</span><br><span class="line">      System.out.println(<span class="string">&quot;produced id = &quot;</span> + chicken.id + <span class="string">&quot;, container &quot;</span> + count);</span><br><span class="line">      <span class="keyword">this</span>.notifyAll();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (count == <span class="number">0</span>) &#123; <span class="comment">//等待生产者生产</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//消费并通知生产者继续生产</span></span><br><span class="line">      System.out.println(<span class="string">&quot;consumed id = &quot;</span> + chickens[--count].id + <span class="string">&quot;, container &quot;</span> + count);</span><br><span class="line">      <span class="keyword">this</span>.notifyAll();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/TestPc.JPG"></p><h2 id="信号灯法"><a href="#信号灯法" class="headerlink" title="信号灯法"></a>信号灯法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//信号灯法，标志位解决</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPc2</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">      <span class="keyword">new</span> Actor(tv).start();</span><br><span class="line">      <span class="keyword">new</span> Watcher(tv).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   TV tv;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Actor</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.tv = tv;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tv.act(<span class="string">&quot;dance&quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.tv.act(<span class="string">&quot;sing&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   TV tv;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.tv = tv;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">this</span>.tv.watch();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">   String show;</span><br><span class="line">   <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;<span class="comment">//演员表演 T; 观众观看 F</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(String show)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!flag) &#123; <span class="comment">//等观众看完</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Act &quot;</span> + show);</span><br><span class="line">      <span class="keyword">this</span>.notifyAll();</span><br><span class="line">      <span class="keyword">this</span>.show = show; <span class="comment">//新节目</span></span><br><span class="line">      <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag; <span class="comment">//修改标志位</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Watch &quot;</span> + show);</span><br><span class="line">      <span class="keyword">this</span>.notifyAll();</span><br><span class="line">      <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/TestPc2.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接触PT的一些经历</title>
      <link href="/2021/06/17/PT/"/>
      <url>/2021/06/17/PT/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是PT"><a href="#什么是PT" class="headerlink" title="什么是PT"></a>什么是PT</h2><p>Private Tracker。</p><blockquote><ol><li>PT 本质上还是<strong>基于 BitTorrent 协议的一种 P2P 下载</strong>，这点跟 BT 是一样</li><li>PT 是通过一个私有的Tracker服务器认证，在小范围内进行通信以及下载</li><li>在 Private Tracker 服务器上对用户的下载量、上传量以及下载上传时间进行<strong>数据统计</strong></li></ol></blockquote><p>更多关于PT的详细介绍，可以阅读<a href="https://www.jianshu.com/p/3daf90e9d241">Private Tracker（PT）新手使用小记</a>和<a href="https://post.smzdm.com/p/a3gvvddr/">PT基本概念+生存指南</a>。</p><h2 id="蝴蝶时期：0下载"><a href="#蝴蝶时期：0下载" class="headerlink" title="蝴蝶时期：0下载"></a>蝴蝶时期：0下载</h2><img src="https://img.lfalive.top/PT/HUDPT.jpg" style="zoom:67%;" /><p>PT的关键词就是Private，所以我进了蝴蝶，毕竟高校PT站至少应该都是对自己本校学生开放的吧……</p><p>用户太少，资源太少，导致很快我就对蝴蝶失去了兴趣。</p><h2 id="百川时期：不会做种"><a href="#百川时期：不会做种" class="headerlink" title="百川时期：不会做种"></a>百川时期：不会做种</h2><p>疫情期间，在家的时候需要下载一些学习资料，几经周折又摸到了PT。但是大部分高校PT都是教育网IPV6独享，在家无法访问。最后找到了哈工大的百川，可以非教育网访问。</p><p>这个阶段，我对PT还没有概念，将PT当作传统的资源站，只管下载。尽管发现我的上传量偶尔会增加，但是也不明白其中的用户规则。至今我的百川分享率还小于1。</p><p><img src="https://img.lfalive.top/PT/hitpt.JPG"></p><h2 id="北邮人时期：学会做种"><a href="#北邮人时期：学会做种" class="headerlink" title="北邮人时期：学会做种"></a>北邮人时期：学会做种</h2><p>时隔八个月回到学校后，就可以访问教育网only的PT站了。这个阶段我上了北邮人，还是使用μtorrent客户端。</p><p><img src="https://img.lfalive.top/PT/byrpt.JPG"></p><p>接触到种子促销、做种等概念后，我有事无事就会挂着客户端，也会去蹲一些热门的种子，尽早下载并开始做种。</p><h2 id="北洋园时期：进阶技巧"><a href="#北洋园时期：进阶技巧" class="headerlink" title="北洋园时期：进阶技巧"></a>北洋园时期：进阶技巧</h2><p>临近毕业，我开始意识到，失去校园网，就失去了北邮人的访问权限，于是开始寻找非教育网可以访问的PT站点，这才注册了北洋园。</p><p><img src="https://img.lfalive.top/PT/TJUPT.JPG"></p><p>和北邮人相比，北洋园有官方组，更新的剧集资源更多，并且分天大校外IPv4/IPv6/天大校内IPv4不同通道。另一方面，北洋园正在推行H&amp;R规则，为了之后站点从分享率（Ratio）考核模式转变为无视分享率（RatioLess）模式。总而言之，两个站点有很多不同之处。</p><p>这个时候，我常常下载两个站点共有的一些资源，同时在两个站点做种。你可以<strong>点击下图</strong>进入北洋园。</p><center><a href="https://www.tjupt.org/promotionlink.php?key=287fa0ea36bd65ca9c50d5b1599d2268"><img src="https://tjupt.org/mybar.php?userid=115139.png" alt="北洋园PT" title="北洋园PT"></a></center><h3 id="双栈做种"><a href="#双栈做种" class="headerlink" title="双栈做种"></a>双栈做种</h3><p>默认打开客户端，只会上报IPV6地址，仅能和IPV6用户交流。实现双栈做种后，即可和校外IPV4用户交流。设置双栈做种时，先在本机网络适配器中关闭IPV6协议，然后ping一下tracker服务器，得到一个IPV4地址，将这个IPV4地址和tracker服务器域名写进系统的hosts文件，再开启IPV6协议即可。</p><img src="https://img.lfalive.top/PT/double.JPG" style="zoom:80%;" /><h3 id="RSS订阅"><a href="#RSS订阅" class="headerlink" title="RSS订阅"></a>RSS订阅</h3><p>刚使用TJUPT的时候，总是抢不到热门免费资源，做种机会不多。这时我了解到RSS技术，提供一种实时、高效、安全、低成本的信息发布渠道。可以参考<a href="http://www.ptyqm.com/1235.html">从此“不再”登陆PT站！RSS订阅+qbittorrent自动下载使用教程</a>。</p><p>目前我接触的PT站点都是支持RSS订阅的，在网站中可以很方便地按照特定规则筛选得到RSS链接。</p><img src="https://img.lfalive.top/PT/RSS_get.JPG" style="zoom:67%;" /><p>同时我将客户端换为qbittorrent 4.3.5，更好看，功能更丰富。当然，μtorrent也是支持RSS订阅的。开启自动更新和自动下载，就差不多大功告成。</p><img src="https://img.lfalive.top/PT/RSS_Setting.JPG" style="zoom:80%;" /><p>最后配置一下下载目录等规则，即可自动化下载储存连载剧集，十分方便。</p><img src="https://img.lfalive.top/PT/RSS.JPG" style="zoom:67%;" /><h2 id="下一个阶段？"><a href="#下一个阶段？" class="headerlink" title="下一个阶段？"></a>下一个阶段？</h2><p>我试图继续探索更多的高效PT，例如南洋、葡萄、蒲公英，无奈处处碰壁。</p><img src="https://img.lfalive.top/PT/nanyang.JPG" style="zoom:80%;" /><img src="https://img.lfalive.top/PT/putao.JPG" style="zoom:80%;" /><p><img src="https://img.lfalive.top/PT/%E8%92%B2%E5%85%AC%E8%8B%B1.JPG"></p><p>如果还有下一个阶段，应该是要跳出高校PT，进入其他PT站，并且拥有更高的网络带宽和更大的硬盘容量吧。</p>]]></content>
      
      
      <categories>
          
          <category> PT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java——基础</title>
      <link href="/2021/03/30/Learn-java-base/"/>
      <url>/2021/03/30/Learn-java-base/</url>
      
        <content type="html"><![CDATA[<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://www.kuangstudy.com/">狂神说java官网</a></p><p><a href="https://www.bilibili.com/video/BV12J41137hu">B站视频链接</a></p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@Description</span> 文档注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><img src="https://img.lfalive.top/Learn-java-base/keyword.JPG" style="zoom:60%;" /><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>以字母、美元符、下划线开头。大小写敏感。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">1字节</td><td align="center"></td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center"></td></tr><tr><td align="center">int</td><td align="center">4字节</td><td align="center"></td></tr><tr><td align="center">long</td><td align="center">8字节</td><td align="center">以L结尾</td></tr><tr><td align="center">float</td><td align="center">4字节</td><td align="center">以F结尾</td></tr><tr><td align="center">double</td><td align="center">8字节</td><td align="center"></td></tr><tr><td align="center">char</td><td align="center">2字节</td><td align="center">用单引号修饰</td></tr><tr><td align="center">boolean</td><td align="center">1位</td><td align="center">true or false</td></tr></tbody></table><h3 id="整数扩展"><a href="#整数扩展" class="headerlink" title="整数扩展"></a>整数扩展</h3><p>二进制0b，八进制0，十六进制0x。</p><h3 id="浮点数扩展"><a href="#浮点数扩展" class="headerlink" title="浮点数扩展"></a>浮点数扩展</h3><p><strong>最好完全避免使用浮点数进行比较。</strong></p><h3 id="字符扩展"><a href="#字符扩展" class="headerlink" title="字符扩展"></a>字符扩展</h3><p>所有字符的本质还是数字。</p><p>Unicode前缀’\u’。</p><p>对象，从内存分析。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>从低到高，byte, short, char -&gt; int -&gt; long -&gt; float -&gt; double。不同数据类型运算，先转换为同一种。</p><p>强制类型转换：(类型)变量名。自动类型转换，低到高。</p><p>注意：不能对boolean进行转换，不能把对象类型转换为不相干的类型，把高容量转换到低容量的时候是强制转换，转换的时候可能出现精度问题或者内存溢出。</p><p>如果你在Java源码中要处理大数字，你可以在数字中加入下划线来<strong>提高可读性</strong>。使用的时候要注意：在字面常量数字里加下划线是有一定规则的，下划线只能在数字之间，在数字的开始或结束一定不能使用下划线。比如把长整型数字比如10000000000写成一个更具可读性10_000_000_000。</p><h2 id="变量、常量、作用域"><a href="#变量、常量、作用域" class="headerlink" title="变量、常量、作用域"></a>变量、常量、作用域</h2><p>Java是强类型语言，每个变量都必须声明类型。</p><p>声明变量：  <code>数据类型 变量名 = 值;</code></p><p>按作用域分：类变量、实例变量、局部变量。</p><img src="https://img.lfalive.top/Learn-java-base/var.JPG" style="zoom:70%;" /><p>实例变量从属于对象，如果不自行初始化，就是默认值：<strong>0、0.0、false</strong>。除了基本类型，其余都是null。</p><p>类变量关键字<code>static</code>。</p><p>常量可以理解为一种特殊变量。声明：<code>final 常量名 = 值;</code></p><p>常量名一般用大写字符。</p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>类成员变量、局部变量、方法名：首字母小写和驼峰原则，即除了第一个单词外，后面的单词首字母大写，如lastName、reRun()。</p><p>常量：大写字母和下划线，如MAX_VALUE。</p><p>类名：首字母大写和驼峰原则，如GoodMan。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符包括算数运算符、赋值运算符、关系运算符、逻辑运算符、位运算符、条件运算符、扩展赋值运算符。</p><p>注意除法运算中的变量类型问题。</p><p>不存在幂运算符<code>^</code>，幂运算可以使用Math工具类，<code>Math.pow()</code>。<code>^</code>表示异或运算。可以用左移位运算实现乘方。</p><p>有三目运算符 <code>? :</code></p><h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><p>package语句放最前面，import语句在其之后。一般使用公司域名倒置作为包名。</p><h2 id="JavaDoc生成文档"><a href="#JavaDoc生成文档" class="headerlink" title="JavaDoc生成文档"></a>JavaDoc生成文档</h2><p>JavaDoc可以写在类上面和方法上面。</p><p>执行命令<em><strong>javadoc xxx.java</strong></em>即可，也可以使用IDEA的JavaDoc生成功能，在菜单 Tools-&gt;Generate JavaDoc项里面。</p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">if</span> (scanner.hasNextLine())&#123;</span><br><span class="line">    String str = scanner.nextLine();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 凡是属于IO流的类，如果不关闭，会一直占用资源，尽量用完就关掉。</span></span><br><span class="line">scanner.close();</span><br></pre></td></tr></table></figure><p><code>next()</code>：读取到有效字符后才可以结束输入，将有效字符后面的空白作为分隔符或者结束符，不能得到带有空格的字符串。</p><p><code>nextLine()</code>：读取输入回车之前的所有字符，可以获得空白。</p><p>还有各种类型的<code>nextxxxx()</code>和<code>hasNextxxxx()</code>方法。</p><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if选择结构</span></span><br><span class="line"><span class="keyword">if</span> (condition1)&#123;</span><br><span class="line">    statement1;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2)&#123;</span><br><span class="line">    statement2;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    statement3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch选择结构，匹配一个具体的值</span></span><br><span class="line"><span class="comment">// case穿透，记得加break</span></span><br><span class="line"><span class="keyword">switch</span> (n)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;wtf&quot;</span>:</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;omg&quot;</span>:</span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IDEA可以反编译class文件，如下图。</p><p><img src="https://img.lfalive.top/Learn-java-base/decompiled.JPG"></p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// while循环</span></span><br><span class="line"><span class="keyword">while</span> (condition)&#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// do……while循环</span></span><br><span class="line"><span class="comment">// 保证statement至少执行一次</span></span><br><span class="line"><span class="comment">// while是先判断后执行，dowhile是先执行后判断</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125; <span class="keyword">while</span> ();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for循环</span></span><br><span class="line"><span class="keyword">for</span> (初始值; bool表达式; 迭代)&#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增强for循环</span></span><br><span class="line"><span class="keyword">int</span>[] num = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x : num) &#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>break</code>用于强行跳出循环，不再执行剩余语句。</p><p><code>continue</code>用于终止某次循环过程，接着进行下一次循环是否执行的判定。</p><p><code>goto</code>仍是java的一个保留字，但并未在语言中得到正式使用，在带标签的break和continue中有它的影子。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span> outer; <span class="comment">// continue外层循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="何为方法"><a href="#何为方法" class="headerlink" title="何为方法"></a>何为方法</h2><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中创建，在其他地方被引用</li><li>最好保持方法的原子性，即一个方法只完成一个功能，便于后期扩展</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    方法体</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法：<code>对象名.方法名(实参列表)</code></p><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>在一个类中，有相同的函数名称，但形参不同的函数。</p><p>规则：    </p><ul><li>方法名称必须相同</li><li>参数列表必须不同（个数、类型、参数排列顺序不同）</li><li>返回类型可同也可不同</li><li>仅仅返回类型不同，不足以构成重载</li></ul><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">        System.out.println(arg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行<code>java HelloWorld.java this is</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">this</span><br><span class="line">is</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>在方法声明中，在指定类型后加一个三个点<code>...</code>。一个方法只能有一个可变参数，必须是方法的最后一个参数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>... x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : x) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明并创建一个数组</span></span><br><span class="line">dataType[] arrayRefVa = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure><ul><li>通过索引访问，索引从0开始。</li><li>长度固定，一旦创建，不可改变。</li><li>可以是任何类型，但不允许混合类型。</li><li>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。</li><li>数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong>。</li></ul><h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><p><strong>Java内存：</strong></p><ul><li>堆：存放new的对象和数组，可以被所有的线程共享，不会存放别的对象引用。</li><li>栈：存放基本变量类型（会包含具体数值），引用对象的变量（会存放这个引用在堆里面的具体地址）。</li><li>方法区：可以被所有线程共享，包含了所有的class和static变量。</li></ul><p><img src="https://img.lfalive.top/Learn-java-base/new_list.JPG"></p><h2 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h2><img src="https://img.lfalive.top/Learn-java-base/initialize.JPG" style="zoom: 80%;" /><p><strong>默认初始化：</strong>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</p><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>即数组的数组。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>数组工具类java.util.Arrays中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用。而不用（不是不能）使用对象来调用。看文档了解常用的<code>fill</code>、<code>toString</code>、<code>sort</code>等方法。</p><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>当一个数组中大部分为同一值时，可以使用稀疏数组来保存该数组。把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模。</p><img src="https://img.lfalive.top/Learn-java-base/SparseArray.JPG" style="zoom:70%;" /><p>上图中第一行row表示原矩阵行数，col表示原矩阵列数，value=8表示共有8个有效值，稀疏数组长度为8+1=9。</p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>对于描述复杂事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</p><p>面向对象编程<strong>（OOP）</strong>本质是<strong>以类的方式组织代码，以对象的形式封装数据。</strong></p><p><strong>三大特性：封装，继承，多态。</strong></p><h2 id="静态方法和非静态方法"><a href="#静态方法和非静态方法" class="headerlink" title="静态方法和非静态方法"></a>静态方法和非静态方法</h2><p><code>static</code>静态方法，和类一起加载的。非静态方法需要类实例化之后才存在，才能使用。</p><h2 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用传递：对象，本质还是值传递。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person myself = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(myself.name);</span><br><span class="line">        changeName(myself);</span><br><span class="line">        System.out.println(myself.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeName</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        person.name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">// 对象的属性</span></span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">null</span><br><span class="line">Jack</span><br></pre></td></tr></table></figure><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>类是对某一类事物整体的描述/定义，但是并不能代表某一个具体的事物。</p><p>对象是抽象概念的具体实例。 </p><p>创建的时候，使用<code>new</code>关键字，会分配内存空间，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</p><p>一个项目应该只有一个main方法。</p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>类中的构造器又称构造方法，必须和类的名字同名，必须没有返回类型，也不能写<code>void</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">&quot; is studying.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line">Person myself = <span class="keyword">new</span> Person(<span class="string">&quot;lfalive&quot;</span>);</span><br><span class="line">System.out.println(myself.name);</span><br><span class="line">myself.study();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">lfalive</span><br><span class="line">lfalive is studying.</span><br></pre></td></tr></table></figure><p>定义有参构造之后，如果想使用无参构造，显式地定义一个无参的构造。</p><h2 id="内存分析-1"><a href="#内存分析-1" class="headerlink" title="内存分析"></a>内存分析</h2><p><img src="https://img.lfalive.top/Learn-java-base/OOP_memory.JPG"></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><strong>高内聚，低耦合</strong>：内部数据操作细节自己完成，仅暴露少量的方法给外部使用。</p><p><strong>封装（数据的隐藏）</strong>：通常应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问、</p><p>属性私有：<code>private</code>关键字。通常提供一些可以操作这个属性的方法，例如<code>public</code>的get、set方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line">Person myself = <span class="keyword">new</span> Person();</span><br><span class="line">myself.setName(<span class="string">&quot;lfalive&quot;</span>);</span><br><span class="line">System.out.println(myself.getName());</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">lfalive</span><br></pre></td></tr></table></figure><p><strong>总结：属性私有，get/set。</strong></p><p>属性级别：<code>public</code>、<code>protected</code>、<code>default</code>、<code>private</code>。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是类和类之间的一种关系。子类继承父类（包括父类的所有方法），使用关键字<code>extend</code>来表示。</p><p>在Java中，所有类都默认直接或者间接继承Object。</p><p>Java中只有单继承，没有多继承。 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="comment">// 继承了上例中的Person类，可以使用getName和setName方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>super</code>调用父类的属性和方法。私有的东西无法被继承，即<code>super</code>不能调用父类的<code>private</code>方法。</p><p>new一个子类对象时，会先执行<code>super()</code>，调用父类的无参构造。即<code>super()</code>方法是调用父类的构造器，必须要在子类构造器的第一行。默认调用的是父类的无参构造，如果父类没有无参构造，就会报错。<code>super</code>和<code>this</code>不能同时调用构造方法。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>重写都是方法的重写，和属性无关。</p><p>父类的引用可以指向子类。例如<code>Person you = new Student();</code>。</p><p><strong>静态方法是类的方法，非静态方法是对象的方法。</strong>对于上例而言，因为<code>you</code>是<code>Student</code>new出来的对象，因此在有<code>static</code>时，<code>you</code>调用了<code>Person</code>类的方法，没有<code>static</code>时，<code>you</code>调用的是对象的方法，即<code>Student</code>的方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student you = <span class="keyword">new</span> Student();</span><br><span class="line">        you.test();</span><br><span class="line">        Person myself = <span class="keyword">new</span> Student();</span><br><span class="line">        myself.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;person test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 子类重写了父类的方法，和非静态方法有关，private方法不能重写。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;student test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写注意事项</p><ol><li>重写的方法可以使用 <strong>@Override</strong> 注解来标识。</li><li><strong>构造方法</strong>不能被重写。</li><li>声明为 <strong>final</strong> 的方法不能被重写。</li><li>子类和父类在同一个包中时，子类可以重写父类除了声明为 <strong>private</strong> 和 <strong>final</strong> 方法的其他方法。</li><li>子类和父类不在同一个包中时，子类只能重写父类的声明为 <strong>public</strong> 和 <strong>protected</strong> 的非 <strong>final</strong> 方法。</li><li>如果不能继承一个方法，则不能重写这个方法。重写是在继承的基础上，如果方法无法被继承那么就无法重写</li><li>方法名、参数列表必须相同</li><li>修饰符：范围可以扩大，不能缩小：public&gt;protected&gt;default&gt;private</li><li>抛出的异常：范围可以被缩小，不能被扩大：ClassNotFound –&gt; Exception</li></ol><p>为什么需要重写：父类的功能，子类不一定需要，或者不一定满足。</p><h3 id="instanceof和类型转换"><a href="#instanceof和类型转换" class="headerlink" title="instanceof和类型转换"></a>instanceof和类型转换</h3><p>对象能执行哪些方法，主要看对象左边的类型，和右边关系不大。</p><p>子类能调用的方法，都是自己的或者继承父类的。父类不能调用子类独有的方法。</p><p>多态注意事项</p><ul><li>多态是方法的多态，属性没有多态</li><li>父类和子类有联系，类型转换异常为ClassCastException</li><li>存在条件：继承关系，方法需要重写（but有些方法不能被重写，见上文），父类引用指向子类对象<code>Father f1 = new Son();</code></li></ul><p><code>instanceof</code>判断一个对象是否是特定类的一个实例。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Object &gt; String</span></span><br><span class="line">        <span class="comment">// Object &gt; Person &gt; Teacher</span></span><br><span class="line">        <span class="comment">// Object &gt; Person &gt; Student</span></span><br><span class="line">        Object s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(s1 <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(s1 <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(s1 <span class="keyword">instanceof</span> Object);</span><br><span class="line">        System.out.println(s1 <span class="keyword">instanceof</span> Teacher);</span><br><span class="line">        System.out.println(s1 <span class="keyword">instanceof</span> String);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(s2 <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(s2 <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(s2 <span class="keyword">instanceof</span> Object);</span><br><span class="line">        System.out.println(s2 <span class="keyword">instanceof</span> Teacher);</span><br><span class="line">        <span class="comment">// System.out.println(s2 instanceof String); // 编译报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(s3 <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(s3 <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(s3 <span class="keyword">instanceof</span> Object);</span><br><span class="line">        <span class="comment">// System.out.println(s3 instanceof Teacher); // 编译报错</span></span><br><span class="line">        <span class="comment">// System.out.println(s3 instanceof String); // 编译报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">=================================</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">=================================</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>System.out.println(X instanceof Y);</code>能不能编译通过，就看X和Y之间有没有父子关系。</p><p>类型之间的转换：父对象可以使用括号强制转换为子对象。子类转换为父类不用强制转换，但可能丢失一些自己本来的方法。可以方便方法的调用，减少重复的代码！</p><h2 id="static关键字详解"><a href="#static关键字详解" class="headerlink" title="static关键字详解"></a>static关键字详解</h2><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">静态代码块</span><br><span class="line">Person无参构造</span><br><span class="line">匿名代码块</span><br><span class="line">Student无参构造</span><br><span class="line">==================</span><br><span class="line">Person无参构造</span><br><span class="line">匿名代码块</span><br><span class="line">Student无参构造</span><br></pre></td></tr></table></figure><p>可见，执行顺序是静态代码块、父类构造方法、匿名代码块，子类构造方法。且静态代码块只最初执行一次。</p><h3 id="静态导入包"><a href="#静态导入包" class="headerlink" title="静态导入包"></a>静态导入包</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(random());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，使用random方法时，就不用写<code>Math.random()</code>，而是可以直接写<code>random()</code>。</p><p>被final修饰的类不能再有子类。</p><h2 id="abstract抽象类"><a href="#abstract抽象类" class="headerlink" title="abstract抽象类"></a>abstract抽象类</h2><p>抽象方法：只有方法名字，没有方法的实现。</p><p>抽象类的所有方法，继承了它的子类，都必须要实现它的方法，除非子类也是抽象类。</p><p>特点：不能new这个抽象类，只能靠子类去实现，它是一种约束！一旦类里面有抽象方法，则类必须是抽象类。抽象类里面可以写普通方法。</p><p>存在的意义：抽象出来，提高开发效率，提高可扩展性。</p><h2 id="interface接口"><a href="#interface接口" class="headerlink" title="interface接口"></a>interface接口</h2><p>普通类只有具体实现，抽象类有具体实现和规范（抽象方法），接口则只有规范，自己无法写方法。</p><p><strong>接口的本质是契约。</strong>接口中的所有定义其实都是抽象的<code>public abstract</code>。所有变量其实都是<code>public static final</code>。</p><p>类可以实现接口，关键字<code>implements</code>。类实现了接口，就<strong>必须</strong>重写接口中的方法。</p><p>作用：约束；定义一些方法让不同的人实现。</p><p>接口不能被实例化，接口中没有构造方法。</p><p><code>extends</code>只有单继承，但是可以<code>implements</code>可以多继承。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TimeService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserServiceImpl.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>, <span class="title">TimeService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ol><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">11</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner1</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inner&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法内部类（局部内部类）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner2</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个java文件中可以有多个class，但是只能有一个public class。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试成员内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        Outer.Inner1 inner = outer.<span class="function">new <span class="title">Inner1</span><span class="params">()</span></span>;</span><br><span class="line">        inner.in();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>软件程序在运行过程中，经常遇到各种异常或意外。这些Exception，让我们写的程序做出合理的处理，而不至于程序崩溃。</p><ul><li>检查性异常：最具代表性的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时。这些异常在编译时不能被简单忽略。</li><li>运行时异常：可能被程序员避免的异常。这些异常在编译时可以被忽略。</li><li>错误ERROR：错误不是异常，而是脱离程序员控制的问题。例如栈溢出。</li></ul><p>Java把异常当作对象来处理，定义基类java.lang.Throwable作为所有异常的超类。分为两大类：<strong>错误Error</strong>和<strong>异常Exception</strong>。出现前者时，JVM一般终止线程；后者则是通常情况下可以被程序处理，并且在程序中应该尽可能的去处理。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>五个关键字<code>try</code>、<code>catch</code>、<code>finally</code>、<code>throw</code>、<code>throws</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;<span class="comment">//监控区域</span></span><br><span class="line">        System.out.println(a / b);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;<span class="comment">//捕获异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;捕获&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;<span class="comment">//处理善后工作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;finally.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>catch</code>里面的参数是想要捕获的异常类型，<code>catch</code>可以写多个，层层递进，范围最大的在最后。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Demo01().test(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设这个方法中处理不了这个异常，方法上抛出异常。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(); <span class="comment">//主动抛出异常，一般在方法中使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>用户自定义异常类，只需继承Exception类即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常的打印信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span> + detail + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为&quot;</span> + a);</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># when test(11)</span></span><br><span class="line">传递的参数为11</span><br><span class="line">MyException&#123;11&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># when test(9)</span></span><br><span class="line">传递的参数为9</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><strong>经验总结：</strong></p><ul><li>采用逻辑去合理规避同时辅助try-catch处理。</li><li>多重catch后面，加一个catch(Exception)来处理可能被遗漏的异常。</li><li>不确定的代码，也可以加上try-catch来处理潜在异常。</li><li>尽量去处理异常，切忌只是简单的printStackTrace去打印输出。</li><li>具体如何处理，根据业务需求去决定。</li><li>尽量添加finally语句块去释放占用的资源。</li></ul><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>IDEA快捷操作</p><ul><li>输入一个数字，再输入<code>.</code>，即可快捷生成for循环语句。输入<code>fori</code>也可以。</li><li>Ctrl+D可以将当前行复制到下一行。</li><li>类中，Alt+Insert快捷生成构造器，以及Getter和Setter，以及重写方法。或者鼠标右键，选择Generate。</li><li>选中多行代码后，Ctrl+/为快捷注释，Tab为整体缩进右移，Tab+Shift为整体缩进左移。</li><li>光标移动到某个类，Ctrl+H快捷键查看其继承关系。或点击侧边栏Hierarchy。</li><li>选中某部分代码，Ctrl+Alt+T可以使选中代码surround with，生成while、if、try等。好像和QQ冲突了，可以改快捷键。</li></ul><p>递归小心爆栈。</p><p><a href="https://developer.aliyun.com/topic/java2020?utm_content=g_1000113416">《阿里巴巴Java开发手册》</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三行代码搞定七牛云文件上传和博客部署</title>
      <link href="/2020/06/21/qiniu/"/>
      <url>/2020/06/21/qiniu/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>hexo博客</li><li>已备案的域名</li><li>命令行工具<a href="https://github.com/qiniu/qshell">qshell</a></li><li>关于图床的配置，引用一下hxd的文章——<a href="https://www.bolun.xyz/2020/06/19/Markdown_Picgo/">几种将本地Markdown中图片自动上传到图床的方法</a></li></ul><h2 id="七牛云配置"><a href="#七牛云配置" class="headerlink" title="七牛云配置"></a>七牛云配置</h2><p>首先你要有一个七牛云账户，然后之后的实名认证什么的就不说了。</p><p>然后在对象储存里新建一个bucket就可以进行基础的文件储存了，但是七牛云的外网访问流量是收费的，而其CDN回源流量有一定免费量，所以接下来配置CDN。</p><p><img src="https://img.lfalive.top/qiniu/1.png"></p><p>在bucket的<code>空间管理</code>处设置CDN加速域名。</p><p><img src="https://img.lfalive.top/qiniu/2.png"></p><p>进行如下界面后，添加域名（建议添加自己域名下的二级域名），然后源站配置处选择这个存图的bucket（应该已经默认选中了）。</p><p><img src="https://img.lfalive.top/qiniu/3.png"></p><p>很快就配置好了，接下来只需要去域名服务商配置域名的 CNAME就可以了，不赘述。稍等片刻就可以使用自定义的域名访问bucket中的文件了。</p><h2 id="自动上传图片文件"><a href="#自动上传图片文件" class="headerlink" title="自动上传图片文件"></a>自动上传图片文件</h2><p>手动打开网页并上传文件，设置前缀，还是很麻烦的。这里就用脚本来做了。在hexo博客的根目录下，额外放几个文件。</p><img src="https://img.lfalive.top/qiniu/4.png" style="zoom: 80%;" /><p>依次解释。qshell.exe是文章开头所提到的工具之一，qshell是利用<a href="https://developer.qiniu.com/">七牛文档上公开的API</a>实现的一个方便开发者测试和使用七牛API服务的命令行工具。最初使用的时候，记得在命令行中调用一次，完成如下操作。</p><img src="https://img.lfalive.top/qiniu/6.png" style="zoom:70%;" /><p>blogimg是自己本地备份博客所用图片文件的文件夹，里面有博客的头图、头像图和每篇文章的配图。其中文章的配图在以各自markdown文件名命名的文件夹里。举个栗子，我的/source/_posts文件夹里有文件<code>qiniu.md</code>，即这篇文章，则blogimg文件夹里就建立一个名为<code> qiniu</code>的文件夹来放这篇文章所用到的配图。然后在文章中插入本地图片时直接调用一个很简短的相对路径，如下。</p><p><img src="https://img.lfalive.top/qiniu/5.png"></p><p>看起来已经迈出了一大步，但是仅此是不够的，最终要实现的是把配图上传到七牛云并通过CDN加速。这时候就要用到脚本<code>deploy.sh</code>了，脚本代码如下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./qshell.exe qupload2 --thread-count=5 --src-dir=./blogimg/<span class="variable">$1</span> --key-prefix=<span class="variable">$1</span>/ --bucket=lfalive-b1 --check-exists=<span class="literal">true</span> --check-hash=<span class="literal">true</span> --overwrite=<span class="literal">true</span> --rescan-local=<span class="literal">true</span></span><br><span class="line">sed -i <span class="string">&quot;s/..\/..\/blogimg/https:\/\/img.lfalive.top/g&quot;</span> ./<span class="built_in">source</span>/_posts/<span class="variable">$1</span>.md</span><br></pre></td></tr></table></figure><p>第一行命令是调用qshell文件，执行上传文件功能，所用到参数介绍可以参考<a href="https://github.com/qiniu/qshell/blob/master/docs/qupload.md">官方文档</a>。这里配置几个关键参数。</p><ul><li><code>thread-count</code>是并发上传的协程数量。</li><li><code>src-dir</code>是本地的文件源目录，这里自然就是blogimg文件夹了。</li><li><code>key-prefix</code>是文件前缀，在这儿我们自然也要加上相应的前缀，即子文件夹名。</li><li><code>bucket</code>是你的七牛云bucket名称。</li><li><code>check-exists</code>就是检查即将上传的文件在七牛云bucket中是否已经存在。</li><li><code>check-hash</code>指检查是否重名后，还要校验hash。</li><li><code>overwrite</code>指是否覆盖空间中已有的同名文件。</li><li><code>rescan-local</code>表示扫描本地新增的文件并进行同步。</li></ul><p><img src="https://img.lfalive.top/qiniu/7.png"></p><p>上图是三次测试上传的log。可以看到，第一次直接上传成功，第二次加了check-exists和check-hash参数，找到了一个hash不匹配的重名文件，但是由于没有允许覆盖，所以云空间里的文件没有变，第三次则是配置了允许覆盖，提示成功覆盖上传了一个重名的文件。这样配置可以保证云空间的文件始终和本地相同。</p><p>关于qshell的更多用法和qupload的更多参数配置，可以去看官方文档了解。</p><p>命令第二行则是用sed函数，把markdown文件里的本地相对路径调用全部改为调用云空间的图片。<a href="https://blog.csdn.net/qq_35180983/article/details/82936506">参考的资料</a>有很多，注意写的时候斜杠用一下转义符就好。</p><p>命令中，<code>$1</code>是指调用时传入的第一个参数。所以，调用时直接在hexo博客根目录呼出命令行，执行<code>sh deploy.sh qiniu</code>即可，这里输入的参数<code>qiniu</code>就是<code>$1</code>，是你的markdown文件名，是你本地blogimg文件夹里子文件夹的名称，是调用图片时的文件前缀，实现了统一。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果你的文件名有一些特殊符号例如<code>&amp; </code>，记得给参数加个引号调用，如<code>sh deploy.sh &#39;qi&amp;niu&#39;</code>，不然会出错。</p><img src="https://img.lfalive.top/qiniu/8.png" style="zoom:80%;" /><p>另一方面，带特殊符号的文件上传到七牛云后就是这个样子，文件名中依然是<code>&amp;</code>符号，但是文件链接中变成了<code>%26</code>。但是经过实测，在网络中引用该图片时，两种方式都可以调用成功，并不影响。</p><h2 id="进一步完善"><a href="#进一步完善" class="headerlink" title="进一步完善"></a>进一步完善</h2><p>博客的部署也只需要三个指令，一行代码就可以搞定。把这些指令也加在脚本里吧！</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>最终我的<code>deploy.sh</code>是这样的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    ./qshell.exe qupload2 --thread-count=5 --src-dir=./blogimg/<span class="variable">$1</span> --key-prefix=<span class="variable">$1</span>/ --bucket=lfalive-b1 --check-exists=<span class="literal">true</span> --check-hash=<span class="literal">true</span> --overwrite=<span class="literal">true</span> --rescan-local=<span class="literal">true</span></span><br><span class="line">    sed -i <span class="string">&quot;s/..\/..\/blogimg/https:\/\/img.lfalive.top/g&quot;</span> ./<span class="built_in">source</span>/_posts/<span class="variable">$1</span>.md</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>如果有传入参数，就执行图片上传和引用替换。不管有没有传入参数，都执行博客的部署。这样就把两步合成了一步。</p><p>另有一个<code>local.sh</code>是用本地服务器运行博客预览效果的，其实只有最后一个字符不同而已。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>mac，linux或是windows，思路都是如此，配置大同小异。都直接用命令行调用脚本就可以了，十分方便。如果是windows平台windows平台的话肯定也装了git，根目录右键git bash+上方向键+回车，一套操作就完成了，当然你直接双击运行都行。</p><h2 id="再迈一小步"><a href="#再迈一小步" class="headerlink" title="再迈一小步"></a>再迈一小步</h2><p>我的习惯本来就是会把用到的图片在本地归档备份然后调用，所以做到这步已经足够。对于懒得归档的同学，提供一个思路，在Typora中设置。</p><img src="https://img.lfalive.top/qiniu/9.png" style="zoom:80%;" /><p>写文章时，自动把用到的图片复制到指定的路径中，即blogimg文件夹里的同名子文件夹里。写完后直接调用脚本，一条龙服务完事儿。</p><p>这个“优先使用相对路径”的选项是个好东西，建议勾选。</p><img src="https://img.lfalive.top/qiniu/10.png" style="zoom:80%;" /><p>即使不用Typora的自动复制功能，在通过如上图方式（打开的对话框选择图片文件）调用本地图片时，也可以直接得到前文所提到的相对路径，而不是一个绝对路径，自己还得手动改为相对路径，不然执行脚本时改引用不会被正确替换。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统概论》课程设计</title>
      <link href="/2020/06/18/db-hw-project/"/>
      <url>/2020/06/18/db-hw-project/</url>
      
        <content type="html"><![CDATA[<p>pymysql套个马甲，一个简陋的仓库管理系统。</p><p><a href="https://github.com/lfalive/MySQL-Warehouse-Management">项目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统概论》例程及习题（四）</title>
      <link href="/2020/06/17/db-hw9&amp;10/"/>
      <url>/2020/06/17/db-hw9&amp;10/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天水完了DB的最后一节课，把之前的做的合在一起发一下。后面几次作业都没有实验，全是无脑copy参考书，没有什么记录的意义，所以迟迟懒得放上来。</p><h2 id="习题6-2"><a href="#习题6-2" class="headerlink" title="习题6.2"></a>习题6.2</h2><p><strong>关系模式</strong>：</p><p>学生S(SNO,SN,SB,DN,CNO,SA)</p><p>SNO学号，SN姓名，SB出生年月，SA宿舍区；</p><p>班级C(CNO,CS,DN,CNUM,CDATE)</p><p>CNO班号，CS专业名，CNUM班级人数，CDATE入校年份；</p><p>系D(DNO,DN,DA,DNUM)</p><p>DON系号，DN系名，DA系办公室地点，DNUM系人数；</p><p>学会P(PN,DATE1,PA,PNUM)</p><p>PN学会名，DATE1成立年月，PA地点，PNUM学会会员人数；</p><p>学生-学会SP(SNO,PN,DATE2)</p><p>DATE2入会年份。</p><p><strong>极小函数依赖集</strong></p><p>S:SNO→SN,SNO→SB,SNO→CNO,SNO→DN,DN→SA</p><p>C:CNO→CS,CNO→CNUM,CNO→CDATE,CS→DN,(CS,CDATE)→CNO</p><p>D:DNO→DN,DN→DNO,DNO→DA,DNO→DNUM</p><p>P:PN→DATE1,PN→PA,PN→PNUM</p><p>SP:(SNO,PN)→DATE2</p><p><strong>S中存在的传递函数依赖：</strong></p><p>因为SNO→CNO→DN,所以SNO→DN;</p><p>因为CNO→DN→SA,所以CNO→SA;</p><p>因为SNO→CNO→DN→SA,所以SNO→SA。</p><p><strong>C中存在的传递函数依赖：</strong></p><p>因为CNO→CS→DN,所以CNO→DN。</p><p><strong>函数依赖左部是多属性的情况：</strong></p><p>都是完全函数依赖，没有部分函数依赖的情况。</p><table><thead><tr><th align="center">关系</th><th align="center">候选码</th><th align="center">外部码</th><th align="center">全码</th></tr></thead><tbody><tr><td align="center">S</td><td align="center">SNO</td><td align="center">CNO,DN</td><td align="center">无</td></tr><tr><td align="center">C</td><td align="center">CNO和(CS,CDATE)</td><td align="center">DN</td><td align="center">无</td></tr><tr><td align="center">D</td><td align="center">DNO和DN</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">P</td><td align="center">PN</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">SP</td><td align="center">(SNO,PN)</td><td align="center">SNO,PN</td><td align="center">无</td></tr></tbody></table><h2 id="习题6-6"><a href="#习题6-6" class="headerlink" title="习题6.6"></a>习题6.6</h2><p>（一）属性BC包含码。</p><p>（二）ACE,DEC,BCE。</p><p>（三）因为A、B、C、D、E都是主属性，所以R是3NF。</p><h2 id="习题6-8"><a href="#习题6-8" class="headerlink" title="习题6.8"></a>习题6.8</h2><p>（一）①如果R是BCNF，则R是3NF。</p><p>反证法。设关系R是BCNF但不是3NF。则关系R中存在候选码X，属性组Y和非主属性Z（Z不包含于Y）满足X→Y，Y→Z，不满足Y→X。因此Y不包含候选码，即Y→Z函数依赖的决定因素Y不包含候选码与R是BCNF相矛盾。</p><p>②R是3NF，但R不一定是BCNF。</p><p>若对于学生、教师、课程的关系模式，每一位教师只教一门课。每门课有若干教师，某一学生选定某门课，就对应一个固定的教室，可以得到（学生，课程）→老师；（学生，老师）→课程；老师→课程。这里是3NF，因为没有任何非主属性对码传递依赖或部分依赖。但不是BCNF关系，因为老师是决定因素而老师不包含码。</p><p>（二）如果R是3NF关系模式，则R一定是2NF关系模式。</p><p>反证法。设关系R是3NF但不是2NF。则必然存在一个非主属性Z，不完全函数依赖于码。因此存在候选码X的真子集Y，Y→Z。而由于Y是X的真子集，因此不存在Y→X，用时由于Y是主属性，Z不是主属性，因此Z不包含于Y，即与R属于3NF相矛盾。</p><h2 id="习题8-2"><a href="#习题8-2" class="headerlink" title="习题8.2"></a>习题8.2</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据表和插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> Sname <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"> Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line"> Sage <span class="type">SMALLINT</span>,</span><br><span class="line"> Sdept <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course</span><br><span class="line">(Cno    <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> Cname   <span class="type">CHAR</span>(<span class="number">40</span>),</span><br><span class="line"> Cpno    <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"> Ccredit <span class="type">SMALLINT</span>,</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Cpno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(Sno <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line"> Cno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"> Grade <span class="type">SMALLINT</span>,</span><br><span class="line"> Level <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (Sno,Cno),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Sno) <span class="keyword">REFERENCES</span> Student(Sno),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Cno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;李勇&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;CS&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;刘晨&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;CS&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215123&#x27;</span>,<span class="string">&#x27;王敏&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;MA&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215125&#x27;</span>,<span class="string">&#x27;张立&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;离散数学&#x27;</span>,<span class="keyword">null</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="keyword">null</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;操作系统&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">        (<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;PASCAL语言&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;数据结构&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;信息系统&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">92</span>,<span class="keyword">null</span>),</span><br><span class="line">        (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">88</span>,<span class="keyword">null</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">90</span>,<span class="keyword">null</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">90</span>,<span class="keyword">null</span>),</span><br><span class="line">        (<span class="string">&#x27;201215125&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">75</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (1)</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> discrete_math_grade(<span class="keyword">OUT</span> p_100 <span class="type">SMALLINT</span>,</span><br><span class="line">                                     <span class="keyword">OUT</span> p_90 <span class="type">SMALLINT</span>,</span><br><span class="line">                                     <span class="keyword">OUT</span> p_80 <span class="type">SMALLINT</span>,</span><br><span class="line">                                     <span class="keyword">OUT</span> p_70 <span class="type">SMALLINT</span>,</span><br><span class="line">                                     <span class="keyword">OUT</span> p_60 <span class="type">SMALLINT</span>,</span><br><span class="line">                                     <span class="keyword">OUT</span> p_others <span class="type">SMALLINT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> DONE <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; #定义结束标识</span><br><span class="line"><span class="keyword">DECLARE</span> p_grade <span class="type">SMALLINT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> dist <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> grade <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> Cno<span class="operator">=</span></span><br><span class="line">(<span class="keyword">SELECT</span> Cno <span class="keyword">FROM</span> Course <span class="keyword">WHERE</span> Cname<span class="operator">=</span><span class="string">&#x27;离散数学&#x27;</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> DONE <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> p_100 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> p_90 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> p_80 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> p_70 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> p_60 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> p_others <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">OPEN</span> dist;</span><br><span class="line">LOOP1: LOOP</span><br><span class="line"><span class="keyword">FETCH</span> dist <span class="keyword">INTO</span> p_grade;</span><br><span class="line">IF DONE <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">LEAVE LOOP1;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line">IF p_grade <span class="operator">=</span> <span class="number">100</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_100 <span class="operator">=</span> p_100 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_90 <span class="operator">=</span> p_90 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">80</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_80 <span class="operator">=</span> p_80 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">70</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_70 <span class="operator">=</span> p_70 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_60 <span class="operator">=</span> p_60 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">SET</span> p_others <span class="operator">=</span> p_others <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">CLOSE</span> dist;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> discrete_math_grade(<span class="variable">@p</span>_100,<span class="variable">@p</span>_90,<span class="variable">@p</span>_80,<span class="variable">@p</span>_70,<span class="variable">@p</span>_60,<span class="variable">@p</span>_others);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@p</span>_100,<span class="variable">@p</span>_90,<span class="variable">@p</span>_80,<span class="variable">@p</span>_70,<span class="variable">@p</span>_60,<span class="variable">@p</span>_others;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> avegrade(<span class="keyword">IN</span> crouse_name <span class="type">CHAR</span>(<span class="number">40</span>),<span class="keyword">OUT</span> avg_grade <span class="type">SMALLINT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> p_grade <span class="type">SMALLINT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade) <span class="keyword">INTO</span> avg_grade</span><br><span class="line"><span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> Cno<span class="operator">=</span></span><br><span class="line">(<span class="keyword">SELECT</span> Cno <span class="keyword">FROM</span> Course <span class="keyword">WHERE</span> Cname<span class="operator">=</span>crouse_name);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">CALL</span> avegrade(<span class="string">&#x27;离散数学&#x27;</span>,<span class="variable">@avg</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@avg</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC;</span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> gradetype()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> DONE <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#定义结束标识</span><br><span class="line"><span class="keyword">DECLARE</span> p_sno <span class="type">CHAR</span>(<span class="number">9</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> p_cno <span class="type">CHAR</span>(<span class="number">4</span>);</span><br><span class="line"> <span class="keyword">DECLARE</span> p_grade <span class="type">SMALLINT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> p_level <span class="type">CHAR</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> gradecursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,cno,grade <span class="keyword">FROM</span> SC;</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> DONE <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">OPEN</span> gradecursor;</span><br><span class="line">LOOP1: LOOP</span><br><span class="line"><span class="keyword">FETCH</span> gradecursor <span class="keyword">INTO</span> p_sno,p_cno,p_grade;</span><br><span class="line">IF DONE <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">LEAVE LOOP1;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line">IF p_grade <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_level <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">80</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_level <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">70</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_level <span class="operator">=</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_level <span class="operator">=</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">SET</span> p_level <span class="operator">=</span> <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line">UPDATE SC <span class="keyword">SET</span> Level <span class="operator">=</span> p_level</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span>p_cno <span class="keyword">AND</span> Sno<span class="operator">=</span>p_Sno; </span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">CLOSE</span> gradecursor;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> gradetype;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw9%2610/8-2-1.png" alt="8-2-1"></p><p><img src="https://img.lfalive.top/db-hw9%2610/8-2-2.png" alt="8-2-2"></p><p><img src="https://img.lfalive.top/db-hw9%2610/8-2-3.png" alt="8-2-3"></p><p><img src="https://img.lfalive.top/db-hw9%2610/8-2-4.png" alt="8-2-4"></p><h2 id="实验6存储过程实验"><a href="#实验6存储过程实验" class="headerlink" title="实验6存储过程实验"></a>实验6存储过程实验</h2><h3 id="实验6-1存储过程实验"><a href="#实验6-1存储过程实验" class="headerlink" title="实验6.1存储过程实验"></a>实验6.1存储过程实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 除了Orders和Lineitem，其他表格按实验一步骤导入数据。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders(orderkey,custkey,totalprice)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">61018</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,extendedprice,discount,tax)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (1)无参数的存储过程</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Proc_CalTotalPrice()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">UPDATE orders</span><br><span class="line"><span class="keyword">SET</span> totalprice <span class="operator">=</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">         <span class="keyword">FROM</span> lineitem </span><br><span class="line">         <span class="keyword">WHERE</span> orders.orderkey <span class="operator">=</span> lineitem.orderkey );</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> Proc_CalTotalPrice ();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)有参数的存储过程</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Proc_CalTotalPrice4Order(<span class="keyword">IN</span> okey <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">UPDATE orders </span><br><span class="line"><span class="keyword">SET</span> totalprice <span class="operator">=</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax)) </span><br><span class="line"><span class="keyword">FROM</span> lineitem </span><br><span class="line"><span class="keyword">WHERE</span> orders.orderkey <span class="operator">=</span> lineitem.orderkey </span><br><span class="line">         <span class="keyword">AND</span> lineitem.orderkey <span class="operator">=</span> okey);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> Proc_CalTotalPrice4Order(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)有局部变量的存储过程</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Proc_CalTotalPrice4Customer(<span class="keyword">IN</span> p_custname <span class="type">CHAR</span>(<span class="number">25</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> L_custkey <span class="type">INTEGER</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> custkey <span class="keyword">INTO</span> L_custkey</span><br><span class="line">    <span class="keyword">FROM</span> Customer</span><br><span class="line">    <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="built_in">TRIM</span>(p_custname);</span><br><span class="line">    UPDATE Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">            <span class="keyword">FROM</span> Lineitem</span><br><span class="line">            <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey </span><br><span class="line">             <span class="keyword">AND</span> Orders.custkey <span class="operator">=</span> L_custkey);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> Proc_CalTotalPrice4Customer (<span class="string">&#x27;高乌恩&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders </span><br><span class="line"><span class="keyword">WHERE</span> custkey <span class="operator">=</span> (<span class="keyword">SELECT</span> custkey <span class="keyword">FROM</span> Customer <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;高乌恩&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)有输出参数的存储过程</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Proc_CalTotalPrice4Customer2(<span class="keyword">IN</span> p_custname <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line">                                              <span class="keyword">OUT</span> p_totalprice <span class="type">REAL</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> L_custkey <span class="type">INTEGER</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> custkey <span class="keyword">INTO</span> L_custkey</span><br><span class="line">    <span class="keyword">FROM</span> Customer</span><br><span class="line">    <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="built_in">TRIM</span>(p_custname);</span><br><span class="line">    UPDATE Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">            <span class="keyword">FROM</span> Lineitem</span><br><span class="line">            <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey </span><br><span class="line">             <span class="keyword">AND</span> Orders.custkey <span class="operator">=</span> L_custkey);</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(totalprice) <span class="keyword">INTO</span> p_totalprice</span><br><span class="line">    <span class="keyword">FROM</span> Orders <span class="keyword">WHERE</span> custkey <span class="operator">=</span> L_custkey;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> Proc_CalTotalPrice4Customer2 (<span class="string">&#x27;高乌恩&#x27;</span>, <span class="variable">@totalprice</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@totalprice</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders </span><br><span class="line"><span class="keyword">WHERE</span> custkey <span class="operator">=</span> (<span class="keyword">SELECT</span> custkey <span class="keyword">FROM</span> Customer <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;高乌恩&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)修改存储过程</span></span><br><span class="line"><span class="comment">-- 如果要修改存储过程的名称，可以先删除原存储过程，再以不同的命名创建新的存储过程。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)删除储存过程</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> Proc_CalTotalPrice4Customer2;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw9%2610/6-1-1.png" alt="6-1-1"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-1-2.png" alt="6-1-2"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-1-3.png" alt="6-1-3"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-1-4.png" alt="6-1-4"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-1-5.png" alt="6-1-5"></p><h3 id="实验6-2自定义函数实验"><a href="#实验6-2自定义函数实验" class="headerlink" title="实验6.2自定义函数实验"></a>实验6.2自定义函数实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 除了Orders和Lineitem，其他表格按实验一步骤导入数据。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders(orderkey,custkey,totalprice)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">61018</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,extendedprice,discount,tax)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (1)无参数的自定义函数</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> FUN_CalTotalPrice()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">REAL</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> res <span class="type">REAL</span>;</span><br><span class="line">    UPDATE Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>(extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">                      <span class="keyword">FROM</span> Lineitem </span><br><span class="line">                      <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey);</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(totalprice) <span class="keyword">INTO</span> res</span><br><span class="line">    <span class="keyword">FROM</span> Orders;</span><br><span class="line">    <span class="keyword">RETURN</span> res;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> FUN_CalTotalPrice();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)有参数的自定义函数</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> FUN_CalTotalPrice4Order(p_okey <span class="type">INTEGER</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">REAL</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> res <span class="type">REAL</span>;</span><br><span class="line">    UPDATE Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>(extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">                      <span class="keyword">FROM</span> Lineitem </span><br><span class="line">                      <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey </span><br><span class="line">                      <span class="keyword">AND</span> lineitem.orderkey <span class="operator">=</span> p_okey);</span><br><span class="line">    <span class="keyword">SELECT</span> totalprice <span class="keyword">INTO</span> res</span><br><span class="line">    <span class="keyword">FROM</span> Orders</span><br><span class="line">    <span class="keyword">WHERE</span> orderkey <span class="operator">=</span> p_okey;</span><br><span class="line">    <span class="keyword">RETURN</span> res;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> FUN_CalTotalPrice4Order(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)有局部变量的自定义函数</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> FUN_CalTotalPrice4Customer(p_custname <span class="type">CHAR</span>(<span class="number">25</span>))</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">REAL</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> L_custkey <span class="type">INTEGER</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> res <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> custkey <span class="keyword">INTO</span> L_custkey</span><br><span class="line">    <span class="keyword">FROM</span> Customer</span><br><span class="line">    <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="built_in">TRIM</span>(p_custname);</span><br><span class="line">    UPDATE Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">            <span class="keyword">FROM</span> Lineitem</span><br><span class="line">            <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey</span><br><span class="line">                 <span class="keyword">AND</span> Orders.custkey <span class="operator">=</span> L_custkey);</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(totalprice) <span class="keyword">INTO</span> res</span><br><span class="line">    <span class="keyword">FROM</span> Orders</span><br><span class="line">    <span class="keyword">WHERE</span> custkey <span class="operator">=</span> L_custkey;</span><br><span class="line">    <span class="keyword">RETURN</span> res;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> FUN_CalTotalPrice4Customer(<span class="string">&#x27;高乌恩&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)有输出参数的自定义函数</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> FUN_CalTotalPrice4Customer2;</span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> FUN_CalTotalPrice4Customer2(p_custname <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line">                                            p_totalprice <span class="type">REAL</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">REAL</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> L_custkey <span class="type">INTEGER</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> res <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> custkey <span class="keyword">INTO</span> L_custkey</span><br><span class="line">    <span class="keyword">FROM</span> Customer</span><br><span class="line">    <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="built_in">TRIM</span>(p_custname);</span><br><span class="line">    UPDATE Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">            <span class="keyword">FROM</span> Lineitem</span><br><span class="line">            <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey</span><br><span class="line">                 <span class="keyword">AND</span> Orders.custkey <span class="operator">=</span> L_custkey);</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(totalprice) <span class="keyword">INTO</span> p_totalprice</span><br><span class="line">    <span class="keyword">FROM</span> Orders</span><br><span class="line">    <span class="keyword">WHERE</span> custkey <span class="operator">=</span> L_custkey;</span><br><span class="line">    <span class="keyword">RETURN</span> res;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> FUN_CalTotalPrice4Customer2(<span class="string">&#x27;高乌恩&#x27;</span>,<span class="variable">@totalprice</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@totalprice</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)修改自定义函数</span></span><br><span class="line"><span class="comment">-- 如果要修改自定义函数的名称，可以先删除原自定义函数，再以不同的命名创建新的自定义函数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)删除自定义函数</span></span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw9%2610/6-2-1.png" alt="6-2-1"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-2-2.png" alt="6-2-2"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-2-3.png" alt="6-2-3"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-2-4.png" alt="6-2-4"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-2-5.png" alt="6-2-5"></p><h3 id="实验6-3游标实验"><a href="#实验6-3游标实验" class="headerlink" title="实验6.3游标实验"></a>实验6.3游标实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 除了Orders和Lineitem，其他表格按实验一步骤导入数据。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders(orderkey,custkey,totalprice)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">61018</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,extendedprice,discount,tax)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (1)普通游标</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ProcCursor_CalTotalPrice()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> DONE <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#定义结束标识</span><br><span class="line">    <span class="keyword">DECLARE</span> L_orderkey <span class="type">INTEGER</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> L_totalprice <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> mycursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> </span><br><span class="line">    <span class="keyword">SELECT</span> orderkey,totalprice <span class="keyword">FROM</span> Orders;</span><br><span class="line">    <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> DONE <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">OPEN</span> mycursor;</span><br><span class="line">    LOOP1: LOOP</span><br><span class="line">        <span class="keyword">FETCH</span> mycursor <span class="keyword">INTO</span> L_orderkey,L_totalprice;</span><br><span class="line">        IF DONE <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">LEAVE LOOP1;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax)) <span class="keyword">INTO</span> L_totalprice</span><br><span class="line"><span class="keyword">FROM</span> Lineitem </span><br><span class="line"><span class="keyword">WHERE</span> orderkey <span class="operator">=</span> L_orderkey;</span><br><span class="line">        UPDATE Orders</span><br><span class="line">        <span class="keyword">SET</span> totalprice <span class="operator">=</span> L_totalprice</span><br><span class="line">        <span class="keyword">WHERE</span> orderkey <span class="operator">=</span> L_orderkey;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> mycursor;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> ProcCursor_CalTotalPrice();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)REFCURSOR类型游标</span></span><br><span class="line"><span class="comment">-- MySQL不支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)记录变量与游标</span></span><br><span class="line"><span class="comment">-- MySQL不支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)带参数的游标</span></span><br><span class="line"><span class="comment">-- MySQL不支持，改为带参数的PROCEDURE结合普通游标查询</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ProcParaCursor_CalTotalPrice(<span class="keyword">IN</span> c_nationname <span class="type">CHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> DONE <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#定义结束标识</span><br><span class="line">    <span class="keyword">DECLARE</span> L_totalprice <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> L_orderkey <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> mycursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line">    <span class="keyword">SELECT</span> O.orderkey </span><br><span class="line">    <span class="keyword">FROM</span> Orders O,Customer C,Nation N</span><br><span class="line">    <span class="keyword">WHERE</span> O.custkey <span class="operator">=</span> C.custkey </span><br><span class="line">    <span class="keyword">AND</span> C.nationkey <span class="operator">=</span> N.nationkey </span><br><span class="line">    <span class="keyword">AND</span> <span class="built_in">TRIM</span>(N.name) <span class="operator">=</span> <span class="built_in">TRIM</span>(c_nationname);</span><br><span class="line">    <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> DONE <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">OPEN</span> mycursor;</span><br><span class="line">    LOOP1: LOOP</span><br><span class="line">        <span class="keyword">FETCH</span> mycursor <span class="keyword">INTO</span> L_orderkey;</span><br><span class="line">        IF DONE <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">LEAVE LOOP1;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax)) <span class="keyword">INTO</span>  L_totalprice</span><br><span class="line">        <span class="keyword">FROM</span> Lineitem </span><br><span class="line">        <span class="keyword">WHERE</span> orderkey <span class="operator">=</span> L_orderkey;</span><br><span class="line">        UPDATE Orders </span><br><span class="line">        <span class="keyword">SET</span> totalprice <span class="operator">=</span> L_totalprice </span><br><span class="line">        <span class="keyword">WHERE</span> orderkey <span class="operator">=</span> L_orderkey;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> mycursor;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> ProcParaCursor_CalTotalPrice(<span class="string">&#x27;中国&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw9%2610/6-3-1.png" alt="6-3-1"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-3-2.png" alt="6-3-2"></p><h2 id="习题7-1"><a href="#习题7-1" class="headerlink" title="习题7.1"></a>习题7.1</h2><ol><li><p>需求分析。</p></li><li><p>概念结构设计。</p></li><li><p>逻辑结构设计。</p></li><li><p>数据库物理设计。</p></li><li><p>数据库实施。</p></li><li><p>数据库运行和维护。</p></li></ol><p>设计一个完善的实际数据库及其应用系统往往是上述阶段的不断反复。</p><h2 id="习题7-2"><a href="#习题7-2" class="headerlink" title="习题7.2"></a>习题7.2</h2><ol><li>在概念结构设计阶段形成独立于机器特点、独立于各个DBMS产品的概念模式，在本篇中就是E-R图。</li><li>在逻辑结构设计阶段将E-R图转换成具体的数据库产品支持的数据模型，如关系模型，形成数据库逻辑模式，然后在基本表的基础上再建立必要的视图，形成数据的外模式。</li><li>在物理结构设计阶段，根据DBMS特点和处理的需要进行物理储存安排，建立索引，形成数据库内模式。</li></ol><h2 id="习题7-3"><a href="#习题7-3" class="headerlink" title="习题7.3"></a>习题7.3</h2><p>需求分析阶段的设计目标是通过详细调查现实世界要处理的对象，充分了解原系统工作概况，明确客户的各种需求，然后在此基础上确定新系统的功能。</p><p>调查的内容是“数据”和“处理”，即获得用户对数据库的如下要求：</p><ol><li>信息要求。指用户需要从数据库中获得信息的内容与性质。由信息要求可以导出数据要求，即在数据库中需要储存哪些数据。</li><li>处理要求。指用户要完成什么处理功能，对处理的响应时间有什么要求，处理方式是批处理还是联机处理。</li><li>安全性与完整性要求。</li></ol><h2 id="习题7-4"><a href="#习题7-4" class="headerlink" title="习题7.4"></a>习题7.4</h2><p>数据字典的内容通常包括数据项、数据结构、数据流、数据存储和处理过程。其中数据项是数据的最小组成单位，若干个数据项可以组成一个数据结构。数据字典通过对数据项和数据结构的定义来描述数据流、数据存储的逻辑内容。</p><p>数据字典作用：数据字典是关于数据库中数据的描述，在需求分析阶段建立，是下一步进行概念设计的基础，并在数据库设计过程中不断修改、充实和完善。</p><h2 id="习题8-1"><a href="#习题8-1" class="headerlink" title="习题8.1"></a>习题8.1</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span><span class="keyword">SELECT</span> Cno,Cname,Cpno,Ccredit</span><br><span class="line"><span class="keyword">INTO</span>:HCno,:HCname,:HCpno,:HCredit</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span>:givencno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">DECLARE</span> SCX <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span>:givencno;</span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">OPEN</span> SCX;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;EXEC SQL FETCH SCX INTO :HSno,:HCno,:HGrade;</span><br><span class="line"> <span class="keyword">EXEC</span> <span class="keyword">SQL</span> UPDATE SC</span><br><span class="line"> <span class="keyword">SET</span> grade <span class="operator">=</span> :NEWgrade</span><br><span class="line"> <span class="keyword">WHERE</span> <span class="keyword">CURRENT</span> <span class="keyword">OF</span> SCX;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">CLOSE</span> SCX;</span><br></pre></td></tr></table></figure><h2 id="习题7-7"><a href="#习题7-7" class="headerlink" title="习题7.7"></a>习题7.7</h2><img src="https://img.lfalive.top/db-hw9%2610/7-7.png" style="zoom:50%;" /><h2 id="习题7-8"><a href="#习题7-8" class="headerlink" title="习题7.8"></a>习题7.8</h2><img src="https://img.lfalive.top/db-hw9%2610/7-8.png" style="zoom: 40%;" /><h2 id="习题7-10"><a href="#习题7-10" class="headerlink" title="习题7.10"></a>习题7.10</h2><p>注：加粗的是主码属性。</p><p><strong>习题7：</strong></p><p>系（<strong>系编号</strong>，系名，学校名）</p><p>班级（<strong>班级编号</strong>，班级名，系编号）</p><p>教研室（<strong>教研室编号</strong>，教研室，系编号）</p><p>学生（<strong>学号</strong>，姓名，学历，班级编号，导师职工号）</p><p>课程（<strong>课程编号</strong>，课程名）</p><p>教员（<strong>职工号</strong>，姓名，职称，教研室编号）</p><p>选课（<strong>学号</strong>，课程编号，成绩）</p><p><strong>习题8：</strong></p><p>产品（<strong>产品号</strong>，产品名，仓库号）</p><p>零件（<strong>零件号</strong>，零件名）</p><p>原材料（<strong>原材料号</strong>，原材料名，类别，仓库号，存放量）</p><p>仓库（<strong>仓库号</strong>，仓库名）</p><p>产品组成（<strong>产品号，零件号</strong>，使用零件量）</p><p>零件组成（<strong>零件号，原材料号</strong>，使用原材料量）</p><p>零件储存（<strong>零件号，仓库号</strong>，存储量）</p><h2 id="习题7-11"><a href="#习题7-11" class="headerlink" title="习题7.11"></a>习题7.11</h2><p>这些关系模式都只有一个码，且都是唯一决定的因素，所以都属于BCNF。不会产生更新异常的现象。</p><h2 id="习题7-13"><a href="#习题7-13" class="headerlink" title="习题7.13"></a>习题7.13</h2><p>数据库在物理设备上的存储结构与存取方法称为数据库的物理结构，它依赖于给定的DBMS。为一个给定的逻辑数据模型选取一个最合适应用要求的物理结构，就是数据库的物理设计的主要内容。</p><p>通常分为两步：</p><ol><li>确定数据库的物理结构，在关系数据库中主要指存取方法和存储结构。</li><li>对物理结构进行评价，评价的重点是时间和空间效率。</li></ol><h2 id="习题7-15"><a href="#习题7-15" class="headerlink" title="习题7.15"></a>习题7.15</h2><p>数据库的再组织是指按原设计要求重新安排存储位置、回收垃圾、减少指针链等，以提高系统性能。</p><p>数据库的重构造则是指部分修改数据库的模式和内模式，即修改原设计的逻辑和物理结构。数据库的再组织是不修改数据库的模式和内模式的。</p><p>进行数据库的再组织和重构造的原因：</p><p>数据库运行一段时间后，由于记录不断增、删、改，会使数据库的物理存储情况变坏，降低<br>了数据的存取效率，数据库性能下降，这时DBA就要对数据库进行重组织。DBMS一般都提<br>供数据重组织用的实用程序。</p><p>数据库应用环境常常发生变化，如增加新的应用或新的实体，取消了某些应用，有的实体<br>与实体间的联系也发生了变化等，使原有的数据库设计不能满足新的需求，需要调整数据库<br>的模式和内模式。这就要进行数据库重构造。</p><h2 id="习题9-2"><a href="#习题9-2" class="headerlink" title="习题9.2"></a>习题9.2</h2><ol><li>需要对R进行全盘扫描，块数=20000/40=500。</li><li>对R进行索引扫描，块数=3+1=4；其中3块B+树索引块，1块数据块。</li><li>R本身20000/40=500个块，S本身1200/30=40个块，以S为外表，假设内存分配的块数为k，嵌套循环连接需要的块数为40+[40/k-1]*500。</li><li>如果R和S都在B属性上排好序，块数500+40=540；如果都没有排序，则还要加上排序代价，结果为540+2 * 500 * ( (log2 500) + 1 ) + 2 * 40 * ( (log2 40) + 1 )。</li></ol><h2 id="习题9-3"><a href="#习题9-3" class="headerlink" title="习题9.3"></a>习题9.3</h2><p>最初的语法树和关系代数语法树为：</p><p><img src="https://img.lfalive.top/db-hw9%2610/9-3-1.png" alt="9-3-1"></p><p>优化后的语法树为：</p><img src="https://img.lfalive.top/db-hw9%2610/9-3-2.png" alt="9-3-2" style="zoom: 67%;" /><h2 id="习题9-6"><a href="#习题9-6" class="headerlink" title="习题9.6"></a>习题9.6</h2><ol><li>尽可能先做选择运算。</li><li>同时进行投影运算和选择运算。</li><li>把投影同其前或其后的双目运算结合起来执行。</li><li>把某些选择同在它前面要执行的笛卡尔积结合起来成为一个连接运算。</li><li>找出公共子表达式。</li><li>选取合适的连接算法。</li></ol><h2 id="习题9-7"><a href="#习题9-7" class="headerlink" title="习题9.7"></a>习题9.7</h2><ol><li>把查询转换成某种内部表示，通常用的内部表示是语法树。</li><li>把语法树转换成标准（优化）形式，即利用优化算法把原始的语法树转换成优化的形式。</li><li>选择低层的存取路径。</li><li>生成查询计划，选择所需代价最小的计划加以执行。</li></ol><h2 id="习题10-1"><a href="#习题10-1" class="headerlink" title="习题10.1"></a>习题10.1</h2><p>事务是用户定义的一个数据库操作序列，这些操作要么全做、要么全不做，是一个不可分割的工作单位。</p><p>事务具有4个特性：原子性、一致性、隔离性、持续性，简称ACID特性。</p><p>原子性：事务是数据库的逻辑工作单位，事务中包括的诸操作要么都做，要么都不做。</p><p>一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。</p><p>隔离性：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><p>持续性：一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其执行结果有任何影响。</p><p>故障恢复可以保证事务的原子性与持续性。</p><h2 id="习题10-3"><a href="#习题10-3" class="headerlink" title="习题10.3"></a>习题10.3</h2><p>把对数据的修改写到数据库中和把表示这个修改的日志记录写到日志文件中是两个不<br>同的操作。有可能发生故障，这两个写操作只完成了一个。</p><p>如果先写了数据库修改，而在运行记录中没有登记这个修改，则以后就无法恢复这个修<br>改了。如果先写日志，但没有修改数据库，在恢复时只不过是多执行一次UNDO操作，并不<br>会影响数据库的正确性。所以一定要先写日志文件，即首先把日志记录写到日志文件中再写数据库的修改。</p><h2 id="习题10-4"><a href="#习题10-4" class="headerlink" title="习题10.4"></a>习题10.4</h2><ol><li>重做T1、T3；回滚T2、T4。</li><li>重做T1；回滚T2、T3。</li><li>重做T1；回滚T2、T3。</li><li>重做T1；回滚T2。</li></ol><h2 id="习题10-5"><a href="#习题10-5" class="headerlink" title="习题10.5"></a>习题10.5</h2><ol><li>A=8, B=7, C=11。</li><li>A=10, B=0, C=11。</li><li>A=10, B=0, C=11。</li><li>A=10, B=0, C=11。</li><li>A=10, B=0, C=11。</li><li>A=0, B=0, C=0。</li></ol><h2 id="习题10-7"><a href="#习题10-7" class="headerlink" title="习题10.7"></a>习题10.7</h2><p>检查点记录是一类新的日志记录，内容包括建立检查点时刻所有正在执行的事务清单和这些事务的最近一个日志记录的地址。</p><h2 id="习题10-9"><a href="#习题10-9" class="headerlink" title="习题10.9"></a>习题10.9</h2><ol><li><p>在重新开始文件中，找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中找到最后一个检查点记录。</p></li><li><p>由该检查点记录得到检查点建立时刻所有正在执行的事务清单ACTIVE-LIST。这里建立两个事务队列：</p><ul><li>UNDO-LIST：需要执行undo操作的事务集合；</li><li>REDO-LIST：需要执行redo 操作的事务集合。</li></ul><p>把ACTIVE-LIST暂时放人UNDO-LIST队列，REDO队列暂为空。</p></li><li><p>从检查点开始正向扫描日志文件</p><ul><li>如有新开始的事务T，把T暂时放入UNDO-LIST队列;</li><li>如有提交的事务Tj，把Tj从UNDO-LIST队列移到REDO-LIST队列，直到日志文件结束。</li></ul></li><li><p>对UNDO-LIST中的每个事务执行UNDO操作，对REDO-LIST中的每个事务执行REDO操作。</p></li></ol><h2 id="习题10-10"><a href="#习题10-10" class="headerlink" title="习题10.10"></a>习题10.10</h2><p>数据库镜像即根据DBA的要求，自动把整个数据库或者其中的部分关键数据复制到另一个磁盘上。每当主数据库更新时，DBMS自动把更新后的数据复制过去，即DBMS自动保证镜像数据与主数据的一致性。</p><p>数据库镜像的用途：</p><ol><li>用于数据库恢复。当出现介质故障时，镜像磁盘可继续使用，同时DBMS自动利用镜像磁盘数据进行数据库的恢复，不需要关闭系统和重装数据库副本。</li><li>提高数据库的可用性。在没有出现故障时，当一一个用户对某个数据加排他锁进行修改时，其他用户可以读镜像数据库上的数据，而不必等待该用户释放锁。</li></ol><h2 id="习题11-2"><a href="#习题11-2" class="headerlink" title="习题11.2"></a>习题11.2</h2><p>并发操作带来的数据不一致性包括三类：</p><ol><li>丢失修改<br>两个事务T1和T2读入同一数据并修改，T2提交的结果破坏了(覆盖了)T1提交的结果，导致T1的修改被丢失。</li><li>不可重复读<br>不可重复读是指事务T1读取某一数据后，事务T2对其执行更新操作，使T1无法再现前一次读取结果。不可重复读包括三种情况：<ol><li>事务T1读取某一数据后，事务T2对其做了修改，当事务T1再次读该数据时，得到与前一次不同的值。</li><li>事务T1按一定条件从数据库中读取了某些数据记录后，事务T2删除了其中部分记录，当T1再次按相同条件读取数据时，发现某些记录消失了。</li><li>事务T1按一定条件从数据库中读取某些数据记录后，事务T2插入了一些记录，当T1再次按相同条件读取数据时，发现多了一些记录。</li></ol></li><li>读“脏”数据<br>读“脏”数据是指事务T1修改某一数据，并将其写回磁盘，事务T2读取同一数据后 ， T1由于某种原因被撤销，这时T1已修改过的数据恢复原值，T2读到的数据就与数据库中的数据不一致，则T2读到的数据就为“脏”数据，即不正确的数据。</li></ol><p>避免不一致性的方法就是并发控制。常用的并发控制技术包括封锁方法、时间戳方法、乐观控制方法和多版本并发控制方法等。</p><h2 id="习题11-4"><a href="#习题11-4" class="headerlink" title="习题11.4"></a>习题11.4</h2><p>DBMS在对数据进行读写操作之前首先对该数据执行封锁操作，例如事务T1在对A进行修改之前先对A执行Xlock(A)即对A加X锁。这样当T2请求对A加X锁时就被拒绝，T2只能等待T1释放A上的锁后才能获得对A的X锁，这时它读到的A是T1更新后的值，再按此新的A值进行运算。这样就不会丢失T1的更新。</p><p>DBMS按照一定的封锁协议对并发操作进行控制，使得多个并发操作有序地执行，就可以避免丟失修改、不可重复读和读“脏”数据等数据不一致性。</p><h2 id="习题11-6"><a href="#习题11-6" class="headerlink" title="习题11.6"></a>习题11.6</h2><p>如果事务T1封锁了数据R1，T2封锁了数据R2 ，然后T1又请求封锁R2，因T2已封锁了R2，于是T1等待T2释放R2上的锁。接着T2又申请封锁R1，因T1已封锁了R1，T2也只能等待T1释放R1上的锁。这样就出现了T1在等待T2，而T2又在等待T1的局面，T1和T2两个事务永远不能结束，形成死锁。</p><p>防止死锁的发生其实就是要破坏产生死锁的条件。预防死锁通常有两种方法：</p><ol><li>一次封锁法<br>要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行。</li><li>顺序封锁法<br>预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实行封锁。</li></ol><h2 id="习题11-8"><a href="#习题11-8" class="headerlink" title="习题11.8"></a>习题11.8</h2><p>可串行化的调度是正确的调度。可串行化的调度的定义：多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行地执行它们时的结果相同，称这种调度策略为可串行化的调度。</p><h2 id="习题11-9"><a href="#习题11-9" class="headerlink" title="习题11.9"></a>习题11.9</h2><ol><li><p>A的最终结果可能有2、4、8、16。因为串行执行次序有T1 T2 T3；T1 T3 T2；T2 T1 T3；T2 T3 T1；T3 T1 T2；T3 T2 T1。对应的执行结果是16；8；4；2；4；2。</p></li><li><table><thead><tr><th align="left">T1</th><th align="left">T2</th><th align="left">T3</th></tr></thead><tbody><tr><td align="left">Slock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Y=A=0</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Unlock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Xlock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">A=Y+2</td><td align="left">Slock A</td><td align="left"></td></tr><tr><td align="left">写回A(=2)</td><td align="left">等待</td><td align="left"></td></tr><tr><td align="left">Unlock A</td><td align="left">等待</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">等待</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Y=A=2</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Unlock A</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Xlock A</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Slock A</td></tr><tr><td align="left"></td><td align="left">A=Y*2</td><td align="left">等待</td></tr><tr><td align="left"></td><td align="left">写回A(=4)</td><td align="left">等待</td></tr><tr><td align="left"></td><td align="left">Unlock A</td><td align="left">等待</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Y=A=4</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Unlock A</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Xlock A</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">A=Y*Y</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">写回A(=16)</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Unlock A</td></tr></tbody></table><p>最后结果A=16，是可串行化的调度。</p></li><li><table><thead><tr><th align="left">T1</th><th align="left">T2</th><th align="left">T3</th></tr></thead><tbody><tr><td align="left">Slock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Y=A=0</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Unlock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Slock A</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Y=A=0</td><td align="left"></td></tr><tr><td align="left">Xlock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">等待</td><td align="left">Unlock A</td><td align="left"></td></tr><tr><td align="left">A=Y+2</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">写回A(=2)</td><td align="left"></td><td align="left">Slock A</td></tr><tr><td align="left">Unlock A</td><td align="left"></td><td align="left">等待</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Y=A=2</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Unlock A</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Xlock A</td></tr><tr><td align="left"></td><td align="left">Xlock A</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">等待</td><td align="left">Y=Y**2</td></tr><tr><td align="left"></td><td align="left">等待</td><td align="left">写回A(=4)</td></tr><tr><td align="left"></td><td align="left">等待</td><td align="left">Unlock A</td></tr><tr><td align="left"></td><td align="left">A=Y*2</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">写回A(=0)</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Unlock A</td><td align="left"></td></tr></tbody></table></li></ol><p>最后结果A=0，为非串行化的调度。</p><ol start="4"><li><table><thead><tr><th>T1</th><th>T2</th><th align="left">T3</th></tr></thead><tbody><tr><td>Slock A</td><td></td><td align="left"></td></tr><tr><td>Y=A=0</td><td></td><td align="left"></td></tr><tr><td>Xlock A</td><td></td><td align="left"></td></tr><tr><td>A=Y+2</td><td>Slock A</td><td align="left"></td></tr><tr><td>写回A(=2)</td><td>等待</td><td align="left"></td></tr><tr><td>Unlock A</td><td>等待</td><td align="left"></td></tr><tr><td></td><td>Y=A=2</td><td align="left"></td></tr><tr><td></td><td>Xlock A</td><td align="left"></td></tr><tr><td>Unlock A</td><td>等待</td><td align="left">Slock A</td></tr><tr><td></td><td>A=Y*2</td><td align="left">等待</td></tr><tr><td></td><td>写回A(=4)</td><td align="left">等待</td></tr><tr><td></td><td>Unlock A</td><td align="left">等待</td></tr><tr><td></td><td></td><td align="left">Y=A=4</td></tr><tr><td></td><td>Unlock A</td><td align="left"></td></tr><tr><td></td><td></td><td align="left">Xlock A</td></tr><tr><td></td><td></td><td align="left">A=Y*Y</td></tr><tr><td></td><td></td><td align="left">写回A(=16)</td></tr><tr><td></td><td></td><td align="left">Unlock A</td></tr><tr><td></td><td></td><td align="left">Unlock A</td></tr></tbody></table></li><li><table><thead><tr><th>T1</th><th>T2</th><th>T3</th></tr></thead><tbody><tr><td>Slock A</td><td></td><td></td></tr><tr><td>Y=A=0</td><td></td><td></td></tr><tr><td></td><td>Slock A</td><td></td></tr><tr><td></td><td>Y=A=0</td><td></td></tr><tr><td>Xlock A</td><td></td><td></td></tr><tr><td>等待</td><td></td><td></td></tr><tr><td></td><td>Xlock A</td><td></td></tr><tr><td></td><td>等待</td><td></td></tr><tr><td></td><td></td><td>Slock A</td></tr><tr><td></td><td></td><td>Y=A=0</td></tr><tr><td></td><td></td><td>Xlock A</td></tr><tr><td></td><td></td><td>等待</td></tr></tbody></table></li></ol><h2 id="习题11-14"><a href="#习题11-14" class="headerlink" title="习题11.14"></a>习题11.14</h2><ol><li><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>Slock A</td><td>Slock B</td></tr><tr><td>R(A)</td><td>R(B)</td></tr><tr><td>Xlock B</td><td>Xlock A</td></tr><tr><td>R(B)</td><td>R(A)</td></tr><tr><td>B=A+B</td><td>A=A+B</td></tr><tr><td>W(B)</td><td>W(A)</td></tr><tr><td>Unlock A</td><td>Unlock B</td></tr><tr><td>Unlock B</td><td>Unlock A</td></tr></tbody></table></li><li><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>Slock A</td><td></td></tr><tr><td>R(A)</td><td></td></tr><tr><td></td><td>Slock(B)</td></tr><tr><td></td><td>R(B)</td></tr><tr><td>Xlock B</td><td></td></tr><tr><td></td><td>Xlock A</td></tr></tbody></table></li></ol><h2 id="习题11-15"><a href="#习题11-15" class="headerlink" title="习题11.15"></a>习题11.15</h2><p>引进意向锁是为了提高封锁子系统的效率。在多粒度封锁方法中，一个数据对象可能以两种方式加锁——显式封锁和隐式封锁。因此系统在对某一数据对象加锁时，不仅要检查该数据对象上有无(显式和隐式)封锁与之冲突，还要检查其所有上级结点和所有下级结点，看申请的封锁是否与这些结点上的(显式和隐式)封锁冲突。显然，这样的检查方法效率很低。为此引进了意向锁。</p><p>意向锁的含义是：对任一结点加锁时，必须先对它的上层结点加意向锁。引进意向锁后，系统对某一数据对象加锁时不必逐个检查与下部级结点的封锁冲突了。</p><h2 id="习题11-16"><a href="#习题11-16" class="headerlink" title="习题11.16"></a>习题11.16</h2><p>IS锁：如果对一个数据对象加IS锁，表示它的后裔结点拟(意向)加S锁。例如，要对某个元组加S锁，则要首先对关系和数据库加IS锁。<br>IX锁：如果对一个数据对象加IX锁，表示它的后裔结点拟(意向)加X锁。例如，要对某个元组加X锁，则要首先对关系和数据库加IX锁。<br>SIX锁：如果对一个数据对象加SIX锁，表示对它加S锁，再加IX锁，即SIX=S+IX。<br>相容矩阵：</p><table><thead><tr><th align="center"></th><th align="center">S</th><th align="center">X</th><th align="center">IS</th><th align="center">IX</th><th align="center">SIX</th><th align="center">—</th></tr></thead><tbody><tr><td align="center">S</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="center">X</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="center">IS</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">IX</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="center">SIX</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="center">—</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一些Kygo的歌</title>
      <link href="/2020/05/30/golden-hour/"/>
      <url>/2020/05/30/golden-hour/</url>
      
        <content type="html"><![CDATA[<p>夏天到了，三年之期，等到了Kygo个人第三张专辑《Golden Hour》。</p>    <div id="aplayer-lzBUErRh" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="0046vMjV0I6lBT" data-server="tencent" data-type="album" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><p><img src="https://img.lfalive.top/golden-hour/0.jpg"></p><p>首首精品，我愿称之为神专，《I‘ll Wait》这首我吹爆。除此之外，个人还比较喜欢Tropical House风的《Beautiful》《Could You Love Me》，人声切片的《Like It Is》《Freedom》《The Truth》。</p><p><img src="https://img.lfalive.top/golden-hour/1.jpg"></p><p><img src="https://img.lfalive.top/golden-hour/2.jpg"></p><p>顺便放一个歌单，我收藏的Kygo作品。</p>    <div id="aplayer-zlFYLCau" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="4926452499" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-order="random"    ></div><p><img src="https://img.lfalive.top/golden-hour/3.jpg"></p><p><img src="https://img.lfalive.top/golden-hour/4.jpg"></p><p><img src="https://img.lfalive.top/golden-hour/5.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
            <tag> kygo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统概论》例程及习题（三）</title>
      <link href="/2020/05/26/db-hw7&amp;8/"/>
      <url>/2020/05/26/db-hw7&amp;8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>教材部分习题以及《数据库系统概论实验指导与习题解析》上前四个实验，看本文目录就知道了。实验参考书上的代码几乎都不能直接照抄使用，要根据对应版本MySQL做些修改，足足做了好几天。官方虽然给了数据，但是实验1.3中的很多查询，查的都是一些不存在的人，不存在的物，所以对查询目标也做了适当修改。</p><p>数据<a href="https://chinadb.ruc.edu.cn/home/nav/7/sub/32/third/130">下载链接</a>，导入csv文件方法<a href="https://blog.csdn.net/quiet_girl/article/details/71436108">参考</a>。</p><ul><li>MySQL和SQL语句有很多地方不一样，MySQL各版本之间也略有差异。</li><li>对于复杂的数据库，表多数据多，一定要注意创建数据表的先后顺序，保证参照完整性。</li><li>导入csv数据，要注意字符编码。解决了字符编码不一致的问题以及数据列的对应问题，就解决了数据导入。</li><li>实验中，对于所给数据不足或者实验要求不能充分检验语言正确性（查询出来大部分是空集）时，做了适当修改。</li></ul><h2 id="习题3-3"><a href="#习题3-3" class="headerlink" title="习题3.3"></a>习题3.3</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> A<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> A,B <span class="keyword">FROM</span> S;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">SELECT</span> A,B,S.C,S.D,E,F</span><br><span class="line"><span class="keyword">FROM</span> S,T</span><br><span class="line"><span class="keyword">WHERE</span> S.C<span class="operator">=</span>T.C <span class="keyword">AND</span> S.D<span class="operator">=</span>T.D;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">SELECT</span> A,B,S.C,S.D,T.C,T.D,E,F</span><br><span class="line"><span class="keyword">FROM</span> S,T</span><br><span class="line"><span class="keyword">WHERE</span> S.C<span class="operator">=</span>T.C;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">SELECT</span> A,B,S.C,S.D,T.C,T.D,E,F</span><br><span class="line"><span class="keyword">FROM</span> S,T</span><br><span class="line"><span class="keyword">WHERE</span> A<span class="operator">&lt;</span>E;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">SELECT</span> S1.C,S1.D,T.C,T.D,E,F</span><br><span class="line"><span class="keyword">FROM</span> T,(<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> C,D <span class="keyword">FROM</span> S) <span class="keyword">AS</span> S1;</span><br></pre></td></tr></table></figure><h2 id="习题4-5"><a href="#习题4-5" class="headerlink" title="习题4.5"></a>习题4.5</h2><p>在自主存取控制中，各个用户对于不同的数据库对象有不同的存取权限，当用户对数据库访问时，首先检查用户的存取权限，防止不合法用户对数据库的存取。用户还可以将自己拥有的存取权限授予别人，即用户具有一定的“自主”权。</p><p>在强制存取控制中，每一个数据库对象被标以一定的密级，每一个用户也被授予某一个级别的许可证。系统规定只有具有某一许可证级别的用户才能存取某一个密级的数据对象。</p><h2 id="习题4-6"><a href="#习题4-6" class="headerlink" title="习题4.6"></a>习题4.6</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 学生,班级</span><br><span class="line"><span class="keyword">TO</span> U1</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,UPDATE(家庭住址)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 学生</span><br><span class="line"><span class="keyword">TO</span> U2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 班级</span><br><span class="line"><span class="keyword">TO</span> PUBLIC;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,UPDATE</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 学生</span><br><span class="line"><span class="keyword">TO</span> R1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">GRANT</span> R1</span><br><span class="line"><span class="keyword">TO</span> U1</span><br><span class="line"><span class="keyword">WITH</span> ADMIN OPTION;</span><br></pre></td></tr></table></figure><h2 id="习题4-7"><a href="#习题4-7" class="headerlink" title="习题4.7"></a>习题4.7</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">TO</span> 王明;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span>,<span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">TO</span> 李勇;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工</span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">USER</span>()<span class="operator">=</span>NAME</span><br><span class="line"><span class="keyword">TO</span> <span class="keyword">ALL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,UPDATE(工资)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工</span><br><span class="line"><span class="keyword">TO</span> 刘星;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">TO</span> 张新;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">TO</span> 周平</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (7)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 部门工资 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> 部门.名称,<span class="built_in">MAX</span>(工资),<span class="built_in">MIN</span>(工资),<span class="built_in">AVG</span>(工资)</span><br><span class="line"><span class="keyword">FROM</span> 职工,部门</span><br><span class="line"><span class="keyword">WHERE</span> 职工.部门号<span class="operator">=</span>部门.部门号</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 职工.部门号;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 部门工资</span><br><span class="line"><span class="keyword">TO</span> 杨兰;</span><br></pre></td></tr></table></figure><h2 id="习题4-8"><a href="#习题4-8" class="headerlink" title="习题4.8"></a>习题4.8</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">FROM</span> 王明;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span>,<span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">FROM</span> 李勇;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工</span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">USER</span>()<span class="operator">=</span>NAME</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">ALL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span>,UPDATE</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工</span><br><span class="line"><span class="keyword">FROM</span> 刘星;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">FROM</span> 张新;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">FROM</span> 周平</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (7)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 部门工资</span><br><span class="line"><span class="keyword">FROM</span> 杨兰;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 部门工资;</span><br></pre></td></tr></table></figure><h2 id="习题5-5"><a href="#习题5-5" class="headerlink" title="习题5.5"></a>习题5.5</h2><p>在实现参照完整性时需要考虑可能破坏参照完整性的各种情况，以及用户违约后的处理策略。</p><table><thead><tr><th align="center">被参照表</th><th align="center">参照表</th><th align="center">违约处理</th></tr></thead><tbody><tr><td align="center"></td><td align="center">插入元组</td><td align="center">拒绝</td></tr><tr><td align="center"></td><td align="center">修改外码值</td><td align="center">拒绝</td></tr><tr><td align="center">删除元组</td><td align="center"></td><td align="center">拒绝/级联删除/设置为空值</td></tr><tr><td align="center">修改主码值</td><td align="center"></td><td align="center">拒绝/级联修改/设置为空值</td></tr></tbody></table><h2 id="习题5-6"><a href="#习题5-6" class="headerlink" title="习题5.6"></a>习题5.6</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPT</span><br><span class="line">(DEPTNO <span class="type">SMALLINT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> DEPTNAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"> MANAGER <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"> PHONENUMBER <span class="type">CHAR</span>(<span class="number">12</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMP</span><br><span class="line">(EMPNO <span class="type">SMALLINT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> EMPNAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"> AGE <span class="type">SMALLINT</span>,</span><br><span class="line"> JOB <span class="type">VARCHAR</span>(<span class="number">9</span>),</span><br><span class="line"> SAL <span class="type">SMALLINT</span>,</span><br><span class="line"> DEPTNO <span class="type">SMALLINT</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> C1 <span class="keyword">CHECK</span>(AGE<span class="operator">&lt;=</span><span class="number">60</span>),</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> FK_DEPTNO <span class="keyword">FOREIGN</span> KEY(DEPTNO) <span class="keyword">REFERENCES</span> DEPT(DEPTNO));</span><br></pre></td></tr></table></figure><h2 id="习题5-7"><a href="#习题5-7" class="headerlink" title="习题5.7"></a>习题5.7</h2><p>对于违反实体完整性和用户定义的完整性的操作，一般都采用拒绝执行的方式进行处理；对于违反参照完整性的操作，并不都是简单地拒绝执行，有时要根据应用语义执行一些附加的操作，以保证数据库的正确性。</p><h2 id="习题5-8"><a href="#习题5-8" class="headerlink" title="习题5.8"></a>习题5.8</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Male</span><br><span class="line">(SERIALNUMBER <span class="type">SMALLINT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> NAME <span class="type">CHAR</span>(<span class="number">8</span>),</span><br><span class="line"> AGE <span class="type">SMALLINT</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Female</span><br><span class="line">(SERIALNUMBER <span class="type">SMALLINT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> NAME <span class="type">CHAR</span>(<span class="number">8</span>),</span><br><span class="line"> AGE <span class="type">SMALLINT</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> ASSERTION Party</span><br><span class="line"><span class="keyword">CHECK</span>((<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Male)</span><br><span class="line">         <span class="operator">+</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Female)</span><br><span class="line">         <span class="operator">&lt;=</span> <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h2 id="实验1数据库定义与操作语言实验"><a href="#实验1数据库定义与操作语言实验" class="headerlink" title="实验1数据库定义与操作语言实验"></a>实验1数据库定义与操作语言实验</h2><h3 id="实验1-1数据库定义实验"><a href="#实验1-1数据库定义实验" class="headerlink" title="实验1.1数据库定义实验"></a>实验1.1数据库定义实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 【重要】CSV数据文件全使用utf8编码重新保存一次替换原文件</span></span><br><span class="line"><span class="comment">-- 因为DB安装配置时默认编码就是UTF8，所以改一下csv文件就OK</span></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE TPCH;</span><br><span class="line">USE TPCH;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Region并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Region</span><br><span class="line">(regionkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"> </span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/region.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Region</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Nation并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> regionkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Region(regionkey),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/nation.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Supplier并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line">(suppkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> address <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"> nationkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Nation(nationkey),</span><br><span class="line"> phone <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> acctbal <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">101</span>));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/supplier.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(suppkey,name,address,nationkey,phone);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Part并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Part</span><br><span class="line">(partkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">VARCHAR</span>(<span class="number">55</span>),</span><br><span class="line"> mfgr <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> brand <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> type <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line"> size <span class="type">INTEGER</span>,</span><br><span class="line"> container <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> retailprice <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">23</span>)); </span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/part.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Part</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(partkey,name,mfgr,type,retailprice);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表PartSupp并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PartSupp</span><br><span class="line">(partkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Part(partkey),</span><br><span class="line"> suppkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Suppplier(suppkey),</span><br><span class="line"> availqty <span class="type">INTEGER</span>,</span><br><span class="line"> supplycost <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">199</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(partkey,suppkey));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/partsupp.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> PartSupp</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(partkey,suppkey,availqty,supplycost);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Customer并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Customer</span><br><span class="line">(custkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> address <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"> nationkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Nation(nationkey),</span><br><span class="line"> phone <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> acctbal <span class="type">REAL</span>,</span><br><span class="line"> mktsegment <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">117</span>));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/customer.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Customer</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(custkey,name,nationkey);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Orders并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(orderkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> custkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Customer(custkey),</span><br><span class="line"> orderstatus <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> totalprice <span class="type">REAL</span>,</span><br><span class="line"> orderdate <span class="type">DATE</span>,</span><br><span class="line"> orderpriority <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> clerk <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> shippriority <span class="type">INTEGER</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">79</span>));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/orders.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(orderkey,custkey,orderdate);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Lineitem并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Lineitem</span><br><span class="line">(orderkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Orders(orderkey),</span><br><span class="line"> partkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Part(partkey),</span><br><span class="line"> suppkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Suppplier(suppkey),</span><br><span class="line"> linenumber <span class="type">INTEGER</span>,</span><br><span class="line"> quantity <span class="type">REAL</span>,</span><br><span class="line"> extendedprice <span class="type">REAL</span>,</span><br><span class="line"> discount <span class="type">REAL</span>,</span><br><span class="line"> tax <span class="type">REAL</span>,</span><br><span class="line"> returnflag <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> linestatus <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> shipdate <span class="type">DATE</span>,</span><br><span class="line"> commitdate <span class="type">DATE</span>,</span><br><span class="line"> receiptdate <span class="type">DATE</span>,</span><br><span class="line"> shipinstruct <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> shipmode <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">44</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(orderkey,linenumber),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY(partkey,suppkey) <span class="keyword">REFERENCES</span> PartSupp(partkey,suppkey));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/lineitem.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Lineitem</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(orderkey,partkey,suppkey,linenumber,quantity,discount,extendedprice);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/1-1-1.png" alt="1-1-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-2.png" alt="1-1-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-3.png" alt="1-1-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-4.png" alt="1-1-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-5.png" alt="1-1-5"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-6.png" alt="1-1-6"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-7.png" alt="1-1-7"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-8.png" alt="1-1-8"></p><h3 id="实验1-3数据库高级查询实验"><a href="#实验1-3数据库高级查询实验" class="headerlink" title="实验1.3数据库高级查询实验"></a>实验1.3数据库高级查询实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 因为按照实验指导书的要求进行查询多为空集，所以对查询要求稍微做了调整。</span></span><br><span class="line"><span class="comment">-- (1)查询订购了“山西省阳泉市阀门厂”制造的“方正服务器”的顾客</span></span><br><span class="line"><span class="comment">-- 不使用IN嵌套循环</span></span><br><span class="line"><span class="keyword">SELECT</span> C.custkey,C.name</span><br><span class="line"><span class="keyword">FROM</span> Customer C,Orders O,Lineitem L,Part P</span><br><span class="line"><span class="keyword">WHERE</span> C.custkey <span class="operator">=</span> O.custkey <span class="keyword">AND</span></span><br><span class="line">O.orderkey <span class="operator">=</span> L.orderkey <span class="keyword">AND</span></span><br><span class="line">L.partkey <span class="operator">=</span> P.partkey <span class="keyword">AND</span></span><br><span class="line">P.mfgr<span class="operator">=</span><span class="string">&#x27;山西省阳泉市阀门厂&#x27;</span> <span class="keyword">AND</span> P.name<span class="operator">=</span><span class="string">&#x27;方正服务器&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用IN嵌套循环</span></span><br><span class="line"><span class="keyword">SELECT</span> custkey,name</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">WHERE</span> custkey <span class="keyword">in</span> (<span class="keyword">SELECT</span> O.custkey</span><br><span class="line">                 <span class="keyword">FROM</span> Orders O,Lineitem L,Part P</span><br><span class="line">                 <span class="keyword">WHERE</span> O.orderkey <span class="operator">=</span> L.orderkey <span class="keyword">AND</span></span><br><span class="line">                 L.partkey <span class="operator">=</span> P.partkey <span class="keyword">AND</span></span><br><span class="line">                 P.mfgr <span class="operator">=</span><span class="string">&#x27;山西省阳泉市阀门厂&#x27;</span> <span class="keyword">AND</span> P.name <span class="operator">=</span> <span class="string">&#x27;方正服务器&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)查询没有订购过“山西省阳泉市阀门厂”制造的“方正服务器”的顾客</span></span><br><span class="line"><span class="keyword">SELECT</span> C.custkey,C.name</span><br><span class="line"><span class="keyword">FROM</span> Customer C</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders O,Lineitem L,Part P</span><br><span class="line">                  <span class="keyword">WHERE</span> C.custkey <span class="operator">=</span> O.custkey <span class="keyword">AND</span></span><br><span class="line">                        O.orderkey <span class="operator">=</span> L.orderkey <span class="keyword">AND</span></span><br><span class="line">                        L.partkey <span class="operator">=</span> P.partkey <span class="keyword">AND</span></span><br><span class="line">                        P.mfgr<span class="operator">=</span><span class="string">&#x27;山西省阳泉市阀门厂&#x27;</span> <span class="keyword">AND</span> P.name<span class="operator">=</span><span class="string">&#x27;方正服务器&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)查询至少订购过“高乌恩”购买过的全部零件的顾客姓名</span></span><br><span class="line"><span class="comment">-- 实不相瞒，这图是我为了交差P的。60000+的Customer，好几重循环，跑了半小时没跑完，顶不住了，就直接终止了。</span></span><br><span class="line"><span class="keyword">SELECT</span> CA.name</span><br><span class="line"><span class="keyword">FROM</span> Customer CA</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customer CB,Orders OB,Lineitem LB</span><br><span class="line">        <span class="keyword">WHERE</span> CB.custkey <span class="operator">=</span> OB.custkey <span class="keyword">AND</span></span><br><span class="line">        OB.orderkey <span class="operator">=</span> LB.orderkey <span class="keyword">AND</span></span><br><span class="line">        CB.name <span class="operator">=</span> <span class="string">&#x27;高乌恩&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">        <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders OC,Lineitem LC</span><br><span class="line">                        <span class="keyword">WHERE</span> CA.custkey <span class="operator">=</span> OC.custkey <span class="keyword">AND</span></span><br><span class="line">                        OC.orderkey <span class="operator">=</span> LC.orderkey <span class="keyword">AND</span></span><br><span class="line">                        LB.suppkey <span class="operator">=</span> LC.suppkey <span class="keyword">AND</span></span><br><span class="line">                        LB.partkey <span class="operator">=</span> LC.partkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)查询订单总数至少为2单的顾客中中国籍顾客信息</span></span><br><span class="line"><span class="keyword">SELECT</span> C.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer C,(<span class="keyword">SELECT</span> custkey</span><br><span class="line">                 <span class="keyword">FROM</span> Orders</span><br><span class="line">                 <span class="keyword">GROUP</span> <span class="keyword">BY</span> custkey</span><br><span class="line">                 <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>) B,Nation N</span><br><span class="line"><span class="keyword">WHERE</span> C.custkey <span class="operator">=</span> B.custkey <span class="keyword">AND</span></span><br><span class="line">C.nationkey <span class="operator">=</span> N.nationkey <span class="keyword">AND</span></span><br><span class="line">N.name <span class="operator">=</span> <span class="string">&#x27;中国&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)查询顾客“高存伟”和“高乌恩”都订购过的全部零件的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> PA.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer CA,Orders OA,Lineitem LA,Part PA</span><br><span class="line"><span class="keyword">WHERE</span> CA.custkey <span class="operator">=</span> OA.custkey <span class="keyword">AND</span></span><br><span class="line">OA.orderkey <span class="operator">=</span> LA.orderkey <span class="keyword">AND</span></span><br><span class="line">LA.partkey <span class="operator">=</span> PA.partkey <span class="keyword">AND</span></span><br><span class="line">CA.name<span class="operator">=</span><span class="string">&#x27;高存伟&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">PA.partkey <span class="keyword">IN</span> (<span class="keyword">SELECT</span> PB.partkey</span><br><span class="line"><span class="keyword">FROM</span> Customer CB,Orders OB,Lineitem LB,Part PB</span><br><span class="line">             <span class="keyword">WHERE</span> CB.custkey <span class="operator">=</span> OB.custkey <span class="keyword">AND</span></span><br><span class="line">OB.orderkey <span class="operator">=</span> LB.orderkey <span class="keyword">AND</span></span><br><span class="line">LB.partkey <span class="operator">=</span> PB.partkey <span class="keyword">AND</span></span><br><span class="line">CB.name<span class="operator">=</span><span class="string">&#x27;高乌恩&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)查询顾客“高存伟”和“高乌恩”订购的全部零件的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> P.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer C,Orders O,Lineitem L,Part P</span><br><span class="line"><span class="keyword">WHERE</span> C.custkey <span class="operator">=</span> O.custkey <span class="keyword">AND</span></span><br><span class="line">O.orderkey <span class="operator">=</span> L.orderkey <span class="keyword">AND</span></span><br><span class="line">L.partkey <span class="operator">=</span> P.partkey <span class="keyword">AND</span></span><br><span class="line">C.name<span class="operator">=</span><span class="string">&#x27;高存伟&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> P.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer C,Orders O,Lineitem L,Part P</span><br><span class="line"><span class="keyword">WHERE</span> C.custkey <span class="operator">=</span> O.custkey <span class="keyword">AND</span></span><br><span class="line">O.orderkey <span class="operator">=</span> L.orderkey <span class="keyword">AND</span></span><br><span class="line">L.partkey <span class="operator">=</span> P.partkey <span class="keyword">AND</span></span><br><span class="line">C.name<span class="operator">=</span><span class="string">&#x27;高乌恩&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (7)查询“高存伟”订购过而“高乌恩”没订购过的零件的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> PA.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer CA,Orders OA,Lineitem LA,Part PA</span><br><span class="line"><span class="keyword">WHERE</span> CA.custkey <span class="operator">=</span> OA.custkey <span class="keyword">AND</span></span><br><span class="line">OA.orderkey <span class="operator">=</span> LA.orderkey <span class="keyword">AND</span></span><br><span class="line">LA.partkey <span class="operator">=</span> PA.partkey <span class="keyword">AND</span></span><br><span class="line">CA.name<span class="operator">=</span><span class="string">&#x27;高存伟&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">PA.partkey <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> PB.partkey</span><br><span class="line"><span class="keyword">FROM</span> Customer CB,Orders OB,Lineitem LB,Part PB</span><br><span class="line">             <span class="keyword">WHERE</span> CB.custkey <span class="operator">=</span> OB.custkey <span class="keyword">AND</span></span><br><span class="line">OB.orderkey <span class="operator">=</span> LB.orderkey <span class="keyword">AND</span></span><br><span class="line">LB.partkey <span class="operator">=</span> PB.partkey <span class="keyword">AND</span></span><br><span class="line">CB.name<span class="operator">=</span><span class="string">&#x27;高乌恩&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/1-3-1.png" alt="1-3-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-2.png" alt="1-3-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-3.png" alt="1-3-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-4.png" alt="1-3-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-5.png" alt="1-3-5"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-6.png" alt="1-3-6"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-7.png" alt="1-3-7"></p><h2 id="实验2安全性语言实验"><a href="#实验2安全性语言实验" class="headerlink" title="实验2安全性语言实验"></a>实验2安全性语言实验</h2><h3 id="实验2-1自主存取控制实验"><a href="#实验2-1自主存取控制实验" class="headerlink" title="实验2.1自主存取控制实验"></a>实验2.1自主存取控制实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;David&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;Tom&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;Kathy&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> David,Tom,Kathy;</span><br><span class="line"><span class="keyword">DROP</span> ROLE PurchaseQueryRole,SaleQueryRole,CustomerQueryRole;</span><br><span class="line"><span class="comment">-- 创建角色并分配权限</span></span><br><span class="line"><span class="keyword">CREATE</span> ROLE PurchaseQueryRole,SaleQueryRole,CustomerQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Part <span class="keyword">TO</span> PurchaseQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Supplier <span class="keyword">TO</span> PurchaseQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> PartSupp <span class="keyword">TO</span> PurchaseQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Orders <span class="keyword">TO</span> SaleQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Lineitem <span class="keyword">TO</span> SaleQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Customer <span class="keyword">TO</span> CustomerQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Nation <span class="keyword">TO</span> CustomerQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Region <span class="keyword">TO</span> CustomerQueryRole;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给用户分配权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="string">&#x27;PurchaseQueryRole&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;David&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="string">&#x27;SaleQueryRole&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="string">&#x27;CustomerQueryRole&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;Kathy&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回收角色或用户的权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;CustomerQueryRole&#x27;</span>;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Region <span class="keyword">FROM</span> CustomerQueryRole;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;CustomerQueryRole&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 验证权限分配正确性</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;David&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;Kathy&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/2-1-1.png" alt="2-1-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/2-1-2.png" alt="2-1-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/2-1-3.png" alt="2-1-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/2-1-4.png" alt="2-1-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/2-1-5.png" alt="2-1-5"></p><h2 id="实验3完整性语言实验"><a href="#实验3完整性语言实验" class="headerlink" title="实验3完整性语言实验"></a>实验3完整性语言实验</h2><h3 id="实验3-1实体完整性实验"><a href="#实验3-1实体完整性实验" class="headerlink" title="实验3.1实体完整性实验"></a>实验3.1实体完整性实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line">(suppkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> address <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"> nationkey <span class="type">INTEGER</span>,</span><br><span class="line"> phone <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> acctbal <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">101</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line">(suppkey <span class="type">INTEGER</span>,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> address <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"> nationkey <span class="type">INTEGER</span>,</span><br><span class="line"> phone <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> acctbal <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">101</span>),</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> PK_supplier <span class="keyword">PRIMARY</span> KEY(suppkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line">(suppkey <span class="type">INTEGER</span>,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> address <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"> nationkey <span class="type">INTEGER</span>,</span><br><span class="line"> phone <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> acctbal <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">101</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> PK_supplier <span class="keyword">PRIMARY</span> KEY(suppkey);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PartSupp</span><br><span class="line">(partkey <span class="type">INTEGER</span>,</span><br><span class="line"> suppkey <span class="type">INTEGER</span>,</span><br><span class="line"> availqty <span class="type">INTEGER</span>,</span><br><span class="line"> supplycost <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">199</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(partkey,suppkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"> regionkey <span class="type">INTEGER</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (7)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Supplier(suppkey,name,address,nationkey,phone,acctbal,comment)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="string">&#x27;test1&#x27;</span>,<span class="string">&#x27;test1&#x27;</span>,<span class="number">101</span>,<span class="string">&#x27;12345678&#x27;</span>,<span class="number">0.0</span>,<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Supplier(suppkey,name,address,nationkey,phone,acctbal,comment)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="string">&#x27;test2&#x27;</span>,<span class="string">&#x27;test2&#x27;</span>,<span class="number">101</span>,<span class="string">&#x27;12345678&#x27;</span>,<span class="number">0.0</span>,<span class="string">&#x27;test2&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/3-1-1.png" alt="3-1-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-1-2.png" alt="3-1-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-1-3.png" alt="3-1-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-1-4.png" alt="3-1-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-1-5.png" alt="3-1-5"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-1-6.png" alt="3-1-6"></p><h3 id="实验3-2参照完整性实验"><a href="#实验3-2参照完整性实验" class="headerlink" title="实验3.2参照完整性实验"></a>实验3.2参照完整性实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Region</span><br><span class="line">(regionkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> regionkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Region(regionkey),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> regionkey <span class="type">INTEGER</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_Nation_regionkey <span class="keyword">FOREIGN</span> KEY(regionkey) <span class="keyword">REFERENCES</span> Region(regionkey);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PartSupp</span><br><span class="line">(partkey <span class="type">INTEGER</span>,</span><br><span class="line"> suppkey <span class="type">INTEGER</span>,</span><br><span class="line"> availqty <span class="type">INTEGER</span>,</span><br><span class="line"> supplycost <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">199</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(partkey,suppkey));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Lineitem</span><br><span class="line">(orderkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Orders(orderkey),</span><br><span class="line"> partkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Part(partkey),</span><br><span class="line"> suppkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Suppplier(suppkey),</span><br><span class="line"> linenumber <span class="type">INTEGER</span>,</span><br><span class="line"> quantity <span class="type">REAL</span>,</span><br><span class="line"> extendedprice <span class="type">REAL</span>,</span><br><span class="line"> discount <span class="type">REAL</span>,</span><br><span class="line"> tax <span class="type">REAL</span>,</span><br><span class="line"> returnflag <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> linestatus <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> shipdate <span class="type">DATE</span>,</span><br><span class="line"> commitdate <span class="type">DATE</span>,</span><br><span class="line"> receiptdate <span class="type">DATE</span>,</span><br><span class="line"> shipinstruct <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> shipmode <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">44</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(orderkey,linenumber),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY(partkey,suppkey) <span class="keyword">REFERENCES</span> PartSupp(partkey,suppkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> regionkey <span class="type">INTEGER</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>),</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> FK_Nation_regionkey <span class="keyword">FOREIGN</span> KEY(regionkey) <span class="keyword">REFERENCES</span> Region(regionkey)</span><br><span class="line"> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span> <span class="keyword">ON</span> UPDATE <span class="keyword">SET</span> <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> FK_Nation_regionkey;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Nation(nationkey,name,regionkey,comment)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;nation1&#x27;</span>,<span class="number">1001</span>,<span class="string">&#x27;comment1&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/3-2-1.png" alt="3-2-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-2-2.png" alt="3-2-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-2-3.png" alt="3-2-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-2-4.png" alt="3-2-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-2-5.png" alt="3-2-5"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-2-6.png" alt="3-2-6"></p><h3 id="实验3-3用户自定义完整性实验"><a href="#实验3-3用户自定义完整性实验" class="headerlink" title="实验3.3用户自定义完整性实验"></a>实验3.3用户自定义完整性实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Region</span><br><span class="line">(regionkey <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>) <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> regionkey <span class="type">INTEGER</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>),</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> FK_Nation_regionkey <span class="keyword">FOREIGN</span> KEY(regionkey) <span class="keyword">REFERENCES</span> Region(regionkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"> regionkey <span class="type">INTEGER</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Lineitem</span><br><span class="line">(orderkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Orders(orderkey),</span><br><span class="line"> partkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Part(partkey),</span><br><span class="line"> suppkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Suppplier(suppkey),</span><br><span class="line"> linenumber <span class="type">INTEGER</span>,</span><br><span class="line"> quantity <span class="type">REAL</span>,</span><br><span class="line"> extendedprice <span class="type">REAL</span>,</span><br><span class="line"> discount <span class="type">REAL</span>,</span><br><span class="line"> tax <span class="type">REAL</span>,</span><br><span class="line"> returnflag <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> linestatus <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> shipdate <span class="type">DATE</span>,</span><br><span class="line"> commitdate <span class="type">DATE</span>,</span><br><span class="line"> receiptdate <span class="type">DATE</span>,</span><br><span class="line"> shipinstruct <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> shipmode <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">44</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(orderkey,linenumber),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY(partkey,suppkey) <span class="keyword">REFERENCES</span> PartSupp(partkey,suppkey),</span><br><span class="line"> <span class="keyword">CHECK</span> (shipdate <span class="operator">&lt;</span> receiptdate),</span><br><span class="line"> <span class="keyword">CHECK</span> (returnflag <span class="keyword">IN</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;N&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,returnflag,shipdate,receiptdate)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;2015-01-05&#x27;</span>,<span class="string">&#x27;2015-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/3-3-1.png" alt="3-3-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-3-2.png" alt="3-3-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-3-3.png" alt="3-3-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-3-4.png" alt="3-3-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-3-5.png" alt="3-3-5"></p><h2 id="实验4触发器实验"><a href="#实验4触发器实验" class="headerlink" title="实验4触发器实验"></a>实验4触发器实验</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)AFTER触发器</span></span><br><span class="line"><span class="comment">-- UPDATE触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Price_UPDATE</span><br><span class="line">AFTER UPDATE <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">UPDATE Orders <span class="keyword">SET</span> totalprice <span class="operator">=</span> totalprice <span class="operator">+</span> </span><br><span class="line">NEW.extendedprice <span class="operator">*</span> (<span class="number">1</span><span class="operator">-</span>NEW.discount) <span class="operator">*</span> (<span class="number">1</span><span class="operator">+</span>NEW.tax) <span class="operator">-</span> </span><br><span class="line">OLD.extendedprice <span class="operator">*</span> (<span class="number">1</span><span class="operator">-</span>OLD.discount) <span class="operator">*</span> (<span class="number">1</span><span class="operator">+</span>OLD.tax)</span><br><span class="line"><span class="keyword">WHERE</span> orderkey <span class="operator">=</span> OLD.orderkey;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Price_INSERT</span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">UPDATE Orders <span class="keyword">SET</span> totalprice <span class="operator">=</span> totalprice <span class="operator">+</span></span><br><span class="line">NEW.extendedprice <span class="operator">*</span> (<span class="number">1</span><span class="operator">-</span>NEW.discount) <span class="operator">*</span> (<span class="number">1</span><span class="operator">+</span>NEW.tax)</span><br><span class="line"><span class="keyword">WHERE</span> orderkey <span class="operator">=</span> NEW.orderkey;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DELETE触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Price_DELETE</span><br><span class="line">AFTER <span class="keyword">DELETE</span> <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">UPDATE Orders <span class="keyword">SET</span> totalprice <span class="operator">=</span> totalprice <span class="operator">-</span> </span><br><span class="line">OLD.extendedprice <span class="operator">*</span> (<span class="number">1</span><span class="operator">-</span>OLD.discount) <span class="operator">*</span> (<span class="number">1</span><span class="operator">+</span>OLD.tax)</span><br><span class="line"><span class="keyword">WHERE</span> orderkey <span class="operator">=</span> OLD.orderkey;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 验证UPDATE触发器</span></span><br><span class="line"><span class="comment">-- 除了Orders和Lineitem，其他表格按实验一步骤导入数据。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders(orderkey,totalprice)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,extendedprice,discount,tax)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> totalprice</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> orderkey<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">UPDATE Lineitem <span class="keyword">SET</span> tax <span class="operator">=</span> tax<span class="operator">+</span><span class="number">0.005</span></span><br><span class="line"><span class="keyword">WHERE</span> orderkey <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> Linenumber <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> totalprice</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> orderkey<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/4-1.png" alt="4-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-2.png" alt="4-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-3.png" alt="4-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-4.png" alt="4-4"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (2)BEFORE触发器</span></span><br><span class="line"><span class="comment">-- UPDATE触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Quantity_UPDATE</span><br><span class="line">BEFORE UPDATE <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> L_valuediff <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> L_availqty <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">SET</span> L_valuediff <span class="operator">=</span> NEW.quantity <span class="operator">-</span> OLD.quantity;</span><br><span class="line"><span class="keyword">SELECT</span> availqty <span class="keyword">INTO</span> L_availqty</span><br><span class="line"><span class="keyword">FROM</span> PartSupp</span><br><span class="line"><span class="keyword">WHERE</span> partkey <span class="operator">=</span> NEW.partkey <span class="keyword">AND</span> suppkey <span class="operator">=</span> NEW.suppkey;</span><br><span class="line">IF (L_availqty <span class="operator">&gt;=</span> L_valuediff) <span class="keyword">THEN</span></span><br><span class="line">UPDATE PartSupp</span><br><span class="line"><span class="keyword">SET</span> availqty <span class="operator">=</span> availqty <span class="operator">-</span> L_valuediff</span><br><span class="line"><span class="keyword">WHERE</span> partkey <span class="operator">=</span> NEW.partkey <span class="keyword">AND</span> suppkey <span class="operator">=</span>NEW.suppkey;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Quantity_INSERT</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> L_valuediff <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> L_availqty <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">SET</span> L_valuediff <span class="operator">=</span> NEW.quantity;</span><br><span class="line"><span class="keyword">SELECT</span> availqty <span class="keyword">INTO</span> L_availqty</span><br><span class="line"><span class="keyword">FROM</span> PartSupp</span><br><span class="line"><span class="keyword">WHERE</span> partkey <span class="operator">=</span> NEW.partkey <span class="keyword">AND</span> suppkey <span class="operator">=</span> NEW.suppkey;</span><br><span class="line">IF (L_availqty <span class="operator">&gt;=</span> L_valuediff) <span class="keyword">THEN</span></span><br><span class="line">UPDATE PartSupp</span><br><span class="line"><span class="keyword">SET</span> availqty <span class="operator">=</span> availqty <span class="operator">-</span> L_valuediff</span><br><span class="line"><span class="keyword">WHERE</span> partkey <span class="operator">=</span> NEW.partkey <span class="keyword">AND</span> suppkey <span class="operator">=</span> NEW.suppkey;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DELETE触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Quantity_DELETE</span><br><span class="line">BEFORE <span class="keyword">DELETE</span> <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> L_valuediff <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> L_availqty <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">SET</span> L_valuediff <span class="operator">=</span> <span class="operator">-</span>OLD.quantity;</span><br><span class="line">UPDATE PartSupp</span><br><span class="line"><span class="keyword">SET</span> availqty <span class="operator">=</span> availqty <span class="operator">-</span> L_valuediff</span><br><span class="line"><span class="keyword">WHERE</span> partkey <span class="operator">=</span> OLD.partkey <span class="keyword">AND</span> suppkey <span class="operator">=</span>OLD.suppkey;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 验证UPDATE触发器 </span></span><br><span class="line"><span class="comment">-- 除了PartSupp和Lineitem，其他表格按实验一步骤导入数据。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PartSupp(partkey,suppkey,availqty)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,partkey,suppkey,quantity)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> L.partkey,L.suppkey,L.quantity,PS.availqty</span><br><span class="line"><span class="keyword">FROM</span> Lineitem L,PartSupp PS</span><br><span class="line"><span class="keyword">WHERE</span> L.partkey <span class="operator">=</span> PS.partkey <span class="keyword">AND</span> L.suppkey <span class="operator">=</span> ps.suppkey <span class="keyword">AND</span></span><br><span class="line">L.orderkey <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> L.linenumber <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">UPDATE Lineitem <span class="keyword">SET</span> quantity <span class="operator">=</span> quantity <span class="operator">+</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">WHERE</span> orderkey<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> Linenumber<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> L.partkey,L.suppkey,L.quantity,PS.availqty</span><br><span class="line"><span class="keyword">FROM</span> Lineitem L,PartSupp PS</span><br><span class="line"><span class="keyword">WHERE</span> L.partkey <span class="operator">=</span> PS.partkey <span class="keyword">AND</span> L.suppkey <span class="operator">=</span> ps.suppkey <span class="keyword">AND</span></span><br><span class="line">L.orderkey <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> L.linenumber <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/4-5.png" alt="4-5"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-6.png" alt="4-6"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-7.png" alt="4-7"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-8.png" alt="4-8"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (3)删除触发器</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Price_UPDATE;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/4-9.png" alt="4-9"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统概论》例程及习题（二）</title>
      <link href="/2020/05/18/db-hw5&amp;6/"/>
      <url>/2020/05/18/db-hw5&amp;6/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这次内容有书上第三章的几乎所有例程运行结果和三道习题的实验。为了纪念被老师惨无人道剥削的学习时光，再辛苦一点儿，全都放上来，说不定就能拯救日后同样痛苦的小老弟小老妹。</p><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(Sno<span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">Sname<span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">Ssex<span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">Sage<span class="type">SMALLINT</span>,</span><br><span class="line">Sdept<span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course</span><br><span class="line">(Cno<span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">Cname<span class="type">CHAR</span>(<span class="number">40</span>),</span><br><span class="line">Cpno<span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">Ccredit<span class="type">SMALLINT</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span>KEY (Cpno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(Sno<span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">Cno    <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">Grade<span class="type">SMALLINT</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (Sno,Cno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (Sno) <span class="keyword">REFERENCES</span> Student(Sno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (Cno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/create1.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/create2.png"></p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student (Sno,Sname,Ssex,Sage,Sdept)</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;李勇&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;CS&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;刘晨&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;CS&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215123&#x27;</span>,<span class="string">&#x27;王敏&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;MA&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215125&#x27;</span>,<span class="string">&#x27;张立&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course (Cno,Cname,Cpno,Ccredit)</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;数据处理&#x27;</span>,<span class="keyword">null</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="keyword">null</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;操作系统&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">        (<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;PASCAL语言&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;数据结构&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;信息系统&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC (Sno,Cno,Grade)</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">92</span>),</span><br><span class="line">        (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">85</span>),</span><br><span class="line">        (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">88</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">90</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">80</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/insert1.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/insert2.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/insert3.png"></p><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="单表查询-例3-16-3-48"><a href="#单表查询-例3-16-3-48" class="headerlink" title="单表查询(例3.16-3.48)"></a>单表查询(例3.16-3.48)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 16</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 17</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sno,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 18</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 19</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,<span class="number">2014</span><span class="operator">-</span>Sage</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 20</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,<span class="string">&#x27;Year of Birth:&#x27;</span>,<span class="number">2020</span><span class="operator">-</span>Sage,<span class="built_in">LOWER</span>(Sdept)</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 21</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno <span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 22</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 23</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 24</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade<span class="operator">&lt;</span><span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 25</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Sdept, Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 26</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Sdept, Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 27</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span> (<span class="string">&#x27;CS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 28</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;IS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>,<span class="string">&#x27;CS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 29</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">LIKE</span> <span class="string">&#x27;201215121&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 30</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Sno, Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 31</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;欧阳__&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 32</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;__阳%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 33</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Sno, Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 34</span></span><br><span class="line"><span class="keyword">SELECT</span> Cno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname <span class="keyword">LIKE</span> <span class="string">&#x27;DB\_Design&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;\ &#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 35</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname <span class="keyword">LIKE</span> <span class="string">&#x27;DB\_%i__&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;\ &#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 36</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 37</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 38</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 39</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, Grade</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Grade <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 40</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Sdept, Sage <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 41</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 42</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> Sno)</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 43</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 44</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 45</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(Ccredit)</span><br><span class="line"><span class="keyword">FROM</span> SC,Course</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215012&#x27;</span> <span class="keyword">AND</span> SC.Cno<span class="operator">=</span>Course.Cno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 46</span></span><br><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">COUNT</span>(Sno)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 47</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 48</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, <span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/16.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/17.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/18.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/19.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/20.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/21.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/22.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/23.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/24.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/25.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/26.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/27.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/28.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/29.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/30.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/31.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/32.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/33.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/34.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/35.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/36.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/37.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/38.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/39.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/40.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/41.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/42.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/43.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/44.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/45.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/46.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/47.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/48.png"></p><h3 id="连接查询-例3-49-3-54"><a href="#连接查询-例3-49-3-54" class="headerlink" title="连接查询(例3.49-3.54)"></a>连接查询(例3.49-3.54)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 49</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.<span class="operator">*</span>, SC.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno <span class="operator">=</span> SC.Sno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 50</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno <span class="operator">=</span> SC.Sno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 51</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno, Sname</span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span></span><br><span class="line">SC.Cno<span class="operator">=</span><span class="string">&#x27;2&#x27;</span> <span class="keyword">AND</span> SC.Grade<span class="operator">&gt;</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 52</span></span><br><span class="line"><span class="keyword">SELECT</span> FIRST.Cno, SECOND.Cpno</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">FIRST</span>, Course <span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">WHERE</span> FIRST.Cpno <span class="operator">=</span> SECOND.Cno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 53</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span></span><br><span class="line">(Student.Sno<span class="operator">=</span>SC.Sno);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 54</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno, Sname, Cname, Grade</span><br><span class="line"><span class="keyword">FROM</span> Student, SC, Course</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno <span class="operator">=</span> SC.Sno</span><br><span class="line"><span class="keyword">AND</span> SC.Cno <span class="operator">=</span> Course.Cno;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/49.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/50.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/51.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/52.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/53.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/54.png"></p><h3 id="嵌套查询-例3-55-3-63"><a href="#嵌套查询-例3-55-3-63" class="headerlink" title="嵌套查询(例3.55-3.63)"></a>嵌套查询(例3.55-3.63)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 55</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, Sname, Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname<span class="operator">=</span> <span class="string">&#x27;刘晨&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 56</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Cno</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname<span class="operator">=</span> <span class="string">&#x27;信息系统&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 57</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span> SC x</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="operator">&gt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC y</span><br><span class="line"><span class="keyword">WHERE</span> y.Sno<span class="operator">=</span>x.Sno);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 58</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> Sdept <span class="operator">&lt;&gt;</span> <span class="string">&#x27;CS&#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 59</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27; CS &#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> Sdept <span class="operator">&lt;&gt;</span> <span class="string">&#x27; CS &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 60</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span>Student.Sno <span class="keyword">AND</span> Cno<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 61</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span>Student.Sno <span class="keyword">AND</span> Cno<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 62</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> Student.Sno</span><br><span class="line"><span class="keyword">AND</span> Cno<span class="operator">=</span> Course.Cno));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 63</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC SCX</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC SCY</span><br><span class="line"><span class="keyword">WHERE</span> SCY.Sno <span class="operator">=</span> <span class="string">&#x27;201215122&#x27;</span> <span class="keyword">AND</span></span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC SCZ</span><br><span class="line"><span class="keyword">WHERE</span> SCZ.Sno<span class="operator">=</span>SCX.Sno <span class="keyword">AND</span></span><br><span class="line">SCZ.Cno<span class="operator">=</span>SCY.Cno));</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/55.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/55.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/57.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/58.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/59.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/60.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/61.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/62.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/63.png"></p><h3 id="集合查询-例3-64-3-68"><a href="#集合查询-例3-64-3-68" class="headerlink" title="集合查询(例3.64-3.68)"></a>集合查询(例3.64-3.68)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 64</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;=</span><span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 65</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 66</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span> <span class="keyword">AND</span> Sage<span class="operator">&lt;=</span><span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 67</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">AND</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 68</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span> <span class="keyword">AND</span> Sage<span class="operator">&gt;</span><span class="number">19</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/64.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/65.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/66.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/67.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/68.png"></p><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><h3 id="插入-例3-69-3-72"><a href="#插入-例3-69-3-72" class="headerlink" title="插入(例3.69-3.72)"></a>插入(例3.69-3.72)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 69</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student (Sno,Sname,Ssex,Sdept,Sage)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;201215128&#x27;</span>,<span class="string">&#x27;陈冬&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;IS&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 70</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;201215126&#x27;</span>,<span class="string">&#x27;张成民&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;CS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 71</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(Sno,Cno)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;201215128 &#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 72</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Dept_age</span><br><span class="line">(Sdept<span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line">Avg_age<span class="type">SMALLINT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Dept_age(Sdept,Avg_age)</span><br><span class="line"><span class="keyword">SELECT</span> Sdept,<span class="built_in">AVG</span>(Sage)</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sdept;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/69.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/70.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/71.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/72.png"></p><h3 id="修改-例3-73-3-75"><a href="#修改-例3-73-3-75" class="headerlink" title="修改(例3.73-3.75)"></a>修改(例3.73-3.75)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 73</span></span><br><span class="line">UPDATE Student</span><br><span class="line"><span class="keyword">SET</span> Sage<span class="operator">=</span><span class="number">22</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215121&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 74</span></span><br><span class="line">UPDATE Student</span><br><span class="line"><span class="keyword">SET</span> Sage<span class="operator">=</span> Sage<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 75</span></span><br><span class="line">UPDATE SC</span><br><span class="line"><span class="keyword">SET</span> Grade<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span> );</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/73-74.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/75.png"></p><h3 id="删除-例3-76-3-78"><a href="#删除-例3-76-3-78" class="headerlink" title="删除(例3.76-3.78)"></a>删除(例3.76-3.78)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 76</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> <span class="string">&#x27;201215128&#x27;</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> <span class="string">&#x27;201215128&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 77</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 78</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/76.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/77.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/78.png"></p><h2 id="空值的处理-例3-79-3-83"><a href="#空值的处理-例3-79-3-83" class="headerlink" title="空值的处理(例3.79-3.83)"></a>空值的处理(例3.79-3.83)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 79</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(Sno,Cno)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;201215126&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 80</span></span><br><span class="line">UPDATE Student</span><br><span class="line"><span class="keyword">SET</span> Sdept <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215200&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 81</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> Ssex <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> Sage <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> Sdept <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 82</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="operator">&lt;</span> <span class="number">60</span> <span class="keyword">AND</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 83</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">AND</span> (Grade<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">OR</span> Grade <span class="keyword">IS</span> <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/79.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/80.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/81.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/82.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/83.png"></p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="定义视图-例3-84-3-91"><a href="#定义视图-例3-84-3-91" class="headerlink" title="定义视图(例3.84-3.91)"></a>定义视图(例3.84-3.91)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 84</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 85</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 86</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S1(Sno,Sname,Grade)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span></span><br><span class="line">SC.Cno<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 87</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> IS_S1</span><br><span class="line"><span class="keyword">WHERE</span> Grade<span class="operator">&gt;=</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 88</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> BT_S(Sno,Sname,Sbirth)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,<span class="number">2020</span><span class="operator">-</span>Sage</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 89</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> S_G(Sno,Gavg)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 90</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> F_Student(F_Sno,name,sex,age,dept)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Ssex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 91</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> BT_S;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IS_S1 CASCADE;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/84.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/85.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/86.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/87.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/88.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/89.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/90.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/91.png"></p><h3 id="查询视图-例3-92-3-94"><a href="#查询视图-例3-92-3-94" class="headerlink" title="查询视图(例3.92-3.94)"></a>查询视图(例3.92-3.94)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 92</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 93</span></span><br><span class="line"><span class="keyword">SELECT</span> IS_Student.Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> IS_Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> IS_Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span> SC.Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 94</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S_G</span><br><span class="line"><span class="keyword">WHERE</span> Gavg<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/92.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/93.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/94.png"></p><h3 id="更新视图-例3-95-3-97"><a href="#更新视图-例3-95-3-97" class="headerlink" title="更新视图(例3.95-3.97)"></a>更新视图(例3.95-3.97)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 95</span></span><br><span class="line">UPDATE IS_Student</span><br><span class="line"><span class="keyword">SET</span> Sname<span class="operator">=</span> <span class="string">&#x27;刘辰&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> <span class="string">&#x27;201215122&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 96</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> IS_Student</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;201215129&#x27;</span>,<span class="string">&#x27;赵新&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 97</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215129&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/95.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/96.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/97.png"></p><h2 id="习题3-4"><a href="#习题3-4" class="headerlink" title="习题3.4"></a>习题3.4</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> S</span><br><span class="line">(SNO <span class="type">CHAR</span>(<span class="number">3</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">SNAME <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">STATUS <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">CITY <span class="type">CHAR</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> P</span><br><span class="line">(PNO <span class="type">CHAR</span>(<span class="number">3</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">PNAME <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">COLOR <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">WEIGHT <span class="type">SMALLINT</span>);</span><br><span class="line">     </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> J</span><br><span class="line">(JNO <span class="type">CHAR</span>(<span class="number">3</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">JNAME <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">CITY <span class="type">CHAR</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SPJ</span><br><span class="line">(SNO <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">PNO <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">JNO <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">QTY<span class="type">SMALLINT</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (SNO) <span class="keyword">REFERENCES</span> S(Sno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (PNO) <span class="keyword">REFERENCES</span> P(Pno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (JNO) <span class="keyword">REFERENCES</span> J(Jno));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S</span><br><span class="line"><span class="keyword">VALUES</span>  (<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;精益&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;盛锡&#x27;</span>,<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;S3&#x27;</span>,<span class="string">&#x27;东方红&#x27;</span>,<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;丰泰盛&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;为民&#x27;</span>,<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> P</span><br><span class="line"><span class="keyword">VALUES</span>  (<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;螺母&#x27;</span>,<span class="string">&#x27;红&#x27;</span>,<span class="number">12</span>),</span><br><span class="line">        (<span class="string">&#x27;P2&#x27;</span>,<span class="string">&#x27;螺栓&#x27;</span>,<span class="string">&#x27;绿&#x27;</span>,<span class="number">17</span>),</span><br><span class="line">        (<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;螺丝刀&#x27;</span>,<span class="string">&#x27;蓝&#x27;</span>,<span class="number">14</span>),</span><br><span class="line">        (<span class="string">&#x27;P4&#x27;</span>,<span class="string">&#x27;螺丝刀&#x27;</span>,<span class="string">&#x27;红&#x27;</span>,<span class="number">14</span>),</span><br><span class="line">        (<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;凸轮&#x27;</span>,<span class="string">&#x27;蓝&#x27;</span>,<span class="number">40</span>),</span><br><span class="line">        (<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;齿轮&#x27;</span>,<span class="string">&#x27;红&#x27;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> J</span><br><span class="line"><span class="keyword">VALUES</span>  (<span class="string">&#x27;J1&#x27;</span>,<span class="string">&#x27;三建&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J2&#x27;</span>,<span class="string">&#x27;一汽&#x27;</span>,<span class="string">&#x27;长春&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J3&#x27;</span>,<span class="string">&#x27;弹簧厂&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J4&#x27;</span>,<span class="string">&#x27;造船厂&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J5&#x27;</span>,<span class="string">&#x27;机车厂&#x27;</span>,<span class="string">&#x27;唐山&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J6&#x27;</span>,<span class="string">&#x27;无线电厂&#x27;</span>,<span class="string">&#x27;常州&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J7&#x27;</span>,<span class="string">&#x27;半导体厂&#x27;</span>,<span class="string">&#x27;南京&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ</span><br><span class="line"><span class="keyword">VALUES</span>  (<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J3&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">        (<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">700</span>),</span><br><span class="line">        (<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P2&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">500</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J5&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">        (<span class="string">&#x27;S3&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S3&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">        (<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J3&#x27;</span>,<span class="number">300</span>),</span><br><span class="line">        (<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P2&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">        (<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/4-1.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/4-2.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/4-3.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/4-4.png"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span> SPJ</span><br><span class="line"><span class="keyword">WHERE</span> JNO<span class="operator">=</span><span class="string">&#x27;J1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">SELECT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span> SPJ</span><br><span class="line"><span class="keyword">WHERE</span> JNO<span class="operator">=</span><span class="string">&#x27;J1&#x27;</span> <span class="keyword">AND</span> PNO<span class="operator">=</span><span class="string">&#x27;P1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">SELECT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span> SPJ</span><br><span class="line"><span class="keyword">WHERE</span> JNO<span class="operator">=</span><span class="string">&#x27;J1&#x27;</span> <span class="keyword">AND</span> PNO <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> PNO</span><br><span class="line"><span class="keyword">FROM</span> P</span><br><span class="line"><span class="keyword">WHERE</span> COLOR<span class="operator">=</span><span class="string">&#x27;红&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">SELECT</span> JNO</span><br><span class="line"><span class="keyword">FROM</span> J</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SPJ,S,P</span><br><span class="line"><span class="keyword">WHERE</span> SPJ.JNO<span class="operator">=</span>J.JNO <span class="keyword">AND</span></span><br><span class="line">SPJ.SNO<span class="operator">=</span>S.SNO <span class="keyword">AND</span></span><br><span class="line">SPJ.PNO<span class="operator">=</span>P.PNO <span class="keyword">AND</span></span><br><span class="line">S.CITY<span class="operator">=</span><span class="string">&#x27;天津&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">P.COLOR<span class="operator">=</span><span class="string">&#x27;红&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">SELECT</span> JNO</span><br><span class="line"><span class="keyword">FROM</span> J JX</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line"><span class="comment">/*如果不存在JX没用过的S1提供的任一零件，返回true*/</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SPJ SPJX</span><br><span class="line"><span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S1&#x27;</span> <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line"><span class="comment">/*如果工程JX有没用过S1提供的零件，返回true*/</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SPJ SPJY</span><br><span class="line"><span class="keyword">WHERE</span> SPJY.PNO<span class="operator">=</span>SPJX.PNO <span class="keyword">AND</span> SPJY.JNO<span class="operator">=</span>JX.JNO));</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/4-5.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/4-6.png"></p><h2 id="习题3-5"><a href="#习题3-5" class="headerlink" title="习题3.5"></a>习题3.5</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">SELECT</span> SNAME,CITY <span class="keyword">FROM</span> S;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">SELECT</span> PNAME,COLOR,WEIGHT <span class="keyword">FROM</span> P;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> JNO <span class="keyword">FROM</span> SPJ <span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">SELECT</span> P.PNAME,SPJ.QTY</span><br><span class="line"><span class="keyword">FROM</span> P,SPJ</span><br><span class="line"><span class="keyword">WHERE</span> P.PNO<span class="operator">=</span>SPJ.PNO <span class="keyword">AND</span> SPJ.JNO<span class="operator">=</span><span class="string">&#x27;J2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> PNO</span><br><span class="line"><span class="keyword">FROM</span> SPJ</span><br><span class="line"><span class="keyword">WHERE</span> SNO <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> S.CITY<span class="operator">=</span><span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">SELECT</span> JNAME</span><br><span class="line"><span class="keyword">FROM</span> J,SPJ,S</span><br><span class="line"><span class="keyword">WHERE</span> J.JNO<span class="operator">=</span>SPJ.JNO <span class="keyword">AND</span></span><br><span class="line">SPJ.SNO<span class="operator">=</span>S.SNO <span class="keyword">AND</span></span><br><span class="line">S.CITY<span class="operator">=</span><span class="string">&#x27;上海&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (7)</span></span><br><span class="line"><span class="keyword">SELECT</span> JNO</span><br><span class="line"><span class="keyword">FROM</span> J</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SPJ,S</span><br><span class="line"><span class="keyword">WHERE</span> SPJ.JNO<span class="operator">=</span>J.JNO <span class="keyword">AND</span></span><br><span class="line">SPJ.SNO<span class="operator">=</span>S.SNO <span class="keyword">AND</span></span><br><span class="line">S.CITY<span class="operator">=</span><span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (8)</span></span><br><span class="line">UPDATE P</span><br><span class="line"><span class="keyword">SET</span> COLOR<span class="operator">=</span><span class="string">&#x27;蓝&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> COLOR<span class="operator">=</span><span class="string">&#x27;红&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (9)</span></span><br><span class="line">UPDATE SPJ</span><br><span class="line"><span class="keyword">SET</span> SNO<span class="operator">=</span><span class="string">&#x27;S3&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S5&#x27;</span> <span class="keyword">AND</span> JNO<span class="operator">=</span><span class="string">&#x27;J4&#x27;</span> <span class="keyword">AND</span> PNO<span class="operator">=</span><span class="string">&#x27;P6&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (10)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> SPJ <span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S2&#x27;</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> S <span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (11)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P4&#x27;</span>,<span class="string">&#x27;J6&#x27;</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/5-1.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-2.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-3.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-4.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-5.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-6.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-7.png"></p><h2 id="习题3-9"><a href="#习题3-9" class="headerlink" title="习题3.9"></a>习题3.9</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_SPJ</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> SPJ.SNO,SPJ.PNO,SPJ.QTY</span><br><span class="line"><span class="keyword">FROM</span> SPJ,J</span><br><span class="line"><span class="keyword">WHERE</span> SPJ.JNO<span class="operator">=</span>J.JNO <span class="keyword">AND</span> J.JNAME<span class="operator">=</span><span class="string">&#x27;三建&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">SELECT</span> PNO,<span class="built_in">SUM</span>(QTY)</span><br><span class="line"><span class="keyword">FROM</span> V_SPJ</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> PNO;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">SELECT</span> PNO,QTY</span><br><span class="line"><span class="keyword">FROM</span> V_SPJ</span><br><span class="line"><span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S1&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/9-1.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/9-2.png"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统概论》例程及习题（一）</title>
      <link href="/2020/05/17/db-hw3&amp;4/"/>
      <url>/2020/05/17/db-hw3&amp;4/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>选修了学校的数据库课程，把作业和实验相关发上来做记录。</p><p>教材是《数据库系统概论》第五版，高等教育出版社，王珊等编著；《数据库系统概论实验指导与习题解析》，王珊编著。参考链接有<a href="https://chinadb.ruc.edu.cn/home/nav/7/sub/4/third/33">人大信息学院数据库系统概论资源</a>。</p><p>参考视频是<a href="https://www.bilibili.com/video/BV13J411J7Vu">数据库系统概论完整版(基础篇+高级篇+新技术篇)</a>和<a href="https://www.bilibili.com/video/BV1DE411n7fU">武沛齐7天MySQL魔鬼训练营（入门到高手）</a>。</p><p>MySQL版本是8.0.19。参考链接有<a href="https://dev.mysql.com/doc/refman/8.0/en/">MySQL 8.0 Reference Manual</a>和<a href="https://www.cnblogs.com/lhboke/p/12396592.html">Windows10下mysql 8.0.19 安装配置方法图文教程</a> 。我添加系统变量的方法和参考略有区别，直接在系统path中添加了mysql目录/bin。</p><p>这次内容是数据库安装和基本操作。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="https://img.lfalive.top/db-hw3%264/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E6%88%AA%E5%9B%BE1.png" alt="数据库安装截图1"></p><p><img src="https://img.lfalive.top/db-hw3%264/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E6%88%AA%E5%9B%BE2.png" alt="数据库安装截图2"></p><p><img src="https://img.lfalive.top/db-hw3%264/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E6%88%AA%E5%9B%BE3.png" alt="数据库安装截图3"></p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><h4 id="默认用户-root"><a href="#默认用户-root" class="headerlink" title="默认用户:root"></a>默认用户:root</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>username：你将创建的用户名。<br>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%。<br>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器。<br>例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;dog&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;192.168.1.101_&#x27;</span> IDENDIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="其它用户管理命令"><a href="#其它用户管理命令" class="headerlink" title="其它用户管理命令"></a>其它用户管理命令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;<span class="comment">-- 删除用户</span></span><br><span class="line">rename <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span> <span class="keyword">to</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;<span class="comment">-- 修改用户</span></span><br><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span> <span class="operator">=</span> Password(<span class="string">&#x27;新密码&#x27;</span>);  <span class="comment">-- 修改密码</span></span><br></pre></td></tr></table></figure><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> privileges <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure><p>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所有权限则使用ALL。<br>databasename：数据库名。<br>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.*。<br>例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> test.user <span class="keyword">TO</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> maindataplus.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="其他权限管理命令"><a href="#其他权限管理命令" class="headerlink" title="其他权限管理命令"></a>其他权限管理命令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;<span class="comment">-- 查看权限</span></span><br><span class="line"><span class="keyword">grant</span> 权限 <span class="keyword">on</span> 数据库.表 <span class="keyword">to</span> <span class="string">&#x27;用户&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;<span class="comment">-- 授权</span></span><br><span class="line"><span class="keyword">revoke</span> 权限 <span class="keyword">on</span> 数据库.表 <span class="keyword">from</span> <span class="string">&#x27;用户&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;<span class="comment">-- 取消权限</span></span><br></pre></td></tr></table></figure><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use 数据库名;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="实验截图"><a href="#实验截图" class="headerlink" title="实验截图"></a>实验截图</h3><p><img src="https://img.lfalive.top/db-hw3%264/1.png" alt="Snipaste_2020-05-05_10-52-26"></p><p><img src="https://img.lfalive.top/db-hw3%264/2.png"></p><h2 id="操作数据库以及数据表"><a href="#操作数据库以及数据表" class="headerlink" title="操作数据库以及数据表"></a>操作数据库以及数据表</h2><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名;</span><br><span class="line"><span class="keyword">create</span> database 数据库名 <span class="keyword">default</span> charset utf8;</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure><h3 id="操作数据表"><a href="#操作数据表" class="headerlink" title="操作数据表"></a>操作数据表</h3><h4 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名  类型  <span class="keyword">null</span>，</span><br><span class="line">    列名  类型  <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    列名  类型  <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">1</span>,</span><br><span class="line">    列名  类型  auto_increment <span class="keyword">primary</span> key</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- innodb支持事务，myisam不支持</span></span><br><span class="line"><span class="comment">-- auto_increment表示自增，一个表里只能有一个自增列。</span></span><br><span class="line"><span class="comment">-- primary key表示约束，不能重复且不能为空；加速查找。</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;<span class="comment">-- 清空表，但是自增id不重头开始。</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;<span class="comment">-- 清空表，自增id说重头开始。</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;<span class="comment">-- 删除表。</span></span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><h5 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h5><p>tinyint、int、bigint、float、double、decimal</p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>char(速度快)、varchar(节省空间)<br>创建表时，定长的列放前面较快。<br>text、mediumtext、longtext</p><h5 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h5><p>date、time、year、datetime、timestamp</p><h5 id="二进制数据"><a href="#二进制数据" class="headerlink" title="二进制数据"></a>二进制数据</h5><p>TinyBlob、Blob、MediumBlob、LongBlob</p><h5 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h5><p>enum(枚举类型)、set(集合类型)</p><h4 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表 (列名,列名...) <span class="keyword">values</span> (值,值,值...),(值,值,值...);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表 <span class="keyword">where</span> id＝<span class="number">1</span> <span class="keyword">and</span> name＝<span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改</span></span><br><span class="line">update 表 <span class="keyword">set</span> age<span class="operator">=</span><span class="number">18</span>;</span><br><span class="line">update 表 <span class="keyword">set</span> name ＝ <span class="string">&#x27;alex&#x27;</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>外键，一个特殊的索引，只能是指定内容，可以节省空间。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> color(</span><br><span class="line">nid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">char</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 在创建表的时候，必须先创建被关联表，否则会报错。</span></span><br><span class="line"><span class="comment">-- 插入数据的时候，也必须先插入被关联表的数据。</span></span><br><span class="line"><span class="comment">-- 删除数据的时候，先删员工表的数据，再删部门表的数据。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> fruit(</span><br><span class="line">nid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,</span><br><span class="line">smt <span class="type">char</span>(<span class="number">32</span>) <span class="keyword">null</span> ,</span><br><span class="line">color_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">constraint</span> fk_1 <span class="keyword">foreign</span> key (color_id) <span class="keyword">references</span> color(nid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实验截图-1"><a href="#实验截图-1" class="headerlink" title="实验截图"></a>实验截图</h3><p><img src="https://img.lfalive.top/db-hw3%264/3.png"></p><p><img src="https://img.lfalive.top/db-hw3%264/4.png"></p><p><img src="https://img.lfalive.top/db-hw3%264/5.png"></p><p><img src="https://img.lfalive.top/db-hw3%264/6.png"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用FFmpeg下载m3u8视频</title>
      <link href="/2020/05/17/ffmpeg-m3u8/"/>
      <url>/2020/05/17/ffmpeg-m3u8/</url>
      
        <content type="html"><![CDATA[<p>有时候嗷，想从网上下什么视频，却发现是m3u8格式，遂开始找资料，寻思怎么下载。这里又要用到<a href="https://ffmpeg.org/">FFmpeg</a>。</p><h2 id="m3u8"><a href="#m3u8" class="headerlink" title="m3u8"></a>m3u8</h2><p>M3U8文件是指UTF-8编码格式的M3U文件。M3U文件是记录了一个索引纯文本文件，打开它时播放软件并不是播放它，而是根据它的索引找到对应的音视频文件的网络地址进行在线播放。M3U8是一种常见的流媒体格式，主要以文件列表的形式存在，既支持直播又支持点播。</p><p>所以从页面上扒下来一个后缀名为m3u8的文件，并不是拥有了这个视频文件。</p><h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h2><p>FFmpeg可以运行音频和视频多种格式的录影、转换、流功能，属实神器。</p><p>如何安装FFmpeg，网上有很多教程了。主要就是配置环境变量吧，以我的为例。</p><p><img src="https://img.lfalive.top/ffmpeg-m3u8/1.png"></p><p>配置好之后就可以在控制台中尽情把玩它了。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>我用的是chrome，直接网页F12，选择network再刷新一下，在加载的文件里可以找到一个后缀名为m3u8的文件，那就是我们要找的了。右键复制其地址。</p><p><img src="https://img.lfalive.top/ffmpeg-m3u8/2.png"></p><p><img src="https://img.lfalive.top/ffmpeg-m3u8/3.png"></p><p>然后打开cmd，命令如下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg.exe -i aaaa.m3u8 -c copy -bsf:a aac_adtstoasc -movflags +faststart bbb.mp4</span><br></pre></td></tr></table></figure><p>其中<code>aaaa.m3u8</code>是你刚刚复制的链接，<code>bbb.mp4</code>是自定义所保存的视频文件名。</p><p><img src="https://img.lfalive.top/ffmpeg-m3u8/4.png"></p><p>视频保存的目录就是cmd（我这里用的git bash）目前所处的目录，当然也可以对命令稍作修改来指定其他目录。</p><p><img src="https://img.lfalive.top/ffmpeg-m3u8/5.png"></p><p>下载完成，查看文件，和控制台显示的视频文件信息一样，ok。</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>True Detective S3</title>
      <link href="/2019/10/08/TrueDetectiveS3/"/>
      <url>/2019/10/08/TrueDetectiveS3/</url>
      
        <content type="html"><![CDATA[<p>第三季又回到了第一季的多时间线叙事，但是跨度更大了。主角从前两季的全白，变成了黑人，虽然这不是故事的核心，但仍然作为一个重要特质伴随主角。<br>附上三季的宣传语，耐人寻味。</p><blockquote><p>第一季，“当你触碰黑暗，黑暗亦会侵蚀你（Touch Darkness and Darkness Touches You Back）”<br>第二季，“我们只配活在这样的世界（We Got the World We Deserve）”<br>第三季，“时间带走一切，只留下真相（Time Takes Everything but the Truth）”</p></blockquote><p>可以看出，时间是这一季的一个重要因素。这个主角韦恩牵挂一生的案子花了他近50年，三条时间线，一次次结案又推翻彻查。</p><p>至于案子本身，一开始搞得跟真的一样，儿童、宗教、种族、家庭伦理等，什么元素都有了，总是让我想起第一季。但是随着剧情的发展，故事走向越来越让人摸不着头脑。最后的最后，我心想这不过就是故弄玄虚，其实案子本身并不复杂啊。 </p><p>后来看了他人的影评，我才get到，这才是“真探”。我对案子、剧情的重视和失望，倒是让我忘了剧名，忘了它应该讲什么。在案情推进的同时，两个主角的形象塑造也在进行，他们的思想、言行的变化，以及迥异的人生经历，才是值得回味的地方。韦恩，因为一个案子，婚后和妻子关系并不好，甚至后来和女儿决裂。嗯这么想，有味道了，回头看看所有人物的变化，他们的经历，那么真实那么吸引人啊。</p><p><img src="https://img.lfalive.top/TrueDetectiveS3/1.jpeg"></p><p>第三季依然好评，主角配角的各自人生轨迹和内心冲突都很精彩，手法细腻，三线叙事用得炉火纯青，悬疑感和节奏感也到位，摄影配乐依然高水准。  </p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真探 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>you-get</title>
      <link href="/2019/08/08/youget/"/>
      <url>/2019/08/08/youget/</url>
      
        <content type="html"><![CDATA[<p>You-Get is a tiny command-line utility to download media contents (videos, audios, images) from the Web, in case there is no other handy way to do it.  </p><p><a href="https://github.com/soimort/you-get">项目地址</a>  </p><p>Python + you-get + FFmpeg = Beautiful Life</p><p><img src="https://img.lfalive.top/youget/cover.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记</title>
      <link href="/2019/07/29/LearnPython/"/>
      <url>/2019/07/29/LearnPython/</url>
      
        <content type="html"><![CDATA[<p>参考<a href="https://www.liaoxuefeng.com/wiki/101695966360240">廖雪峰Python教程</a>。</p><p>对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x10的9次方就是<code>1.23e9</code>，或者<code>12.3e8</code>，<code>0.000012</code>可以写成<code>1.2e-5</code>，等等。  </p><p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>,用转义字符<code>\</code>来标识,转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>。Python还允许用<code>r&#39;&#39;</code>表示’’内部的字符串默认不转义。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">r&#x27;\\\t\\&#x27;</span>)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure><p>Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;line1</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line2</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line3&#x27;&#x27;&#x27;</span>)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure><p>一个布尔值只有<code>True</code>、<code>False</code>两种值，布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。注意大小写敏感。</p><p>空值是Python里一个特殊的值，用<code>None</code>表示。</p><p><code>/</code>除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数。还有一种除法是<code>//</code>，称为地板除,只取结果的整数部分。</p><p>Python的整数没有大小限制。Python的浮点数也没有大小限制，但是超出一定范围就直接表示为<code>inf</code>（无限大）。</p><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p><p>Python3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言。<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符。还可以用十六进制写字符串。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;\u4e2d\u6587&#x27;</span></span><br><span class="line"><span class="string">&#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure><p>Python对bytes类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">b&#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure><p>Unicode表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code>。反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法。如果bytes中只有一小部分无效的字节，可以传入errors=’ignore’忽略错误的字节。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;ABC&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;ABC&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;ABC&#x27;</span>.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;ABC&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;中文&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;中&#x27;</span></span><br></pre></td></tr></table></figure><p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数。</p><p>在操作字符串时，我们经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用<code>UTF-8</code>编码对str和bytes进行转换。</p><p>当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p><code>%</code>运算符就是用来格式化字符串的。</p><table><thead><tr><th align="center">占位符</th><th align="center">替换内容</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">整数</td></tr><tr><td align="center">%f</td><td align="center">浮点数</td></tr><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数</td></tr></tbody></table><p>格式化整数和浮点数还可以指定是否补0和整数与小数的位数。转义：用<code>%%</code>来表示一个<code>%</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%2d-%02d&#x27;</span> % (<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line"><span class="number">3</span>-01</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%.2f&#x27;</span> % <span class="number">3.1415926</span>)</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure><p>用<code>len()</code>函数可以获得list元素的个数。可以用索引来访问list中每一个位置的元素，索引是从0开始的。如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素。以此类推，可以获取倒数第2个、倒数第3个。<code>append()</code>:往list中追加元素到末尾。<code>pop()</code>:删除list末尾的元素,要删除指定位置的元素，用<code>pop(i)</code>方法，其中i是索引位置。<code>insert(1, &#39;Jack&#39;)</code>:把元素插入到指定的位置。把某个元素替换成别的元素，<code>list[1] = &#39;Jack&#39;</code>:可以直接赋值给对应的索引位置。list里面的元素的数据类型也可以不同。list元素也可以是另一个list，类似多维数组。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classmates = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br></pre></td></tr></table></figure><p>tuple和list非常类似，但是tuple一旦初始化就不能修改。只有1个元素的tuple定义时必须加一个逗号<code>,</code>,来消除歧义。Python在显示只有1个元素的tuple时，也会加一个逗号<code>,</code>，以免你误解成数学计算意义上的括号。  </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p>“可变的”tuple：tuple的每个元素，指向永远不变。即指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&#x27;Y&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>])</span><br></pre></td></tr></table></figure><p>条件判断语句的形式如下，注意<code>:</code>，<code>elif</code>是<code>else if</code>的缩写。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure><p><code>input()</code>返回的数据类型是<code>str</code>，<code>str</code>不能直接和整数比较，必须先把<code>str</code>转换成整数。Python提供了<code>int()</code>函数。<code>int()</code>函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00后&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Python提供一个<code>range()</code>函数，可以生成一个整数序列，再通过<code>list()</code>函数可以转换为<code>list</code>。比如<code>range(5)</code>生成的序列是从0开始小于5的整数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>可使用<code>for…in</code>循环求和，注意冒号。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>循环还有<code>while</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + n</span><br><span class="line">    n -= <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p><code>break</code>的作用是提前结束循环,也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。死循环时可以用<code>Ctrl+C</code>退出程序，或者强制结束Python进程。</p><p>用Python写一个dict如下（key-value存储方式），key不存在，dict就会报错。可以通过<code>in</code>或者dict提供的<code>get()</code>方法判断key是否存在。要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除。dict是用空间来换取时间的一种方法，dict的key必须是不可变对象，因为内部使用哈希算法。 <code>list</code>是可变的，就不能作为key。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;Michael&#x27;</span>]</span><br><span class="line"><span class="number">95</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;Thomas&#x27;</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line"><span class="number">75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br></pre></td></tr></table></figure><p>set和dict类似，但在set中，没有重复的key。要创建一个set，需要提供一个list作为输入集合。通过<code>add(key)</code>方法可以添加元素，通过<code>remove(key)</code>方法删除元素。两个set可以做数学意义上的交集、并集等操作。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。使用key-value存储结构的dict在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串。</p><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">abs</span> <span class="comment"># 变量a指向abs函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(-<span class="number">1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。<strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span>(<span class="params">L=[]</span>):</span></span><br><span class="line">    L.append(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><p>可变参数：定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc()</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果已经有一个list或者tuple，要调用一个可变参数，Python允许你在list或tuple前面加一个<code>*</code>号，把list或tuple的元素变成可变参数传进去。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(*nums)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure><p><code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。</p><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><code>**extra</code>表示把<code>extra</code>这个dict的所有key-value用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个dict，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p><p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *, city, job</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(name, age, city, job)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=<span class="string">&#x27;Beijing&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">Jack <span class="number">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure><p>在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。比如定义一个函数，包含上述若干种参数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">a, b, c=<span class="number">0</span>, *args, **kw</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;args =&#x27;</span>, args, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">a, b, c=<span class="number">0</span>, *, d, **kw</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;d =&#x27;</span>, d, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br></pre></td></tr></table></figure><p>在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。</p><p><strong>小结</strong>  </p><p>要注意定义可变参数和关键字参数的语法：</p><p><code>*args</code>是可变参数，<code>args</code>接收的是一个<code>tuple</code>;</p><p><code>**kw</code>是关键字参数，<code>kw</code>接收的是一个<code>dict</code>。</p><p>以及调用函数时如何传入可变参数和关键字参数的语法：</p><p>可变参数既可以直接传入：<code>func(1,2,3)</code>，又可以先组装<code>list</code>或<code>tuple</code>，再通过<code>*args</code>传入：<code>func(*(1,2,3))</code>;</p><p>关键字参数既可以直接传入：<code>func(a=1,b=2)</code>，又可以先组装<code>dict</code>，再通过<code>**kw</code>传入：<code>func(**&#123;&#39;a&#39;:1,&#39;b&#39;:2&#125;)</code>。</p><p>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</p><p>命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。</p><p>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符<code>*</code>，否则定义的将是位置参数。</p><p><strong>未完待续……</strong></p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio及Kotlin学习笔记</title>
      <link href="/2019/06/29/LearnKotlin/"/>
      <url>/2019/06/29/LearnKotlin/</url>
      
        <content type="html"><![CDATA[<h2 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h2><p>Kotlin从零到精通 Android开发——欧阳燊  </p><p>2018年4月第一版 清华大学出版社  </p><p>书附录源码<a href="https://github.com/aqi00/kotlin">github链接</a> </p><p>资源下载和内容勘误<a href="https://blog.csdn.net/aqi00/article/details/80731717">CSDN链接</a></p><p>书是在学校图书馆借的</p><h2 id="20190628"><a href="#20190628" class="headerlink" title="20190628"></a>20190628</h2><p>第一章搭建Kotlin开发环境，安装过程基本和书上一致。安装AS的时候可以选择不安装virtual device，暂时都是在用自己的手机调试，没有虚拟设备需求。</p><p>安装SDK很方便，也自带了书中提到的Gradle插件。</p><p>Anko库配置的那一部分没有实现，猜测是因为我没有装Jetbrains的东西，不过暂时也没影响。</p><p>对xml布局有了一定了解，好像VB啊……坑的地方就是用可视化工具design出来的布局和实际run起来的布局很多不同，几乎全崩，还得老老实实写xml……</p><p>第二章数据类型，看了基本数据类型及其转换，Nothing Special。</p><h2 id="20190629"><a href="#20190629" class="headerlink" title="20190629"></a>20190629</h2><p>继续第二章数据类型，关于数组的定义和基本方法有所了解。</p><p>插曲：顺手搜了一手怎么打包apk给别人用。</p><p>关于字符串，和基本类型的转换很方便，其中字符串的toBoolean方法只能转换字符串“true”和“false”。</p><p>数组常用的方法有<code>indexOf</code>,<code>substring</code>,<code>replace</code>,<code>split</code>等，其中<code>split</code>方法的结果用<code>List&lt;String&gt;</code>来存。用这几种基本方法可以完成很多操作。（越看越像VB……</p><p>Kotlin中，直接在字符串中加入<code>$变量名</code>即可表示此处引用该变量的值。需要注意的是，这个符号在markdown里看来也是一个神奇的符号，写这一段的时候就乱码了好几次……真正需要注意的是，符号$后面跟变量名，系统会自动匹配最长的变量名；如果在取值之前还要先运算，则需用大括号把运算表达式给括起来；算了不抄书了截个图算了……</p><p><img src="https://img.lfalive.top/LearnKotlin/1.jpg"></p><h2 id="20190630"><a href="#20190630" class="headerlink" title="20190630"></a>20190630</h2><p>继续第二章，容器：集合Set，队列List，映射Map。莫名想起了算法竞赛的时候，使用集合、队列和映射的时候。</p><p>对于变量，val表示该变量不可更改，var表示该变量可更改。容器默认为只读，需要允许修改，就加上<code>Mutable</code> 前缀。所以有<code>MutableSet</code>，<code>MutableList</code>，<code>MutableMap</code>。三者有共同的方法<code>isEmpty</code>，<code>isNotEmpty</code>，<code>clear</code>，<code>contains</code>，<code>interator</code>，<code>count</code>。</p><table><thead><tr><th align="center">容器名称</th><th align="center">初始化方法</th></tr></thead><tbody><tr><td align="center">Set</td><td align="center">setOf</td></tr><tr><td align="center">MutableSet</td><td align="center">mutableSetOf</td></tr><tr><td align="center">List</td><td align="center">listOf</td></tr><tr><td align="center">MutableList</td><td align="center">mutableListOf</td></tr><tr><td align="center">Map</td><td align="center">mapOf</td></tr><tr><td align="center">MutableMap</td><td align="center">mutableMapOf</td></tr></tbody></table><p>集合的遍历，for-in遍历、迭代器遍历、forEach遍历。</p><p>其中迭代器遍历使用得带器的hasNext方法判断是否存在下一个节点,用next方法获得下一个节点的元素。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">r = goodsMutSet.iterator()</span><br><span class="line">    <span class="comment">//如果迭代器还存在下一个节点，则继续取出下一个节点的记录</span></span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;   </span><br><span class="line">    <span class="keyword">val</span> item = iterator.next()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>forEach遍历内部使用it指代每条记录。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">goodsMutSet.forEach &#123; desc = <span class="string">&quot;<span class="subst">$&#123;desc&#125;</span>名称：<span class="subst">$&#123;it&#125;</span>\n&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>集合用得不多，主要用List和Map吧。</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>MutableList的add方法把元素加到队尾，set元素修改指定位置的元素，removeAt方法允许删除指定位置的元素。遍历方法和set相同，还多了一种按元素下标循环遍历的方式。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//indices是队列的下标数组。如果队列大小为10，则下标数组的取值为0到9</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> goodsMutList.indices) &#123;</span><br><span class="line"><span class="keyword">val</span> item = goodsMutList[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还多了排序方法sortB:   </p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sortBy表示升序排列，后面跟的是排序条件</span></span><br><span class="line">goodsMutList.sortBy &#123; it.length &#125;</span><br><span class="line"><span class="comment">//sortByDescending表示降序排列，后面跟的是排序条件</span></span><br><span class="line">goodsMutList.sortByDescending &#123; it.length &#125;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>常用方法<code>containsKey</code>，<code>containsValue</code>，<code>put</code>(添加元素)，<code>remove</code>(通过键名来删除元素)。</p><p>初始化时，两种方法。一是<code>Pair(键名,键值)</code>，二是<code>键名 to 键值</code>。</p><p>遍历依旧三种方法，注意的是要访问元素的key属性和value属性获得键名或者键值。比如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> iterator = goodsMutMap.iterator()</span><br><span class="line">    <span class="comment">//如果迭代器还存在下一个节点，则继续取出下一个节点的记录</span></span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">val</span> item = iterator.next()</span><br><span class="line">        desc = <span class="string">&quot;<span class="subst">$&#123;desc&#125;</span>厂家：<span class="subst">$&#123;item.key&#125;</span>，名称：<span class="subst">$&#123;item.value&#125;</span>\n&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>forEach内部使用key指代每条记录的键，使用value指代每条记录的值。  </p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">goodsMutMap.forEach &#123; key, value -&gt; desc = <span class="string">&quot;<span class="subst">$&#123;desc&#125;</span>厂家：<span class="subst">$&#123;key&#125;</span>，名称：<span class="subst">$&#123;value&#125;</span>\n&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>第二章结束。</p><h2 id="20190702"><a href="#20190702" class="headerlink" title="20190702"></a>20190702</h2><p>第三章，控制语句。</p><h3 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h3><p>条件分支最简单，包括两路分支以及多路分支。两路分支的时候，因为if语句允许有返回值，能直接简化为类似于三目运算符的形式。</p><p>多路分支中，when语句必须带上else，when/else也允许有返回值。牛逼的是，不用break，处理完一次就直接跳出。还可以引入变量或者具体的运算表达式进行判断，甚至可以是个范围：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">tv_answer.text = <span class="keyword">when</span> (count) &#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span> -&gt; <span class="string">&quot;凉风有信的谜底是“讽”&quot;</span></span><br><span class="line">    <span class="keyword">in</span> <span class="number">13.</span><span class="number">.19</span> -&gt; <span class="string">&quot;秋月无边的谜底是“二”&quot;</span></span><br><span class="line">    !<span class="keyword">in</span> <span class="number">6.</span><span class="number">.10</span> -&gt; <span class="string">&quot;当里的当，少侠你来猜猜&quot;</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="string">&quot;好诗，这真是一首好诗&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更牛逼的是，还可以进行类型判断……</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> countType:Number</span><br><span class="line"><span class="comment">//Long、Double、Float都由Number派生而来</span></span><br><span class="line">countType = <span class="keyword">when</span> (count) &#123;</span><br><span class="line">    <span class="number">0</span> -&gt; count.toLong()</span><br><span class="line">    <span class="number">1</span> -&gt; count.toDouble()</span><br><span class="line">    <span class="keyword">else</span> -&gt; count.toFloat()</span><br><span class="line">&#125;</span><br><span class="line">count = ( count + <span class="number">1</span> ) % <span class="number">3</span>;</span><br><span class="line">tv_answer.text = <span class="keyword">when</span> (countType) &#123;</span><br><span class="line"><span class="keyword">is</span> <span class="built_in">Long</span> -&gt; <span class="string">&quot;此恨绵绵无绝期&quot;</span></span><br><span class="line"><span class="keyword">is</span> <span class="built_in">Double</span> -&gt; <span class="string">&quot;树上的鸟儿成双对&quot;</span></span><br><span class="line"><span class="keyword">else</span> -&gt; <span class="string">&quot;门泊东吴万里船&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>遍历循环有for-in循环和利用indices下标数组的循环。下标数组用法同List。</p><p>关于条件循环，kotlin在for-in循环中提供了until、step、downTo等关键字，但还是很乱很麻烦，所以更灵活的方案还是用do/while进行条件循环。</p><p>循环中可以用continue和break。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发现该行是空串或者空格串，则忽略该行</span></span><br><span class="line">    <span class="keyword">if</span> (poem2Array[pos].isNullOrBlank())</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>我惊呆了，给循环加上@标记，想break几层循环就break几层……</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> is_found = <span class="literal">false</span></span><br><span class="line"><span class="comment">//给外层循环加个名叫outside的标记</span></span><br><span class="line"><span class="symbol">outside@</span> <span class="keyword">while</span> (i &lt; poemArray.size) &#123;</span><br><span class="line">    <span class="keyword">var</span> j:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> item = poemArray[i];</span><br><span class="line">    <span class="keyword">while</span> ( j &lt; item.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item[j] == <span class="string">&#x27;一&#x27;</span>) &#123;</span><br><span class="line">            is_found = <span class="literal">true</span></span><br><span class="line">            <span class="comment">//发现情况，直接跳出outside循环</span></span><br><span class="line">            <span class="keyword">break</span><span class="symbol">@outside</span></span><br><span class="line">        &#125;</span><br><span class="line">        j++</span><br><span class="line">    &#125;</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20190704"><a href="#20190704" class="headerlink" title="20190704"></a>20190704</h2><h3 id="空安全"><a href="#空安全" class="headerlink" title="空安全"></a>空安全</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//strA.isNullOrEmpty() //非空串与可空串均可调用</span></span><br><span class="line"><span class="comment">//strA.isNullOrBlank() //非空串与可空串均可调用</span></span><br><span class="line"><span class="comment">//strA.isEmpty() //只有非空串可调用</span></span><br><span class="line"><span class="comment">//strA.isBlank() //只有非空串可调用</span></span><br><span class="line"><span class="comment">//strA.isNotEmpty() //只有非空串可调用</span></span><br><span class="line"><span class="comment">//strA.isNotBlank() //只有非空串可调用</span></span><br></pre></td></tr></table></figure><p>区别是全为空格的串算作Blank而不算Empty。  </p><p>声明可空字符串，加个问号。获取可空串的length要注意避免空指针，Kotlin引入了几种标记。    </p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> strCanNull:String?</span><br><span class="line">length = <span class="keyword">if</span> (strCanNull!=<span class="literal">null</span>) strCanNull.length <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//?.表示对象为空时直接返回null，所以返回值的变量必须被声明为可空类型</span></span><br><span class="line"><span class="keyword">var</span> length_null:<span class="built_in">Int</span>? = strB?.length</span><br><span class="line"></span><br><span class="line"><span class="comment">//?:表示为空时就返回右边的值，即(x!=null)?x.**:y</span></span><br><span class="line">length = strB?.length?: -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//!!表示不做非空判断，强制执行后面的表达式，如果对象为空就会扔出空异常</span></span><br><span class="line"><span class="comment">//所以只有在确保为非空时，才能使用!!</span></span><br><span class="line">length = strB!!.length</span><br></pre></td></tr></table></figure><h3 id="等式判断"><a href="#等式判断" class="headerlink" title="等式判断"></a>等式判断</h3><p>导入样例代码build时，提醒<code>Unresolved reference: Date()</code>，怀疑是anko的问题，于是配置好了anko。然后发现还是不行，搞了半天<code>import java.util.*</code>，就OK了。  </p><p>特点：字符串也可用<code>==</code>和<code>!=</code>来判断相等否（结构相等）。还有另一种更严格的判断是引用相等：意思是除了值相等以外，还要求引用的地址（即储存地址）相等，表达式用<code>===</code>和<code>！==</code>。  </p><p>类型判断:<code>is</code>,<code>!is</code>。检验数组中是否存在某个元素:<code>in</code>,<code>!in</code>。  </p><p>第三章结束。</p><h2 id="20190706"><a href="#20190706" class="headerlink" title="20190706"></a>20190706</h2><p>第四章——函数运用</p><h3 id="函数基本方法"><a href="#函数基本方法" class="headerlink" title="函数基本方法"></a>函数基本方法</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>override在同一行表达重载操作。kotlin默认函数就是公开的，所以省略了关键词”public”。函数若无返回参数，则不用特别说明。关键词”fun”表示函数定义。声明输入参数用“变量名称：变量类型”格式，变量支持空安全机制。</p><p>函数声明返回值用<code>fun main()：Int</code>这种格式，即使不声明，也会有一个Unit类型的对象返回，可直接省略Unit声明。这只是为了让函数定义完全符合变量定义的形式，若需要具体的输入参数，则一样需要在函数里用return关键字来返回参数值。</p><p><strong>默认参数</strong>：在声明输入参数时在其后面加上等号及其默认值。</p><p><strong>命名参数</strong>：给指定的参数赋值。如 <code>getFourBigDefault(second=&quot;活字印刷&quot;)</code>。</p><p><strong>可变参数</strong>：声明参数时用<code>vararg otherArray: String?</code>，<code>vararg</code>表示其后的参数个数不确定，可变参数当成一个数组来解析。So，可以实现可变的数组参数，声明时也要加上<code>vararg</code>前缀，调用时要注意：可输入多个数组变量，每个数组都使用arrayOf定义。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getFourBigArray</span><span class="params">(<span class="keyword">vararg</span> otherArray: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>:String &#123;</span><br><span class="line">        <span class="keyword">var</span> answer:String = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment">//先遍历每个数组</span></span><br><span class="line">        <span class="keyword">for</span> (array <span class="keyword">in</span> otherArray) &#123;</span><br><span class="line">            <span class="comment">//再遍历某个数组中的所有元素</span></span><br><span class="line">            <span class="keyword">for</span> (item <span class="keyword">in</span> array) &#123;</span><br><span class="line">                answer = <span class="string">&quot;<span class="variable">$answer</span>，<span class="variable">$item</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="20190710"><a href="#20190710" class="headerlink" title="20190710"></a>20190710</h2><p>先整理一下之前搞的关于打包的技巧，参考了**<a href="https://blog.csdn.net/swer0808/article/details/78999949">这篇博客</a>**。 </p><p>在app的build.gradle中加了以下代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//release版本输出包名自动追加版本号和版本名称</span></span><br><span class="line">applicationVariants.all &#123;</span><br><span class="line">    variant -&gt; variant.outputs.all &#123;</span><br><span class="line">        <span class="comment">//只处理生产版本</span></span><br><span class="line">        <span class="keyword">if</span> (buildType.name == <span class="string">&#x27;release&#x27;</span>) &#123;</span><br><span class="line">            def createTime = <span class="keyword">new</span> Date().format(<span class="string">&quot;YYYY-MM-dd&quot;</span>, TimeZone.getTimeZone(<span class="string">&quot;GMT+08:00&quot;</span>))</span><br><span class="line">            <span class="comment">// app包名称</span></span><br><span class="line">            outputFileName = <span class="string">&quot;app_v&quot;</span> + defaultConfig.versionName + <span class="string">&quot;_&quot;</span> + createTime + <span class="string">&quot;_&quot;</span> + buildType.name + <span class="string">&quot;.apk&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="几种特殊函数"><a href="#几种特殊函数" class="headerlink" title="几种特殊函数"></a>几种特殊函数</h3><p>注：Kotlin允许定义全局函数，即函数可在单独的kt文件中定义，然后其他地方也能直接调用。<br><strong>泛型函数</strong>：在函数名称前面添加<code>&lt;T&gt;</code>，表示以T声明的参数，其参数类型必须在函数调用时指定。把T换成其他的都行，只要前后对应。如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">appendString</span><span class="params">(tag:<span class="type">String</span>, <span class="keyword">vararg</span> otherInfo: <span class="type">R</span>?)</span></span>:String &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>内联函数</strong>：<code>fun setArrayNumber(array:Array&lt;Number&gt;) &#123;&#125;</code>不接受<code>Array&lt;Int&gt;</code>或者<code>Array&lt;Double&gt;</code>的入参，得指定泛型变量T来自于基类Number，即将T改为<code>&lt;reified T:Number&gt;</code>，同时在<code>fun</code>前面添加关键字<code>inline</code>。如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T : Number&gt;</span> <span class="title">setArrayStr</span><span class="params">(array:<span class="type">Array</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;&#125;</span><br><span class="line"><span class="comment">//该函数调用时入参可为Int、Long、Double、Float类型数组。</span></span><br></pre></td></tr></table></figure><p><strong>简化函数</strong>：Kotlin把函数当作一种特殊变量，则允许通过等号给函数这个变量进行赋值。所以阶乘函数如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">factorial</span><span class="params">(n:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span> = <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) n <span class="keyword">else</span> n* factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>尾递归函数</strong>：指函数末尾的返回值重复调用了自身函数，要在<code>fun</code>前面加上关键字<code>tailrec</code>。如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">tailrec</span> <span class="function"><span class="keyword">fun</span> <span class="title">findFixPoint</span><span class="params">(x: <span class="type">Double</span> = <span class="number">1.0</span>)</span></span>: <span class="built_in">Double</span></span><br><span class="line">    = <span class="keyword">if</span> (x == Math.cos(x)) x <span class="keyword">else</span> findFixPoint(Math.cos(x))</span><br></pre></td></tr></table></figure><p><strong>高阶函数</strong>：允许将函数表达式作为输入参数传进来，就形成了高阶函数。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//允许将函数表达式作为输入参数传进来，就形成了高阶函数，这里的greater函数就像是个变量。</span></span><br><span class="line"><span class="comment">//greater函数有两个输入参数，返回布尔型的输出参数。</span></span><br><span class="line"><span class="comment">//调用时第二个参数时用大括号包了起来，这是Lambda表达式的匿名函数写法。中间的&#x27;-&gt;&#x27;把匿名函数分为两个部分，前是入参，后是函数体。如果第一个参数大于第二个参数，则认为greater返回true，否则返回false。</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">maxCustom</span><span class="params">(array: <span class="type">Array</span>&lt;<span class="type">T</span>&gt;, greater: (<span class="type">T</span>, <span class="type">T</span>) -&gt; <span class="type">Boolean</span>)</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">var</span> max: T? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> array)</span><br><span class="line">        <span class="keyword">if</span> (max == <span class="literal">null</span> || greater(item, max))</span><br><span class="line">            max = item</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用如下：</span></span><br><span class="line">maxCustom&lt;String&gt;(string_array, &#123; a, b -&gt; a.length &gt; b.length &#125;)</span><br></pre></td></tr></table></figure><p>插一段关于<a href="https://blog.csdn.net/xiangzhihong8/article/details/78666883">Kotlin 包和 import 语句使用</a>,复制样例代码到测试工程中时遇到了这个报错，因为import的package和包里声明的package以及文件目录表示的package三者不匹配。</p><h3 id="增强系统函数"><a href="#增强系统函数" class="headerlink" title="增强系统函数"></a>增强系统函数</h3><p><strong>扩展函数</strong>：例子如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扩展函数结合泛型函数，能够更好地扩展函数功能</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Array<span class="type">&lt;T&gt;</span>.<span class="title">swap</span><span class="params">(pos1: <span class="type">Int</span>, pos2: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> tmp = <span class="keyword">this</span>[pos1] <span class="comment">//this表示数组对象自身</span></span><br><span class="line">    <span class="keyword">this</span>[pos1] = <span class="keyword">this</span>[pos2]</span><br><span class="line">    <span class="keyword">this</span>[pos2] = tmp</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line"><span class="comment">//把下标为0和3的两个数组元素进行交换</span></span><br><span class="line"><span class="comment">//array可以是整型数组，也可以是双精度数组</span></span><br><span class="line">    array.swap(<span class="number">0</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>扩展高阶函数</strong>：高阶函数+泛型函数+扩展函数的功能，很强。和前面对比着看。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;给高阶函数进行扩展，形成数组的扩展函数</span><br><span class="line">fun &lt;T&gt; Array&lt;T&gt;.maxCustomize(greater: (T, T) -&gt; Boolean): T? &#123;</span><br><span class="line">    var max: T? &#x3D; null</span><br><span class="line">    for (item in this)</span><br><span class="line">        if (max &#x3D;&#x3D; null || greater(item, max))</span><br><span class="line">            max &#x3D; item</span><br><span class="line">    return max</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;调用：</span><br><span class="line">&#x2F;&#x2F;string_array.maxCustomize(&#123; a, b -&gt; a.length &gt; b.length &#125;)</span><br></pre></td></tr></table></figure><p><strong>日期时间函数</strong>：基本上每个Android工程都需要一个类似的工具类来获得不同格式的字符时间串,使用扩展函数可以实现。例如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回开发者指定格式的日期时间字符串</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Date.<span class="title">getFormatTime</span><span class="params">(format: <span class="type">String</span>=<span class="string">&quot;&quot;</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">var</span> ft = format</span><br><span class="line">    <span class="keyword">val</span> sdf = <span class="keyword">if</span> (!ft.isEmpty()) SimpleDateFormat(ft)</span><br><span class="line">    <span class="keyword">else</span> SimpleDateFormat(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> sdf.format(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line">Date().getFormatTime(<span class="string">&quot;yyyy年MM月dd日HH时mm分ss秒&quot;</span>)  </span><br><span class="line">**单例对象**：没学过java，咱也看不懂，他说像是一种阉割了的简化类。</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/LearnKotlin/2.jpg"></p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关键字object用来声明单例对象，就像Java中开发者自己定义的Utils工具类。</span></span><br><span class="line"><span class="comment">//其内部的属性等同于Java中的static静态属性，外部可直接获取属性值。</span></span><br><span class="line"><span class="keyword">object</span> DateUtil &#123;</span><br><span class="line">    /声明一个当前日期时间的属性，</span><br><span class="line">    <span class="comment">//返回的日期时间格式形如2017-10-01 10:00:00</span></span><br><span class="line">    <span class="keyword">val</span> nowDateTime: String</span><br><span class="line">        <span class="comment">//外部访问DateUtil.nowDateTime时，会自动调用nowDateTime附属的get方法得到它的值</span></span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">val</span> sdf = SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> sdf.format(Date())</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line">DateUtil.nowDateTime</span><br></pre></td></tr></table></figure><p>调用变得简洁了很多。第四章结束。</p><h2 id="20190711"><a href="#20190711" class="headerlink" title="20190711"></a>20190711</h2><p>跳过了书，直接开始搞蓝牙开发。  </p><p>参考资料：  </p><p><a href="https://blog.csdn.net/TomCat0916/article/details/80408691#_5">学习笔记__基于Kotlin的蓝牙通信工具类</a></p><p><a href="https://www.cnblogs.com/android-blogs/p/5454671.html">Android蓝牙实例（和单片机蓝牙模块通信）</a></p><p><a href="https://developer.android.com/guide/topics/connectivity/bluetooth.html?hl=zh-cn">经典蓝牙的官方开发文档（中文)</a> </p><p><a href="https://www.kotlincn.net/docs/reference/android-overview.html">Kotlin语言中文站</a> </p><p>然后放到了github上，**<a href="https://github.com/lfalive/Smart-wardrobe">链接</a>**。不过想了一下，比赛还在初期，就不开源了吧。比赛结束再开源，希望能取得一个好成绩。值得一提的是,在AndroidStudio的工程目录自动生成了gitignore文件，忽略了不必要的配置和build文件。</p><p>目前实现了app控制手机蓝牙的开关、显示该手机已配对的蓝牙设备、以及对特定的蓝牙设备(即目前用来测试的HC-05蓝牙片子)进行连接/断开连接，同时完成了手机端到HC-05的数据传输。下一步是实现app的数据接收及处理。</p><p><strong>20190714注：</strong>这个牛逼的测试程序有很多bug，我太年轻了，对蓝牙开发的理解还是不够。</p><h2 id="20190714"><a href="#20190714" class="headerlink" title="20190714"></a>20190714</h2><p>前两天没有做笔记，因为发现开发蓝牙太麻烦了，还是用已有的框架吧，然后就折腾了两天……</p><p>因为经典蓝牙的相关框架实在太少，遂转战BLE，这次准备用BLE了。其余内容在项目文档里写了，链接</p><p>旧的测试项目一样。</p><p><strong><a href="https://github.com/lfalive/SmartWardrobe">项目链接</a></strong></p><h2 id="20190717"><a href="#20190717" class="headerlink" title="20190717"></a>20190717</h2><p>第六章 6.1没啥好说。</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装Ubuntu18.04LTS，安装Python3.7及OpenCV</title>
      <link href="/2019/04/14/OpenCV&amp;Ubuntu/"/>
      <url>/2019/04/14/OpenCV&amp;Ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>上周不小心删掉了<code>Ubuntu18.04LTS</code>自带的Python3.6，环境大乱，于是决定重装一波双系统。  </p><p>下载镜像，制作启动盘之类的步骤就不说了，重要的依然是自主分区和引导设置。  </p><p>这次依然是从机械硬盘里分出了50G装Ubuntu，分区大概如下：  </p><table><thead><tr><th align="left">挂载点</th><th align="center">大小</th><th align="center">类型</th></tr></thead><tbody><tr><td align="left">swap</td><td align="center">8G</td><td align="center">逻辑分区，交换空间</td></tr><tr><td align="left">/boot</td><td align="center">1000M</td><td align="center">主分区</td></tr><tr><td align="left">/</td><td align="center">20G</td><td align="center">主分区</td></tr><tr><td align="left">/home</td><td align="center">剩下的</td><td align="center">逻辑分区</td></tr></tbody></table><p>引导选择了<code>sda windows boot manager</code>。</p><p>安装好之后，一些基本的设置和以前一样。</p><p>每次都会遇到双系统的时差问题，参考<a href="https://blog.csdn.net/ITBigGod/article/details/80251633">CSDN上的一篇讲解</a>。在Ubuntu终端执行以下语句即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo timedatectl set-local-rtc 1</span><br></pre></td></tr></table></figure><p>还有在Ubuntu下访问Windows的硬盘，提示“只读文件系统”的问题，<a href="https://www.cnblogs.com/tanrong/p/9342376.html">参考链接</a>。  </p><h2 id="Python版本问题"><a href="#Python版本问题" class="headerlink" title="Python版本问题"></a>Python版本问题</h2><p>然后是Python版本的问题。  </p><p><code>Ubuntu18.04LTS</code>自带的是Python3.6，而我想要稍微新一点儿的3.7版本，因为Python支持版本共存，那么直接<code>sudo apt-get install python3.7</code>就行了。  </p><p>然后是切换默认的python版本，即修改软连接，使python直接指向刚刚安装的3.7版本，<a href="https://www.cnblogs.com/shenckicc/p/5683597.html">参考链接</a>。</p><h2 id="默认pip指向的问题"><a href="#默认pip指向的问题" class="headerlink" title="默认pip指向的问题"></a>默认pip指向的问题</h2><p>最初执行<code>sudo pip install opencv-python</code>报错，找不到命令。按照<a href="https://blog.csdn.net/fcku_88/article/details/84191288">参考链接</a>处理，依然失败。  </p><p>于是改用<code>python3 -m pip install --upgrade pip</code>先升级一下系统自带的python3.6的pip，成功。  </p><p>但是执行<code>python -m pip install --upgrade pip</code>失败，说明python3.7没装pip，正常情况下，应该是随着python的安装而安装的……  </p><p><a href="https://blog.csdn.net/MenciusHometown/article/details/77688629">参考链接</a>  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python3.7  </span><br><span class="line">sudo apt install python3.7-dev  </span><br><span class="line">sudo apt install python3.7-venv  </span><br></pre></td></tr></table></figure><p>按照教程，最后执行了<code>sudo python3.7 get-pip.py</code>，python3.7下的pip才算弄好了。  </p><p>与此同时，<code>sudo pip</code>命令总算也可以用了。</p><p>接下来就是处理pip和pip3的指向。<a href="https://blog.csdn.net/u012516318/article/details/75339860">参考链接</a>  </p><h2 id="opencv的安装"><a href="#opencv的安装" class="headerlink" title="opencv的安装"></a>opencv的安装</h2><p>这里有很多方法。因为我在python环境下使用opencv，所以就不选择完整包安装了。在opencv的<a href="https://docs.opencv.org/4.1.0/d2/de6/tutorial_py_setup_in_ubuntu.html">官方文档</a>中，建议使用apt-get安装OpenCV-Python，但是我摸到Ubuntu软件包的页面(<a href="https://packages.ubuntu.com/bionic/python3-opencv">链接</a>)，发现opencv的版本为3.2.0，而最新的opencv已经来到了4.1.0（虽然使用还不广泛）。</p><p>经过一番搜索，发现了可以使用pip安装Unofficial pre-built OpenCV packages for Python，即PyPI上已经有了python环境的opencv包(<a href="https://pypi.org/project/opencv-python/">链接</a>)，并且是最新的4.1.0版本。  </p><p>最后决定用pip安装，<code>sudo pip install opencv-contrib-python</code>搞定。  </p><p>得到在python3.7环境下的opencv库，测试，没问题，把封面交了。</p><p><img src="https://img.lfalive.top/OpenCV%26Ubuntu/result.png"></p><p>python版本很多，opencv版本也很多，短期内应该不用再折腾了。</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>True Detective S2</title>
      <link href="/2019/02/14/TrueDetectiveS2/"/>
      <url>/2019/02/14/TrueDetectiveS2/</url>
      
        <content type="html"><![CDATA[<p>第一季是神作，就8多说了。  </p><p>第二季还是八集，看完第一集：嗯三个主角终于见面了……案子出来了。  </p><p>支线交错发展，线索错综复杂，像剧中转场所大量使用的航拍高速公路一样，看得我云里雾里，却又着了魔一样想知道后面怎么填坑。  </p><p><img src="https://img.lfalive.top/TrueDetectiveS2/1.jpg">第四集发生了一次大规模枪战，die了一大帮人，第五集竟然就是半年之后的故事了，我又是一脸问号嗷。随着剧情的深入，更多东西浮出水面……牛逼。编剧也是狠，最后一集能把人虐死。四个主角就活了一个，大团圆结局是不存在的。  </p><p>哲学是有的，但是没有第一季那么深刻。太深刻了我又看不懂了。  </p><p>影像风格满分！满篇的黑话，满屏的丧。  </p><p>后文引用自知乎。  </p><blockquote><p>黑帮老大弗兰克，出身社会底层的人，三十八岁的时候穿上自己第一件西装，自小到大历经磨难，用尽全力只想从脱离底层，洗白从良，却在一次耗尽自己毕生积蓄的交易中，成为了高层人物角力的牺牲品，顷刻间一无所有，被迫重新回到黑道争锋。  </p></blockquote><blockquote><p>黑警维尔克鲁，本来拥有美好家庭，却遭遇妻子被歹徒强暴的厄运，黑帮老大给了他追凶的线索，却使他走向了私刑报复的不归路，性情大变之余，从正义的执法者变成一名黑警，妻子也因此离他而去；妻子生下一个儿子，却不知道他的父亲到底是自己还是强暴犯，他将自己余下所有的爱都给了这个儿子，却又不敢去探知儿子真实生父的真相，在爱与痛之间变得终日消沉沦落。  </p></blockquote><blockquote><p>女警贝德拉丝，童年一段不堪的过去，让她选择以失忆去遗忘；坦承地面对自己身体欲求却被世俗所投以不公的眼神；身为警探，却有一个通过色情视频去赚取金钱的妹妹，以及新兴宗教组织精神领袖的父亲，彼此身份对立悬殊，家庭关系近乎破裂。  </p></blockquote><blockquote><p>骑警沃德拉夫，拥有能够令无数女性为之疯狂的俊俏外貌，却背负着男同性恋者的隐藏身份；不受诱惑秉公执法，却被诬陷性骚扰异性，偏偏因为不愿意暴露自己男同的身份，落得一个无从辩驳的尴尬处境；为掩饰男同的身份，形式交往了一个女朋友，却在两人分手前让对方怀孕；参军卫国本应是人民的英雄，却因执行军方安排的屠杀任务背负累累人命。  </p></blockquote><p><img src="https://img.lfalive.top/TrueDetectiveS2/2.jpg"></p><p>几位主角的形象都塑造得不错吧，有头有尾的，演员的演技不是特别出彩但都很好。很多配角就没那么幸运了，没漏过几次脸的小角色，可能是案子的关键线索，精心铺垫的支线，可能随着某个角色领便当而走到尽头。  </p><p>最后一集吧，总是让我想起绝命毒师的最后一集。荒漠、戈壁、丛林，有人为了尊严、正义或者爱人慷慨赴死。  </p><p>故事线太多，人物关系复杂，太多暗语、暗喻，看得有一点点吃力，好几次不得不暂停下来去翻前面的剧情。  </p><p><img src="https://img.lfalive.top/TrueDetectiveS2/3.gif"></p><blockquote><p>印在本季主题海报上的那一句<strong>「 WE GET THE WORLD WE DESERVE.」</strong>在剧终的那一刻成了全剧最讽刺的注脚。  </p></blockquote><p>很多人说这一季让人失望，比第一季差了不少。个人认为，这一季总体来说绝对也说是同类型剧集中的佼佼者了，还是不错的。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真探 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这个博客的诞生历程</title>
      <link href="/2018/08/29/hello-world/"/>
      <url>/2018/08/29/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="2021-4-8更新"><a href="#2021-4-8更新" class="headerlink" title="2021.4.8更新"></a>2021.4.8更新</h2><p><a href="https://butterfly.js.org/">Butterfly主题文档</a></p><p>2021年3月重置博客，更新hexo和主题版本，多了很多新特性，同时也搞了一些魔改。</p><p><a href="https://blog.zhheo.com/p/2e6bbbd0.html">Twikoo评论系统配置教程（基于腾讯云开发）</a></p><p><a href="https://butterfly.js.org/posts/507c070f/#%E9%97%9C%E9%96%89-asset-inject">Butterfly添加全局吸底Aplayer教程</a></p><h2 id="2020-5-8更新"><a href="#2020-5-8更新" class="headerlink" title="2020.5.8更新"></a>2020.5.8更新</h2><p>博客迁移了，使用了hexo，感觉功能更多了，使用主题为<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>，功能多，界面好看。</p><p>安装好主题之后，按照<a href="https://jerryc.me/posts/21cfbf15/">作者的文档</a>做了一些配置，也就是一些基本配置 ，头图、评论系统、统计系统等，那些花里胡哨的点击效果就没有搞了。</p><p>然后访问速度还是比较慢，所以这次把图都放到了七牛云，之后写一下具体步骤。</p><h2 id="原博客介绍"><a href="#原博客介绍" class="headerlink" title="原博客介绍"></a>原博客介绍</h2><h3 id="关于Jekyll"><a href="#关于Jekyll" class="headerlink" title="关于Jekyll"></a>关于Jekyll</h3><p>摘自百度百科：Jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是Jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是Jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p><p>最后决定用Github Pages和Jkeyll简单搭建一下。  </p><h3 id="关于Github-Pages"><a href="#关于Github-Pages" class="headerlink" title="关于Github Pages"></a>关于Github Pages</h3><p>用途多多，网上资料也是一大堆。</p><p><a href="https://pages.github.com/">Github Pages官网</a></p><h3 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h3><p>首先需要找一个自己喜欢的主题。 因为初次尝试，不熟悉Jekyll的目录结构，所以选了一个中文文档写得很详细的主题，也很漂亮，叫做“H2O”。 </p><p><a href="https://github.com/kaeyleo/jekyll-theme-H2O">该主题原项目</a></p><p><a href="http://jekyllthemes.org/">更多主题</a></p><h3 id="关于本地预览"><a href="#关于本地预览" class="headerlink" title="关于本地预览"></a>关于本地预览</h3><p>不搭建本地环境则不能实现本地预览，如果只是想使用主题，而不需要本地预览，可以跳过搭建本地环境的过程。关于本地环境的搭建，也有很多教程的。 一切从简，我也没有搭建本地环境。</p><h3 id="关于博客配置"><a href="#关于博客配置" class="headerlink" title="关于博客配置"></a>关于博客配置</h3><p>模板有了，接下来就是修改模板中的默认信息为自己的信息了。 可以直接Fork主题模板到自己Github库里，然后clone到本地修改配置文件，再一次次push。 也可以下载模板到本地后，修改好配置文件再push到自己库里吧。</p><p>配置文件一般为<code>_config.yml</code>，我也是对照着文档慢慢修改的。每个主题的拥有的功能也不尽相同，通过了解文档，我修改了个人信息、头图以及一些设置。</p><h3 id="关于写文章"><a href="#关于写文章" class="headerlink" title="关于写文章"></a>关于写文章</h3><p>Markdown是个好东西。不了解语法的话，也还是自己找资料吧！在本地写好后，push一下就可以了，非常方便。  </p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://liaokeyu.com/">主题作者博客</a></p><p><a href="https://blog.csdn.net/qq_27888241/article/details/77104922">使用Jekyll + GitHub Pages搭建个人博客</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Jekyll </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
